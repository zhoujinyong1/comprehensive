<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Smobiler.Plugins</name>
    </assembly>
    <members>
        <member name="T:Smobiler.Plugins.AliPay">
            <summary>
            支付宝支付组件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.AliPay.#ctor">
            <summary>
            获取 AliPay 的一个实例
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.AliPay.AppPay(System.String,System.String,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            APP支付
            </summary>
            <param name="appId">支付应用编号</param>
            <param name="orderInfo">调用支付宝接口返回的订单信息</param>
            <param name="handler">回调接口</param>
        </member>
        <member name="T:Smobiler.Plugins.ArcFace">
            <summary>
            人脸识别控件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.ArcFace.FacialRecognized">
            <summary>
            识别人脸后发生
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.ArcFace.FacialRegistered">
            <summary>
            注册人脸后发生（付费可用）
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.ArcFace.ImageCaptured">
            <summary>
            注册人脸后返回图片（付费可用）
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.ArcFace.#ctor">
            <summary>
            获取 ArcFace 的一个实例
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.ArcFace.ActiveOnline(System.String,System.String,System.String,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            激活设备 (此功能仅付费版插件可用)
            </summary>
            <param name="appid">虹软APP ID</param>
            <param name="sdkkey">虹软SDK KEY</param>
            <param name="cdkey">虹软设备激活码</param>
            <param name="handler"></param>
        </member>
        <member name="M:Smobiler.Plugins.ArcFace.Register(System.String,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            注册人脸
            </summary>
            <param name="name">注册人脸的名字</param>
            <param name="handler"></param>
        </member>
        <member name="M:Smobiler.Plugins.ArcFace.Recognize(System.Boolean)">
            <summary>
            识别人脸
            </summary>
            <param name="liveness">是否开启活体检测,只有android有效,默认:false</param>
        </member>
        <member name="M:Smobiler.Plugins.ArcFace.Exist(System.String,Smobiler.Plugins.ExistFaceEventHandler)">
            <summary>
            判断人脸是否存在
            </summary>
            <param name="name">需要判断的人脸</param>
            <param name="handler"></param>
        </member>
        <member name="M:Smobiler.Plugins.ArcFace.Delete(System.String,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            删除人脸
            </summary>
            <param name="name">需要删除的人脸</param>
            <param name="handler"></param>
        </member>
        <member name="M:Smobiler.Plugins.ArcFace.Clear(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            清空客户端人脸数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.ArcFace.AddFeatures(Smobiler.Plugins.ArcFaceFeatures[],Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            添加人脸特征 (此功能仅付费版插件可用)
            </summary>
            <param name="features">人脸特征信息</param>
            <param name="handler"></param>
        </member>
        <member name="M:Smobiler.Plugins.ArcFace.RecognizeRPCResult(System.Object,Smobiler.Core.RPC.RPCResultArgs)">
            <summary>
            用于接收Recognize调用结果回调
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smobiler.Plugins.ArcFace.ExistRPCResult(System.Object,Smobiler.Core.RPC.RPCResultArgs)">
            <summary>
            用于接收Exist调用结果回调
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Smobiler.Plugins.FacialRecognizedEventHandler">
            <summary>
            一个委托，它表示识别人脸后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 FacialRecognizedEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.FacialRecognizedEventArgs">
            <summary>
            为FacialRecognized提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.FacialRecognizedEventArgs.#ctor(System.Boolean,System.String,System.Double,System.String)">
            <summary>
            获取一个 FacialRecognizedEventArgs 实例
            </summary>
            <param name="success">是否识别成功</param>
            <param name="name">识别人脸的名字</param>
            <param name="score">识别的可信度</param>
            <param name="error">错误信息</param>
        </member>
        <member name="P:Smobiler.Plugins.FacialRecognizedEventArgs.Success">
            <summary>
            是否识别成功
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.FacialRecognizedEventArgs.Name">
            <summary>
            获取识别人脸的名字
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.FacialRecognizedEventArgs.Score">
            <summary>
            获取识别的可信度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.FacialRecognizedEventArgs.Error">
            <summary>
            获取错误信息
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.FacialRegisteredEventHandler">
            <summary>
            一个委托，它表示注册人脸后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 FacialRegisteredEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.FacialRegisteredEventArgs">
            <summary>
            为FacialRegistered提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.FacialRegisteredEventArgs.#ctor(System.String,System.String)">
            <summary>
            获取一个 FacialRegisteredEventArgs 实例
            </summary>
            <param name="name">人脸的名字</param>
            <param name="feature">人脸特征信息</param>
        </member>
        <member name="P:Smobiler.Plugins.FacialRegisteredEventArgs.Name">
            <summary>
            获取注册人脸的名字
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.FacialRegisteredEventArgs.Feature">
            <summary>
            获取人脸特征信息
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.ExistFaceEventHandler">
            <summary>
            一个委托，它表示判断人脸后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 ExistFaceEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.ExistFaceEventArgs">
            <summary>
            为FacialRecognized提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.ExistFaceEventArgs.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
            获取一个 FacialRecognizedEventArgs 实例
            </summary>
            <param name="success">接口是否成功</param>
            <param name="exist">判断人脸是否存在,在success为true时存在</param>
            <param name="error">success为false时存在</param>
        </member>
        <member name="P:Smobiler.Plugins.ExistFaceEventArgs.Success">
            <summary>
            接口是否成功
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ExistFaceEventArgs.Exist">
            <summary>
            判断是否人脸存在,在success为true时存在
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ExistFaceEventArgs.Error">
            <summary>
            获取错误信息
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.ArcFaceFeatures">
            <summary>
            人脸信息
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.ArcFaceFeatures.#ctor(System.String,System.Byte[])">
            <summary>
            构造方法
            </summary>
            <param name="name">人脸名称</param>
            <param name="feature">人脸特征</param>
        </member>
        <member name="P:Smobiler.Plugins.ArcFaceFeatures.Name">
            <summary>
            人脸名称
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ArcFaceFeatures.Feature">
            <summary>
            人脸特征
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.ArcFaceFeaturesCollection">
            <summary>
            人脸信息集合
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.Audio">
            <summary>
            录音插件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.Audio.Recorded">
            <summary>
            录音完成后发生
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Audio.#ctor">
            <summary>
            获取一个实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.Audio.AudioDuration">
            <summary>
            音频录制时长
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.Audio.SampleRate">
            <summary>
            音频采样率
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.Audio.Channels">
            <summary>
            音频通道数
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.Audio.IncludeByte">
            <summary>
            是否返回Base64格式
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Audio.PrepareRecordingAtPath(System.Single,System.Single,System.Int32,System.Boolean,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            设置
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Audio.Start(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            打开
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Audio.Pause(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            暂停
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Audio.Resume(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            继续
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Audio.Stop(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Audio.OnRPCResult(System.Object,Smobiler.Core.RPC.RPCResultArgs)">
            <summary>
            用于接收RPC调用结果回调
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smobiler.Plugins.Audio.OnEventRaised(System.Object)">
            <summary>
            处理状态回调
            </summary>
            <param name="params">参数</param>
        </member>
        <member name="T:Smobiler.Plugins.AudioRecordedEventHandler">
            <summary>
            一个委托，它表示录音完成后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 AudioRecordedEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.AudioRecordedEventArgs">
            <summary>
            为Recorded提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.AudioRecordedEventArgs.#ctor(System.String,System.String,System.Decimal,System.String)">
            <summary>
            获取一个 AudioRecordedEventArgs 实例
            </summary>
            <param name="URL">地址</param>
            <param name="Status">状态</param>
            <param name="Duration">时长</param>
            <param name="Base64">Base64</param>
        </member>
        <member name="P:Smobiler.Plugins.AudioRecordedEventArgs.URL">
            <summary>
            获取地址。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.AudioRecordedEventArgs.Status">
            <summary>
            获取状态。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.AudioRecordedEventArgs.Duration">
            <summary>
            获取录制时长。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.AudioRecordedEventArgs.Data">
            <summary>
            获取二进制数据。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.BarcodeReader">
            <summary>
            条码扫码组件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.BarcodeReader.BarcodeRead">
            <summary>
            条码扫码后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.BarcodeReader.#ctor">
            <summary>
            获取一个实例
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.BarcodeReader.GetBarcode(Smobiler.Plugins.BarcodeReaderEventHandler)">
            <summary>
            条码扫码
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.BarcodeReader.Release(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            释放缓存
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.BarcodeReader.OnRPCResult(System.Object,Smobiler.Core.RPC.RPCResultArgs)">
            <summary>
            用于接收RPC调用结果回调
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Smobiler.Plugins.BarcodeReaderEventHandler">
            <summary>
            一个委托，它表示条码扫描后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 BarcodeReaderEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.BarcodeReaderEventArgs">
            <summary>
            为扫码提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.BarcodeReaderEventArgs.#ctor(System.String)">
            <summary>
            获取一个 BarcodeReaderEventArgs 实例
            </summary>
            <param name="data">扫描数据</param>
        </member>
        <member name="P:Smobiler.Plugins.BarcodeReaderEventArgs.Data">
            <summary>
            获取扫描数据。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MobileNativeTextControl">
            <summary>
            MobileNativeTextControl
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MobileNativeTextControl.#ctor">
            <summary>
            Create an instance of MobileNativeTextControl
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MobileNativeTextControl.FontSize">
            <summary>
            获取或设置控件字体大小
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MobileNativeTextControl.ForeColor">
            <summary>
            获取或设置控件的前景色，用于显示文本。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MobileNativeTextControl.Bold">
            <summary>
            获取或设置文本粗体
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MobileNativeTextControl.Italic">
            <summary>
            获取或设置文本斜体
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MobileNativeTextControl.Underline">
            <summary>
            获取或设置文本下划线
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MobileNativeTextControl.HorizontalAlignment">
            <summary>
            获取或设置控件水平方向
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MobileNativeTextControl.VerticalAlignment">
            <summary>
            获取和设置文本垂直方向。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MobileNativeTextControl.Selectable">
            <summary>
            获取或设置一个值，该值指示是否可以长按选择文本。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MobileNativeTextControl.NumberOfLines">
            <summary>
            获取和设置一个值，该值指示显示的行数。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MobileNativeTextControl.LineHeight">
            <summary>
            获取和设置一个值，该值指示行高。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.Bluetooth">
            <summary>
            蓝牙通讯组件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.Bluetooth.DataReceived">
            <summary>
            接收蓝牙后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.#ctor">
            <summary>
            获取一个实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.Bluetooth.BluetoothStatus">
            <summary>
            蓝牙状态
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.Bluetooth.IsReset">
            <summary>
            是否重置蓝牙连接,即为true时,同一种蓝牙设备只能连接一台,为false时,允许多个连接
            </summary>     
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.Open(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            打开蓝牙
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.Close(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            关闭蓝牙
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.GetStatus(Smobiler.Plugins.BluetoothGetStatusEventHandler)">
            <summary>
            获取经典蓝牙连接状态
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.GetBleStatus(Smobiler.Plugins.BluetoothGetStatusEventHandler)">
            <summary>
            获取低功耗蓝牙连接状态
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.Search(Smobiler.Plugins.BluetoothAfterSearchEventHandler,System.String,System.Boolean,System.Int32)">
            <summary>
            查找并连接经典蓝牙
            </summary>
            <param name="handler">查找并连接经典蓝牙后触发</param>
            <param name="uuid">连接时对应的uuid 默认"00001101-0000-1000-8000-00805F9B34FB"</param>
            <param name="receiveSleep">是否在蓝牙接收到数据时延时一段时间接收数据,防止数据大时一次性接收不完整, 默认:false</param>
            <param name="sleepTime">receiveSleep=true时有效,延迟接收的时间, 默认:100,单位:ms</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.SearchBle(System.String,System.String,System.String,Smobiler.Plugins.BluetoothAfterSearchEventHandler)">
            <summary>
            查找并连接低功耗蓝牙
            </summary>
            <param name="uuidService">连接时的service uuid,需要蓝牙供应商提供</param>
            <param name="uuidTransmitCharUuid">连接时发送内容的uuid,需要蓝牙供应商提供</param>
            <param name="uuidReceiveCharUuid">连接时接收内容的uuid,如果与发送id相同,请填写相同id.需要蓝牙供应商提供</param>
            <param name="handler">查找并连接低功耗蓝牙后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.Connect(System.String,Smobiler.Core.Controls.ComponentOnResultHandler,System.String,System.Boolean,System.Int32)">
            <summary>
            连接指定经典蓝牙
            </summary>
            <param name="macAddress">连接蓝牙的mac地址</param>
            <param name="handler">连接指定蓝牙后触发</param>
            <param name="uuid">连接时对应的uuid 默认"00001101-0000-1000-8000-00805F9B34FB"</param>
            <param name="receiveSleep">是否在蓝牙接收到数据时延时一段时间接收数据,防止数据大时一次性接收不完整, 默认:false</param>
            <param name="sleepTime">receiveSleep=true时有效,延迟接收的时间, 默认:100,单位:ms</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.ConnectBle(System.String,System.String,System.String,System.String,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            连接指定低功耗蓝牙
            </summary>
            <param name="macAddress">连接蓝牙的mac地址</param>
            <param name="uuidService">连接时的service uuid,需要蓝牙供应商提供</param>
            <param name="uuidTransmitCharUuid">连接时发送内容的uuid,需要蓝牙供应商提供</param>
            <param name="uuidReceiveCharUuid">连接时接收内容的uuid,如果与发送id相同,请填写相同id.需要蓝牙供应商提供</param>
            <param name="handler">连接指定蓝牙后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.CloseConnect(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            断开连接上的经典蓝牙设备
            </summary>
            <param name="handler">断开连接上的经典蓝牙设备后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.CloseConnect(System.String,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            断开连接上的指定经典蓝牙设备
            </summary>
            <param name="macAddress">需要断开的蓝牙mac地址（IsReset为false时有效）</param>
            <param name="handler">断开连接上的经典蓝牙设备后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.CloseAllConnect(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            断开连接上的所有经典蓝牙设备（IsReset为false时有效）
            </summary>
            <param name="handler">断开连接上的经典蓝牙设备后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.CloseConnectBle(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            断开连接上的低功耗蓝牙设备
            </summary>
            <param name="handler">断开连接上的低功耗蓝牙设备后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.CloseConnectBle(System.String,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            断开连接上的指定低功耗蓝牙设备
            </summary>
            <param name="macAddress">需要断开的蓝牙mac地址（IsReset为false时有效）</param>
            <param name="handler">断开连接上的低功耗蓝牙设备后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.CloseAllConnectBle(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            断开连接上的所有低功耗蓝牙设备（IsReset为false时有效）
            </summary>
            <param name="handler">断开连接上的低功耗蓝牙设备后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.WriteData(System.Byte[],Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            发送经典蓝牙信息
            </summary>
            <param name="data">需要发送给经典蓝牙设备的数据</param>
            <param name="handler">发送蓝牙信息后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.WriteData(System.String,System.Byte[],Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            发送经典蓝牙信息
            </summary>
            <param name="macAddress">发送的经典蓝牙设备地址（IsReset为false时有效）</param>
            <param name="data">需要发送给经典蓝牙设备的数据</param>
            <param name="handler">发送蓝牙信息后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.WriteDataAll(System.Byte[],Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            给所有设备发送经典蓝牙信息（IsReset为false时有效）
            </summary>
            <param name="data">需要发送给经典蓝牙设备的数据</param>
            <param name="handler">发送蓝牙信息后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.WriteBleData(System.Byte[],Smobiler.Plugins.BluetoothBleResponse,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            发送低功耗蓝牙信息
            </summary>
            <param name="data">需要发送给低功耗蓝牙设备的数据</param>
            <param name="response">发送指令状态</param>
            <param name="handler">发送蓝牙信息后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.WriteBleData(System.String,System.Byte[],Smobiler.Plugins.BluetoothBleResponse,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            发送低功耗蓝牙信息
            </summary>
            <param name="macAddress">发送的经典蓝牙设备地址（IsReset为false时有效）</param>
            <param name="data">需要发送给低功耗蓝牙设备的数据</param>
            <param name="response">发送指令状态</param>
            <param name="handler">发送蓝牙信息后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.WriteBleDataAll(System.Byte[],Smobiler.Plugins.BluetoothBleResponse,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            给所有设备发送低功耗蓝牙信息（IsReset为false时有效）
            </summary>
            <param name="data">需要发送给低功耗蓝牙设备的数据</param>
            <param name="response">发送指令状态</param>
            <param name="handler">发送蓝牙信息后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.OnRPCResult(System.Object,Smobiler.Core.RPC.RPCResultArgs)">
            <summary>
            用于接收RPC调用结果回调
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smobiler.Plugins.Bluetooth.OnEventRaised(System.Object)">
            <summary>
            处理蓝牙状态回调
            </summary>
            <param name="params">参数</param>
        </member>
        <member name="T:Smobiler.Plugins.BluetoothGetStatusEventHandler">
            <summary>
            一个委托，它表示在IsConnect方法调用返回通知时要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 <see cref="T:Smobiler.Plugins.BluetoothGetStatusEventArgs"/></param>
        </member>
        <member name="T:Smobiler.Plugins.BluetoothGetStatusEventArgs">
            <summary>
            为IsConnect提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.BluetoothGetStatusEventArgs.#ctor(Smobiler.Plugins.BluetoothStatus,System.String,System.String,System.String[])">
            <summary>
            获取一个 BluetoothIsConnectEventArgs 实例
            </summary>
            <param name="status">蓝牙连接状态</param>
            <param name="name">连接蓝牙的名称</param>
            <param name="macaddress">连接蓝牙的mac地址</param>
            <param name="devices">连接蓝牙mac地址的集合（IsReset为false时有效）</param>
        </member>
        <member name="P:Smobiler.Plugins.BluetoothGetStatusEventArgs.Name">
            <summary>
            连接蓝牙的名称。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.BluetoothGetStatusEventArgs.MacAddress">
            <summary>
            连接蓝牙的mac地址。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.BluetoothGetStatusEventArgs.Devices">
            <summary>
            连接蓝牙mac地址的集合（IsReset为false时有效）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.BluetoothGetStatusEventArgs.Status">
            <summary>
            蓝牙连接状态
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.BluetoothAfterSearchEventHandler">
            <summary>
            一个委托，它表示在Search方法调用返回通知时要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 <see cref="T:Smobiler.Plugins.BluetoothAfterSearchEventArgs"/></param>
        </member>
        <member name="T:Smobiler.Plugins.BluetoothAfterSearchEventArgs">
            <summary>
            为AfterSearch提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.BluetoothAfterSearchEventArgs.#ctor(System.String,System.String)">
            <summary>
            获取一个 BluetoothAfterSearchEventArgs 实例
            </summary>
            <param name="name">连接蓝牙的名称</param>
            <param name="macaddress">连接蓝牙的mac地址</param>
        </member>
        <member name="P:Smobiler.Plugins.BluetoothAfterSearchEventArgs.Name">
            <summary>
            连接蓝牙的名称。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.BluetoothAfterSearchEventArgs.MacAddress">
            <summary>
            连接蓝牙的mac地址。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.BluetoothDataReceivedEventHandler">
            <summary>
            一个委托，它表示接收蓝牙后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的<see cref="T:Smobiler.Plugins.BluetoothDataReceivedEventArgs"/></param>
        </member>
        <member name="T:Smobiler.Plugins.BluetoothDataReceivedEventArgs">
            <summary>
            为DataReceived提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.BluetoothDataReceivedEventArgs.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            获取一个 BluetoothDataReceivedEventArgs 实例
            </summary>
            <param name="message">信息</param>
            <param name="isBle">是否是低功耗蓝牙信息回调</param>
            <param name="deviceid">返回信息的蓝牙的mac地址</param>
        </member>
        <member name="P:Smobiler.Plugins.BluetoothDataReceivedEventArgs.Data">
            <summary>
            获取数据。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.BluetoothDataReceivedEventArgs.IsBle">
            <summary>
            获取是否是低功耗蓝牙信息回调。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.BluetoothDataReceivedEventArgs.Deviceid">
            <summary>
            返回信息的蓝牙的mac地址。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.BluetoothStatus">
            <summary>
            蓝牙状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.BluetoothStatus.Connected">
            <summary>
            已连接
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.BluetoothStatus.NotConnect">
            <summary>
            未连接
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.BluetoothStatus.DisConnect">
            <summary>
            失去连接
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.BluetoothBleResponse">
            <summary>
            蓝牙发送指令状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.BluetoothBleResponse.WRITE_TYPE_DEFAULT">
            <summary>
            默认类型,需要外围设备的回应
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.BluetoothBleResponse.WRITE_TYPE_NO_RESPONSE">
            <summary>
            不需要外围设备的回应
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.BluetoothBleResponse.WRITE_TYPE_SIGNED">
            <summary>
            写特征携带认证签名
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.CalenderStrip">
            <summary>
            日期条控件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.CalenderStrip.onChange">
            <summary>
            在用户点击日期后发生。
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CalenderStrip.MinDateTime">
            <summary>
            日期最小时间
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CalenderStrip.MaxDateTime">
            <summary>
            日期最大时间
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.CalenderStrip.#ctor">
            <summary>
            构建函数
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.MaxDate">
            <summary>
            获取与设置能选择的最大日期
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.MinDate">
            <summary>
            获取与设置能选择的最小日期
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.SelectedDate">
            <summary>
            获取与设置选中的日期
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.HeaderColor">
            <summary>
            获取与设置显示月份年份字体的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.IconColor">
            <summary>
            获取与设置左右选择按钮的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.DateNumberColor">
            <summary>
            获取与设置非周末日期字体的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.DateNameColor">
            <summary>
            获取与设置非周末星期字体的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.HighlightDateNumberColor">
            <summary>
            获取与设置选中日期字体的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.HighlightDateNameColor">
            <summary>
            获取与设置选中星期字体的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.WeekendDateNumberColor">
            <summary>
            获取与设置周末日期字体的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.WeekendDateNameColor">
            <summary>
            获取与设置周末星期字体的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.DisabledDateNumberColor">
            <summary>
            获取与设置不能选择日期字体的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.DisabledDateNameColor">
            <summary>
            获取与设置不能选择星期字体的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.DaySelectionType">
            <summary>
            获取与设置选中日期样式
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.DaySelectionColor">
            <summary>
            获取与设置选中日期样式颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.ShowDate">
            <summary>
            获取与设置是否显示日期和星期
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.ShowMonth">
            <summary>
            获取与设置是否显示月份行
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.ShowDayName">
            <summary>
            获取与设置是否显示星期行
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStrip.ShowDayNumber">
            <summary>
            获取与设置是否显示日期行
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.DaySelectionType">
            <summary>
            日期选择类型
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.DaySelectionType.Default">
            <summary>
            无样式
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.DaySelectionType.Border">
            <summary>
            边框包裹
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.DaySelectionType.Background">
            <summary>
            背景包裹
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.CalenderStripChangeEventArgs">
            <summary>
            为 <see cref="T:Smobiler.Plugins.CalenderStripEventHandler"/> 提供数据 
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CalenderStripChangeEventArgs.Value">
            <summary>
            获取和设置选中值
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.CalenderStripChangeEventArgs.#ctor(System.DateTime)">
            <summary>
            构造函数
            </summary>
            <param name="value">选中值</param>
            <remarks></remarks>
        </member>
        <member name="T:Smobiler.Plugins.CalenderStripEventHandler">
            <summary>
            一个委托，它表示在点击后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 CalenderStripChangeEventArgs</param>
            <remarks></remarks>
        </member>
        <member name="T:Smobiler.Plugins.CN6508">
             <summary>
            CN6508
             </summary>
        </member>
        <member name="E:Smobiler.Plugins.CN6508.BarcodeDataCaptured">
            <summary>
            条码扫描后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.#ctor">
            <summary>
            获取一个实例
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.Open(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            打开打印服务
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.Close(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            关闭打印服务
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.GoToNextPage(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            送纸
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.PrintLineInit(System.Int32,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            打印单行文本之前调用
            </summary>
            <param name="lineMaxSize">设置此行最大字号</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.PrintLineString(System.String,System.Int32,System.Int32,System.Boolean,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            根据参数描述，绘制单行文本。
            </summary>
            <param name="str">文本内容</param>
            <param name="textSize">文本字号</param>
            <param name="nLeft">x坐标</param>
            <param name="bBold">是否加粗</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.PrintLineStringByType(System.String,System.Int32,Smobiler.Plugins.CN6508PrintType,System.Boolean,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            根据参数描述，绘制单行文本。
            </summary>
            <param name="str">文本内容</param>
            <param name="textSize">文本字号</param>
            <param name="type">文本对齐方式</param>
            <param name="bBold">是否加粗</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.PrintLineEnd(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            打印绘制好的单行文本。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.PrintStringEx(System.String,System.Int32,System.Boolean,System.Boolean,Smobiler.Plugins.CN6508PrintType,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            根据参数描述打印长文本，文本较长时，可换行打印。
            </summary>
            <param name="str">文本内容</param>
            <param name="textSize">文本字号</param>
            <param name="bUnderline">是否有下划线</param>
            <param name="bBold">是否加粗</param>
            <param name="type">文本对齐方式</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.PrintBitmapAtHorizontalCenter(System.Byte[],Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            在一个水平方向居中打印图片
            </summary>
            <param name="data">图片数据</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.PrintBitmap(System.Byte[],System.Int32,System.Int32,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            设置x、y轴打印图片
            </summary>
            <param name="data">图片数据</param>
            <param name="x">x轴</param>
            <param name="y">y轴</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.PrintBitmapAtCenter(System.Byte[],System.Int32,System.Int32,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            在水平和垂直方向居中打印图片
            </summary>
            <param name="data">图片数据</param>
            <param name="labelHeight">可供打印的区域高度</param>
            <param name="labelWidth">可供打印的区域宽度</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.DoHardwarePrint(System.Byte[],Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            直接打印一个图片
            </summary>
            <param name="data">图片数据</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.GetBarcode(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            开始扫码
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.SetScanModel(Smobiler.Plugins.CN6508ScanMode,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            设置扫描模式
            </summary>
            <param name="state">模式设置</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.SetScanDelaySetting(Smobiler.Plugins.CN6508ScanTime,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            设置当前连续扫描时间间隔，该函数只有在扫描模式为连续扫描下起作用
            </summary>
            <param name="time">设置扫描间隔</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.SetScanSound(System.Boolean,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            设置扫描声音
            </summary>
            <param name="flag">（True（打开）；false（关闭））</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.setScanVibrate(System.Boolean,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            设置扫描震动
            </summary>
            <param name="flag">（True（打开）；false（关闭））</param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.OnRPCResult(System.Object,Smobiler.Core.RPC.RPCResultArgs)">
            <summary>
            用于接收RPC调用结果回调
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smobiler.Plugins.CN6508.OnEventRaised(System.Object)">
            <summary>
            处理扫描事件（原因是由于扫描事件并不通过RPC结果回调，而是通过当前插件的Event。
            </summary>
            <param name="params"></param>
        </member>
        <member name="T:Smobiler.Plugins.CN6508BarcodeScanEventHandler">
            <summary>
            一个委托，它表示条码扫描后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 CN6508BarcodeScanEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.CN6508BarcodeScanEventArgs">
            <summary>
            为BarcodeScan提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.CN6508BarcodeScanEventArgs.#ctor(System.String)">
            <summary>
            获取一个 CN6508BarcodeScanEventArgs 实例
            </summary>
            <param name="data">扫描数据</param>
        </member>
        <member name="P:Smobiler.Plugins.CN6508BarcodeScanEventArgs.Data">
            <summary>
            获取扫描数据。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.CN6508PrintType">
            <summary>
            CN6508文本对齐方式
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508PrintType.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508PrintType.VerticalCentering">
            <summary>
            VerticalCentering
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508PrintType.VerticalHorizontalCentering">
            <summary>
            VerticalHorizontalCentering
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508PrintType.Centering">
            <summary>
            Centering
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508PrintType.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508PrintType.TopCentering">
            <summary>
            TopCentering
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508PrintType.LeftTop">
            <summary>
            LeftTop
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508PrintType.RightTop">
            <summary>
            RightTop
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.CN6508ScanMode">
            <summary>
            CN6508扫描模式
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508ScanMode.Ordinary">
            <summary>
            普通
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508ScanMode.AutoContinuous">
            <summary>
            连续扫描(自动)
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508ScanMode.ManualContinuous">
            <summary>
            连续扫描(手动:按下不松开连续扫描，松开停止)
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.CN6508ScanTime">
            <summary>
            CN6508连续扫描间隔
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508ScanTime.Time_0">
            <summary>
            间隔0
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508ScanTime.Time_500">
            <summary>
            间隔500ms
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.CN6508ScanTime.Time_1000">
            <summary>
            间隔1000ms
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.AndroidCodeCompiler">
            <summary>
            AndroidCodeComplier
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.AndroidCodeCompiler.AndroidCodeCompilerResult">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeCompiler.Compile(Smobiler.Plugins.AndroidCodeProvider,System.String)">
            <summary>
            预编译,若再次调用则执行
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeCompiler.Compile(Smobiler.Plugins.AndroidCodeProvider,Smobiler.Plugins.CodeProviderResultHandler)">
            <summary>
            预编译,若再次调用则执行
            </summary>
            <param name="provider"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeCompiler.Run(Smobiler.Plugins.AndroidCodeProvider,System.String)">
            <summary>
            编译并执行
            </summary>
            <param name="provider"></param>
            <param name="value"></param>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeCompiler.Run(Smobiler.Plugins.AndroidCodeProvider,Smobiler.Plugins.CodeProviderResultHandler)">
            <summary>
            编译并执行
            </summary>
            <param name="provider"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeCompiler.Run(Smobiler.Plugins.AndroidCodeProvider,System.String,Smobiler.Plugins.CodeProviderResultHandler)">
            <summary>
            编译并执行
            </summary>
            <param name="provider"></param>
            <param name="value"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeCompiler.Compile(Smobiler.Plugins.AndroidCodeProvider,System.String,Smobiler.Plugins.CodeProviderResultHandler)">
            <summary>
            预编译,若再次调用则执行
            </summary>
            <param name="provider"></param>
            <param name="value"></param>
            <param name="handler"></param>
        </member>
        <member name="T:Smobiler.Plugins.AndroidCodeCompilerEventHandler">
            <summary>
            一个委托，它表示回调后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 AndroidCodeCompilerEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.AndroidCodeCompilerEventArgs">
            <summary>
            提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeCompilerEventArgs.#ctor(System.String,System.String)">
            <summary>
            获取一个 AndroidCodeCompilerEventArgs 实例
            </summary>
            <param name="data">数据</param>
            /// <param name="id">ID</param>
        </member>
        <member name="P:Smobiler.Plugins.AndroidCodeCompilerEventArgs.Data">
            <summary>
            获取数据。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.AndroidCodeCompilerEventArgs.ID">
            <summary>
            获取ID。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.AndroidCodeProvider">
            <summary>
            Android动态方法
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeProvider.#ctor">
            <summary>
            获取 <see cref="T:Smobiler.Plugins.AndroidCodeProvider"/> 的实例
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeProvider.#ctor(Smobiler.Plugins.AndroidCodeImportsCollection)">
            <summary>
            获取 <see cref="T:Smobiler.Plugins.AndroidCodeProvider"/> 的实例
            </summary>
            <param name="imports"></param>
        </member>
        <member name="P:Smobiler.Plugins.AndroidCodeProvider.Imports">
            <summary>
            获取和设置Android方法import集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smobiler.Plugins.AndroidCodeImportsCollection">
            <summary>
            Android包名导入集合
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.AndroidCodeImportsCollection.Item(System.Int32)">
            <summary>
            获取指定索引集合元素
            </summary>
            <param name="index">索引</param>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeImportsCollection.Add(System.String)">
            <summary>
            添加集合元素
            </summary>
            <param name="item">集合元素</param>
            <remarks></remarks>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeImportsCollection.AddRange(System.String[])">
            <summary>
            添加集合元素数组
            </summary>
            <param name="items">集合元素数组</param>
            <remarks></remarks>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeImportsCollection.AddInternal(System.String)">
            <summary>
            内部添加
            </summary>
            <param name="item"></param>
            <remarks></remarks>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeImportsCollection.Clear">
            <summary>
            清除元素集合
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeImportsCollection.Contains(System.String)">
            <summary>
            判断是否存在给定集合元素
            </summary>
            <param name="item"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeImportsCollection.IndexOf(System.String)">
            <summary>
            获取指定集合元素的索引
            </summary>
            <param name="item"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeImportsCollection.Remove(System.String)">
            <summary>
            删除指定集合元素
            </summary>
            <param name="item"></param>
            <remarks></remarks>
        </member>
        <member name="M:Smobiler.Plugins.AndroidCodeImportsCollection.RemoveAt(System.Int32)">
            <summary>
            删除指定索引位置的集合元素
            </summary>
            <param name="index"></param>
            <remarks></remarks>
        </member>
        <member name="T:Smobiler.Plugins.CodeProvider">
            <summary>
            代码
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CodeProvider.ClassName">
            <summary>
            动态类名，使用MD5值
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CodeProvider.ID">
            <summary>
            ID值
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CodeProvider.URL">
            <summary>
            此属性暂不使用（为了保留为文件为URL下载的需求）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CodeProvider.MethodBodyChanged">
            <summary>
            获取和设置一个值，该值指示当前方法是否有变化
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CodeProvider.MethodBody">
            <summary>
            获取和设置方法
            </summary>
            <returns></returns>
        </member>
        <member name="P:Smobiler.Plugins.CodeProvider.MethodResult">
            <summary>
            获取和设置回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.CodeProvider.CreateDynamicClass(System.String)">
            <summary>
            创建动态类
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.CodeProviderResultHandler">
            <summary>
            一个委托，它表示要调用的方法。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Smobiler.Plugins.CodeProviderResultArgs">
            <summary>
            为回调提供数据
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.CodeProviderResultArgs.Result">
            <summary>
            获取和设置动态方法返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smobiler.Plugins.JsCodeCompiler">
            <summary>
            JsCodeComplier
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.JsCodeCompiler.Run(Smobiler.Plugins.JsCodeProvider,Smobiler.Plugins.CodeProviderResultHandler)">
            <summary>
            编译并执行
            </summary>
            <param name="provider"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Smobiler.Plugins.JsCodeCompiler.Run(Smobiler.Plugins.JsCodeProvider,System.Object,Smobiler.Plugins.CodeProviderResultHandler)">
            <summary>
            编译并执行
            </summary>
            <param name="provider"></param>
            <param name="value"></param>
            <param name="handler"></param>
        </member>
        <member name="T:Smobiler.Plugins.JsCodeProvider">
            <summary>
            Js动态方法
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.JsCodeProvider.#ctor">
            <summary>
            获取 <see cref="T:Smobiler.Plugins.JsCodeProvider"/> 的实例
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.DropdownAlert">
            <summary>
            下拉警告
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.DropdownAlert.Show">
            <summary>
            显示下拉警告框
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.Type">
            <summary>
            获取与设置显示alert的类型
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.Title">
            <summary>
            获取与设置标题行文本内容
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.Message">
            <summary>
            获取与设置内容行文本内容
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.SuccessColor">
            <summary>
            获取与设置success模式下背景颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.InfoColor">
            <summary>
            获取与设置info模式下背景颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.WarnColor">
            <summary>
            获取与设置warn模式下背景颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.ErrorColor">
            <summary>
            获取与设置error模式下背景颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.CustomColor">
            <summary>
            获取与设置custom模式下背景颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.CustomImage">
            <summary>
            获取与设置custom模式下的图片
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.CloseInterval">
            <summary>
            获取与设置alert显示时间（毫秒）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.TitleNumOfLines">
            <summary>
            获取与设置标题栏的行数
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.DropdownAlert.MessageNumOfLines">
            <summary>
            获取与设置内容行的行数
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.DropdownAlertType">
            <summary>
            下拉警告类型
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.DropdownAlertType.info">
            <summary>
            info
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.DropdownAlertType.warn">
            <summary>
            warn
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.DropdownAlertType.error">
            <summary>
            error
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.DropdownAlertType.success">
            <summary>
            success
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.DropdownAlertType.custom">
            <summary>
            custom
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.FingerPrint">
            <summary>
            指纹组件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.FingerPrint.isSensorAvailable(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            判断是否支持指纹验证
            </summary>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.FingerPrint.authenticate(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            指纹验证
            </summary>
            <param name="handler">结果回调</param>
        </member>
        <member name="T:Smobiler.Plugins.HighLightLabel">
            <summary>
            高亮文本控件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.HighLightLabel.#ctor">
            <summary>
            构建函数
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.HighLightLabel.HighLightWords">
            <summary>
            获取与设置重点文字内容
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.HighLightLabel.Text">
            <summary>
            获取与设置文字内容
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.HighLightLabel.HighlightFontSize">
            <summary>
            获取与设置重点文字的大小
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.HighLightLabel.HighlightForeColor">
            <summary>
            获取与设置重点文字的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.HighLightLabel.HighlightFontWeight">
            <summary>
            获取与设置重点文字的粗细
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.HighLightLabel.HighlightBackColor">
            <summary>
            获取与设置重点文字的背景色
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.HighLightLabelFontWeight">
            <summary>
            高亮文本粗细
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.HighLightLabelFontWeight.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.HighLightLabelFontWeight.Bold">
            <summary>
            Bold
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.HighLightLabelFontWeight.Weight100">
            <summary>
            Weight100
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.HighLightLabelFontWeight.Weight200">
            <summary>
            Weight200
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.HighLightLabelFontWeight.Weight300">
            <summary>
            Weight300
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.HighLightLabelFontWeight.Weight400">
            <summary>
            Weight400
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.HighLightLabelFontWeight.Weight500">
            <summary>
            Weight500
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.HighLightLabelFontWeight.Weight600">
            <summary>
            Weight600
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.HighLightLabelFontWeight.Weight700">
            <summary>
            Weight700
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.HighLightLabelFontWeight.Weight800">
            <summary>
            Weight800
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.HighLightLabelFontWeight.Weight900">
            <summary>
            Weight900
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.HTMLView">
            <summary>
            超文本控件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.HTMLView.#ctor">
            <summary>
            构建函数
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.HTMLView.HTML">
            <summary>
            获取与设置HTML
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.HTMLView.URI">
            <summary>
            获取与设置URI
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.HTMLView.TextSelectable">
            <summary>
            获取与设置是否允许修改文本内容
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.LiveStreamPlayer">
            <summary>
            直播控件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.LiveStreamPlayer.StateChanged">
            <summary>
            视频状态改变后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.LiveStreamPlayer.#ctor">
            <summary>
            初始化LiveStreamPlayer类的一个新实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.LiveStreamPlayer.Url">
            <summary>
            获取和设置媒体源
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.LiveStreamPlayer.OnEventRaised(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            处理视频回调
            </summary>
            <param name="params"></param>
        </member>
        <member name="T:Smobiler.Plugins.LiveStreamPlayerStateChangedEventHandler">
            <summary>
            一个委托，它表示状态改变后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 LiveStreamStateChangedEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.LiveStreamStateChangedEventArgs">
            <summary>
            为StateChanged提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.LiveStreamStateChangedEventArgs.#ctor(Smobiler.Plugins.LiveStreamState)">
            <summary>
            获取一个 StreamStateChangedEventArgs 实例
            </summary>
            <param name="state">状态</param>
        </member>
        <member name="P:Smobiler.Plugins.LiveStreamStateChangedEventArgs.State">
            <summary>
            获取返回的状态。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.LiveStreamState">
            <summary>
            视频状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.LiveStreamState.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.LiveStreamState.Play">
            <summary>
            播放
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.LiveStreamState.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.LiveStream">
            <summary>
            直播推送控件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.LiveStream.OnChanged">
            <summary>
            视频状态改变后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.LiveStream.#ctor">
            <summary>
            初始化LiveStream类的一个新实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.LiveStream.Filter">
            <summary>
            获取和设置美颜功能
            </summary>
            <returns></returns>
        </member>
        <member name="P:Smobiler.Plugins.LiveStream.Url">
            <summary>
            获取和设置媒体源
            </summary>
            <returns></returns>
        </member>
        <member name="P:Smobiler.Plugins.LiveStream.Play">
            <summary>
            获取和设置是否开启直播推送
            </summary>
            <returns></returns>
        </member>
        <member name="P:Smobiler.Plugins.LiveStream.SwapCamera">
            <summary>
            获取和设置是否开启前置摄像头
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.LiveStream.OnEventRaised(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            处理回调
            </summary>
            <param name="params"></param>
        </member>
        <member name="T:Smobiler.Plugins.LiveStreamOnChangedEventHandler">
            <summary>
            一个委托，它表示状态改变后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 LiveStreamOnChangedEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.LiveStreamOnChangedEventArgs">
            <summary>
            为OnChanged提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.LiveStreamOnChangedEventArgs.#ctor(Smobiler.Plugins.LiveStreamOnState)">
            <summary>
            获取一个 LiveStreamOnChangedEventArgs 实例
            </summary>
            <param name="state">状态</param>
        </member>
        <member name="P:Smobiler.Plugins.LiveStreamOnChangedEventArgs.State">
            <summary>
            获取返回的状态。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.LiveStreamOnState">
            <summary>
            视频状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.LiveStreamOnState.Start">
            <summary>
            开始
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.LiveStreamOnState.End">
            <summary>
            停止
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.LiveStreamOnState.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.LiveStreamOnState.StartOrEndFailure">
            <summary>
            开始或停止失败
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapRoute">
            <summary>
            路径控件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapRoute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapRoute.RouteColor">
            <summary>
            获取和设置路径颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapRoute.RouteWidth">
            <summary>
            获取和设置路径宽度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapRoute.ArrowLength">
            <summary>
            获取和设置箭头长度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapRoute.Enable">
            <summary>
            获取和设置是否可滑动控件
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapRoute.ResourcePath">
            <summary>
            获取和设置资源存储路径
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapRoute.ResourceID">
            <summary>
            获取和设置资源名称
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapRoute.ResourceMode">
            <summary>
            获取或设置资源模式
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapRoute.ResourceContentType">
            <summary>
            获取和设置资源数据类型
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapRoute.DrawRoute(System.Drawing.Point[])">
            <summary>
            显示路线
            </summary>
            <param name="points">坐标点</param>
        </member>
        <member name="P:Smobiler.Plugins.MapRoute.BackColor">
            <summary>
            隐藏背景色
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapRoute.Clear">
            <summary>
            清空路线
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapTrimView">
            <summary>
            地点微调控件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapTrimView.#ctor">
            <summary>
            初始化MapTrimView类的一个新实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapTrimView.DefaultHeight">
            <summary>
            默认高度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapTrimView.DefaultWidth">
            <summary>
            默认宽度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapTrimView.Latitude">
            <summary>
            获取和设置地图纬度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapTrimView.Longitude">
            <summary>
            获取和设置地图经度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapTrimView.Description">
            <summary>
            获取和设置地图描述
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapTrimView.GeoType">
            <summary>
            获取和设置地图类型。
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.MapTrimView.LocationChanged">
            <summary>
            地图标签移动时触发
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapTrimView.OnLocationChanged(System.Single,System.Single,System.String)">
            <summary>
            触发LocationChanged事件
            </summary>
            <param name="latitude">地图纬度</param>
            <param name="longitude">地图经度</param>
            <param name="description">地图描述</param>
        </member>
        <member name="M:Smobiler.Plugins.MapTrimView.OnEventRaised(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            触发事件通知
            </summary>
            <param name="params"></param>
        </member>
        <member name="T:Smobiler.Plugins.MapTrimViewLocationChanged">
            <summary>
            一个委托，它表示在地图上的标签移动时需要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的MapTrimViewLocationChangedEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.MapTrimViewLocationChangedEventArgs">
            <summary>
            为MapTrimViewlocationChanged提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapTrimViewLocationChangedEventArgs.#ctor(System.Single,System.Single,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="latitude">地图纬度</param>
            <param name="longitude">地图经度</param>
            <param name="description">地图描述</param>
        </member>
        <member name="P:Smobiler.Plugins.MapTrimViewLocationChangedEventArgs.Latitude">
            <summary>
            获取地图上标签的纬度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapTrimViewLocationChangedEventArgs.Longitude">
            <summary>
            获取地图上标签的经度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapTrimViewLocationChangedEventArgs.Description">
            <summary>
            获取地图上标签的描述
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapView">
            <summary>
            地图控件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.MapView.TagClick">
            <summary>
            在地图标签被点击时触发。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapView.#ctor">
            <summary>
            初始化MapView类的一个新实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapView.DefaultHeight">
            <summary>
            默认高度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapView.DefaultWidth">
            <summary>
            默认宽度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapView.ZoomLevel">
            <summary>
            获取和设置地图显示级别
            </summary>
            <value>大于等于3，小于等于19</value>
        </member>
        <member name="P:Smobiler.Plugins.MapView.GeoType">
            <summary>
            获取和设置地图类型。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapView.TagNavigation">
            <summary>
            获取和设置点击Tag描述内容时,是否提示跳转导航
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapView.Tags">
            <summary>
            获取地图标签集合。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapView.Routes">
            <summary>
            获取地图路径集合。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapView.SearchRoute(Smobiler.Plugins.MapViewPoint,Smobiler.Plugins.MapViewPoint,Smobiler.Plugins.MapViewPoint[])">
            <summary>
            搜索路径
            </summary>
            <param name="start">起始位置</param>
            <param name="stop">结束位置</param>
            <param name="waypoint">途经点，0-16个</param>
        </member>
        <member name="M:Smobiler.Plugins.MapView.AfterLoad">
            <summary>
            在屏幕重新载入当前控制时，需要重新发送当前的地图数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapView.OnEventRaised(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            触发事件通知
            </summary>
            <param name="params"></param>
        </member>
        <member name="M:Smobiler.Plugins.MapView.OnTagClick(Smobiler.Plugins.MapViewTag)">
            <summary>
            触发TagClick事件
            </summary>
            <param name="tag"></param>
        </member>
        <member name="T:Smobiler.Plugins.GeoType">
            <summary>
            坐标类型
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.GeoType.GCJ_02">
            <summary>
            火星坐标系
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.GeoType.BD_09">
            <summary>
            百度坐标系
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapViewTagClickEventHandler">
            <summary>
            一个委托，它表示在地图上的标签被点击时需要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 MapViewTagClickEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.MapViewTagClickEventArgs">
            <summary>
            为MapViewTagClick提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapViewTagClickEventArgs.#ctor(Smobiler.Plugins.MapViewTag)">
            <summary>
            构造函数
            </summary>
            <param name="tag">地图标签</param>
        </member>
        <member name="P:Smobiler.Plugins.MapViewTagClickEventArgs.Tag">
            <summary>
            获取地图上点击的标签。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapViewNavi">
            <summary>
            导航组件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.MapViewNavi.OnNavi">
            <summary>
            在导航时触发。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapViewNavi.#ctor">
            <summary>
            获取一个实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewNavi.GeoType">
            <summary>
            获取和设置地图类型。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapViewNavi.StartNavi(Smobiler.Plugins.MapViewNaviPoint,Smobiler.Plugins.MapViewNaviPoint,Smobiler.Plugins.MapViewNaviPoint[])">
            <summary>
            启动导航
            </summary>
            <param name="start">起始位置</param>
            <param name="stop">结束位置</param>
            <param name="waypoint">途经点，0-3个</param>
        </member>
        <member name="M:Smobiler.Plugins.MapViewNavi.StartNaviWithNoTag">
            <summary>
            不添加导航点启动导航界面
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapViewNavi.OnEventRaised(System.Object)">
            <summary>
            触发事件通知
            </summary>
            <param name="params"></param>
        </member>
        <member name="T:Smobiler.Plugins.MapViewNaviPoint">
            <summary>
            地图坐标
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapViewNaviPoint.#ctor(System.Double,System.Double)">
            <summary>
            构造方法
            </summary>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
        </member>
        <member name="M:Smobiler.Plugins.MapViewNaviPoint.#ctor(System.Double,System.Double,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="description">坐标描述</param>
        </member>
        <member name="M:Smobiler.Plugins.MapViewNaviPoint.#ctor(System.Double,System.Double,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="description">坐标描述</param>
            <param name="poiid">高德POIId</param>
        </member>
        <member name="P:Smobiler.Plugins.MapViewNaviPoint.Longitude">
            <summary>
            获取经度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewNaviPoint.Latitude">
            <summary>
            获取纬度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewNaviPoint.Description">
            <summary>
            获取坐标描述
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewNaviPoint.POIId">
            <summary>
            获取高德POIId
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapViewState">
            <summary>
            导航状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.MapViewState.Start">
            <summary>
            api执行
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.MapViewState.Init">
            <summary>
            导航初始化
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.MapViewState.Calculate">
            <summary>
            路径规划
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.MapViewState.Arrive">
            <summary>
            到达目的地
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.MapViewState.Back">
            <summary>
            退出导航
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapViewOnNaviEventHandler">
            <summary>
            一个委托，它表示在导航时需要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 MapViewOnNaviEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.MapViewOnNaviEventArgs">
            <summary>
            为OnNavi提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapViewOnNaviEventArgs.#ctor(Smobiler.Plugins.MapViewState,System.String,System.Int32,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="state">导航状态</param>
            <param name="error">错误</param>
            <param name="errorcode">错误码</param>
            <param name="success">是否成功</param>
        </member>
        <member name="P:Smobiler.Plugins.MapViewOnNaviEventArgs.Success">
            <summary>
            获取是否成功
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewOnNaviEventArgs.Error">
            <summary>
            获取错误信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewOnNaviEventArgs.ErrorCode">
            <summary>
            获取错误码
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewOnNaviEventArgs.State">
            <summary>
            获取导航状态
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapViewPoint">
            <summary>
            地图坐标
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapViewPoint.#ctor(System.Double,System.Double)">
            <summary>
            构造方法
            </summary>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
        </member>
        <member name="M:Smobiler.Plugins.MapViewPoint.#ctor(System.Double,System.Double,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="description">坐标描述</param>
        </member>
        <member name="M:Smobiler.Plugins.MapViewPoint.#ctor(System.Double,System.Double,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="description">坐标描述</param>
            <param name="imageurl">坐标点图标样式</param>
        </member>
        <member name="P:Smobiler.Plugins.MapViewPoint.Longitude">
            <summary>
            获取经度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewPoint.Latitude">
            <summary>
            获取纬度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewPoint.Description">
            <summary>
            获取坐标描述
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewPoint.ImageUrl">
            <summary>
            获取坐标点图标样式,如果给空,则显示默认样式
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapViewPointCollection">
            <summary>
            地图坐标集合
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapViewRoute">
            <summary>
            地图路径
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapViewRoute.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewRoute.ID">
            <summary>
            获取路径编号
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MapViewRoute.Point">
            <summary>
            获取路径坐标集合
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapViewRouteCollection">
            <summary>
            地图路径集合
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapViewTag">
            <summary>
            地图标签
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MapViewTag.#ctor(System.Double,System.Double)">
            <summary>
            构造方法
            </summary>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
        </member>
        <member name="M:Smobiler.Plugins.MapViewTag.#ctor(System.Double,System.Double,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="description">坐标描述</param>
        </member>
        <member name="M:Smobiler.Plugins.MapViewTag.#ctor(System.Double,System.Double,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <param name="description"></param>
            <param name="imageurl"></param>
        </member>
        <member name="P:Smobiler.Plugins.MapViewTag.ID">
            <summary>
            获取内部编号
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MapViewTagCollection">
            <summary>
            地图坐标集合
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MarqueeLabel">
            <summary>
            跑马灯效果文本
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MarqueeLabel.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MarqueeLabel.ScrollDuration">
            <summary>
            获取与设置文字轮播一页所消耗的时间
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MarqueeLabel.Text">
            <summary>
            获取与设置显示的文字(若想添加组显示，文字中间添加空格)
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MediaView">
            <summary>
            多媒体控件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.MediaView.StateChanged">
            <summary>
            视频状态改变后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MediaView.#ctor">
            <summary>
            初始化MediaView类的一个新实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MediaView.Url">
            <summary>
            获取和设置媒体源
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.MediaView.Refresh">
            <summary>
            重新加载资源
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.MediaView.AutoPlay">
            <summary>
            获取和设置一个值，该值指示是否自动播放。
            </summary>
            <value>设置为 <c>true</c> 自动播放; 否则, <c>false</c>.</value>
        </member>
        <member name="P:Smobiler.Plugins.MediaView.Repeat">
            <summary>
            获取和设置一个值，该值指示是否循环播放。
            </summary>
            <value>设置为 <c>true</c> 循环播放; 否则, <c>false</c>.</value>
        </member>
        <member name="P:Smobiler.Plugins.MediaView.ResourceDownload">
            <summary>
            获取和设置一个值，该值指示是否下载视频后播放。
            </summary>
            <value>设置为 <c>true</c> 下载后播放; 否则, <c>false</c>.</value>
        </member>
        <member name="P:Smobiler.Plugins.MediaView.SizeMode">
            <summary>
            获取和设置指示如何显示图像
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Smobiler.Plugins.MediaView.OnEventRaised(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            处理视频回调
            </summary>
            <param name="params"></param>
        </member>
        <member name="T:Smobiler.Plugins.MediaViewStateChangedEventHandler">
            <summary>
            一个委托，它表示状态改变后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 MediaViewStateChangedEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.MediaViewStateChangedEventArgs">
            <summary>
            为StateChanged提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.MediaViewStateChangedEventArgs.#ctor(Smobiler.Plugins.MediaState)">
            <summary>
            获取一个MediaViewStateChangedEventArgs 实例
            </summary>
            <param name="state">状态</param>
        </member>
        <member name="P:Smobiler.Plugins.MediaViewStateChangedEventArgs.State">
            <summary>
            获取返回的状态。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.MediaState">
            <summary>
            视频状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.MediaState.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.MediaState.Play">
            <summary>
            播放
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.MediaState.End">
            <summary>
            结束
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.MediaState.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.MediaState.Replay">
            <summary>
            重播
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.NFC">
            <summary>
            NFC
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.NFC.NFCTag">
            <summary>
            获取标签后发生。
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.NFC.NdefWrite">
            <summary>
            Ndef写入内容后发生。
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.NFC.RequestTech">
            <summary>
            连接指定类型卡片后发生。
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.NFC.NFCState">
            <summary>
            NFC服务状态改变后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.NFC.#ctor">
            <summary>
            获取 NFC 的一个实例
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.NFC.Start(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            初始化模块
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.Stop(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            关闭监听
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.IsSupported(System.String,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            检查硬件是否支持NFC
            </summary>
            <param name="tech">可选参数，使用NfcTech类的常量，默认为''</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.IsEnabled(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            检查NFC是否已启用
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.RegisterTagEvent(System.Boolean,System.Int32,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            开始收听NFC标签。
            </summary>
            <param name="isReaderModeEnabled">是否开启阅读器模式</param>
            <param name="readerModeFlags">阅读器模式标志</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.UnregisterTagEvent(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            停止收听NFC标签。
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.GoToNfcSetting(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            将用户引导至NFC设置
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.GetLaunchTagEvent(Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            获取启动应用程序的NFC标记对象。
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.CancelTechnologyRequest(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            取消之前的NFC技术请求。
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.RequestTechnology(System.String,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            请求特定的NFC技术来执行高级操作。
            </summary>
            <param name="tech">使用的NFC技术</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.CloseTechnology(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            完成所有NFC技术操作后，您应该调用此API以断开标记并释放资源。
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.GetTag(Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            获取标签
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.SetNdefPushMessage(System.Byte[],Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
             触发Android Beam，它可以将Ndef（由bytes您传递的数组构建）发送到远程设备。请注意，registerTagEvent在调用此函数之前必须先调用。
            </summary>
            <param name="bytes">数据</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.GetCachedNdefMessage(Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            读取标记内的缓存NdefMessage，不再进行IO操作。
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.GetNdefMessage(Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            读取标记内的当前NdefMessage。
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.WriteNdefMessage(System.Byte[],Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            请求将NdefMessage（由bytes传递的数组构造）写入标记。
            </summary>
            <param name="bytes">数据</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.MifareClassicGetBlockCountInSector(System.Int32,Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            返回给定扇区中块数的promise。
            </summary>
            <param name="sectorIndex">获取的扇区</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.MifareClassicGetSectorCount(Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            返回卡上扇区数。
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.MifareClassicSectorToBlock(System.Int32,Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            返回给定扇区的blockIndex的promise。
            </summary>
            <param name="sectorIndex">获取的扇区</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.MifareClassicReadBlock(System.Int32,System.Int32,System.Byte[],Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            从Mifare Classic卡读取块/扇区。
            </summary>
            <param name="blockIndex">块数</param>
            <param name="sectorIndex">扇区</param>
            <param name="key">key值</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.MifareClassicReadSector(System.Int32,System.Byte[],Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            从Mifare Classic卡读取块/扇区。
            </summary>
            <param name="sectorIndex">扇区</param>
            <param name="key">key值</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.MifareClassicWriteBlock(System.Int32,System.Byte[],System.Int32,System.Byte[],Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            将块写入Mifare Classic卡
            </summary>
            <param name="blockIndex">块数</param>
            <param name="block">块数据</param>
            <param name="sectorIndex">扇区</param>
            <param name="key">key值</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.MifareUltralightReadPages(System.Int32,Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            Read 4 pages (16 bytes).
            </summary>
            <param name="pageOffset">索引页（从0开始）</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.MifareUltralightWritePage(System.Int32,System.Byte[],Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            Write 1 pages (4 bytes).
            </summary>
            <param name="pageOffset">索引页（从0开始）</param>
            <param name="bytes">数据(4 bytes)</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.MakeReadOnly(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            使标记变为只读。
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.SetTimeout(System.Int32,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            设置收发超时（以毫秒为单位）
            </summary>
            <param name="timeout">超时时间</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.Transceive(System.Byte[],Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            将原始数据发送到标记并接收响应
            </summary>
            <param name="bytes">发送的数据</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.GetMaxTransceiveLength(Smobiler.Plugins.NFCResultEventHandler)">
            <summary>
            返回可以发送的最大字节
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.CancelNdefWrite(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            取消挂起的ndef写入操作。
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.RequestNdefWrite(System.Byte[],System.Boolean,System.Boolean,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            请求将NdefMessage（由bytes您传递的数组构建）写入下一个发现的标记
            </summary>
            <param name="bytes">数据</param>
            <param name="format">格式</param>
            <param name="formtReadOnly">是否只读</param>
            <param name="handler">回调</param>
        </member>
        <member name="M:Smobiler.Plugins.NFC.OnEventRaised(System.Object)">
            <summary>
            处理扫描事件（原因是由于扫描事件并不通过RPC结果回调，而是通过当前插件的Event。
            </summary>
            <param name="params"></param>
        </member>
        <member name="T:Smobiler.Plugins.NFCTagEventHandler">
            <summary>
            一个委托，它表示获取标签要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 NFCTagEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.NFCTagEventArgs">
            <summary>
            为获取标签提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.NFCTagEventArgs.#ctor(System.Object)">
            <summary>
            获取一个 NFCTagEventArgs 实例
            </summary>
            <param name="nfctag">NFcTag</param>
        </member>
        <member name="P:Smobiler.Plugins.NFCTagEventArgs.NFCTag">
            <summary>
            获取NFCTag值。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.NdefWriteEventHandler">
            <summary>
            一个委托，它表示Ndef写入内容后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 NdefWriteEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.NdefWriteEventArgs">
            <summary>
            为Ndef写入内容后回调
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.NdefWriteEventArgs.#ctor(Smobiler.Plugins.NdefWriteState)">
            <summary>
            获取一个 NdefWriteEventArgs 实例
            </summary>
            <param name="state">状态</param>
        </member>
        <member name="P:Smobiler.Plugins.NdefWriteEventArgs.State">
            <summary>
            获取状态值。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RequestTechEventHandler">
            <summary>
            一个委托，它表示连接指定卡片后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 RequestTechEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.RequestTechEventArgs">
            <summary>
            为连接指定卡片后回调
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RequestTechEventArgs.#ctor(Smobiler.Plugins.RequestTechState)">
            <summary>
            获取一个 RequestTechEventArgs 实例
            </summary>
            <param name="state">状态</param>
        </member>
        <member name="P:Smobiler.Plugins.RequestTechEventArgs.State">
            <summary>
            获取状态值。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.NFCStateEventHandler">
            <summary>
            一个委托，它表示NFC返回服务状态要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 NFCStateEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.NFCStateEventArgs">
            <summary>
            NFC返回服务状态回调
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.NFCStateEventArgs.#ctor(Smobiler.Plugins.NFCState)">
            <summary>
            获取一个 NFCStateEventArgs 实例
            </summary>
            <param name="state">状态</param>
        </member>
        <member name="P:Smobiler.Plugins.NFCStateEventArgs.State">
            <summary>
            获取状态值。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.NFCResultEventHandler">
            <summary>
            一个委托，它表示获取Result要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 NFCResultEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.NFCResultEventArgs">
            <summary>
            为获取标签提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.NFCResultEventArgs.#ctor(System.Object)">
            <summary>
            获取一个 NFCResultEventArgs 实例
            </summary>
            <param name="result">result</param>
        </member>
        <member name="P:Smobiler.Plugins.NFCResultEventArgs.Result">
            <summary>
            获取Result值。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.NdefWriteState">
            <summary>
            Ndef写入状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.NdefWriteState.Success">
            <summary>
            写入成功
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.NdefWriteState.Faild">
            <summary>
            写入失败
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.NdefWriteState.Canceled">
            <summary>
            取消写入
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RequestTechState">
            <summary>
            连接指定类型卡片状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.RequestTechState.Connect">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.RequestTechState.DisConnect">
            <summary>
            未连接状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.RequestTechState.Canceled">
            <summary>
            连接取消
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.NFCState">
            <summary>
            NFC服务状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.NFCState.ON">
            <summary>
            开启状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.NFCState.Off">
            <summary>
            关闭状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.NFCState.Turning_off">
            <summary>
            正在关闭
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.NFCState.Turning_on">
            <summary>
            正在打开
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.NFCState.Unknown">
            <summary>
            获取状态失败
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.PDFView">
            <summary>
            PDF控件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.PDFView.#ctor">
            <summary>
            初始化PDFView类的一个新实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PDFView.DefaultWidth">
            <summary>
            默认宽度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PDFView.DefaultHeight">
            <summary>
            默认高度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PDFView.ResourceID">
            <summary>
            获取和设置资源编号
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PDFView.ResourceMode">
            <summary>
            获取或设置获取图像模式
            </summary>
            <value>默认为File，代表直接从文件读取，如果设置为Customize，代表可以从自定义的接口中获取图片的二进制数据</value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Smobiler.Plugins.PDFView.ResourcePath">
            <summary>
            获取或设置图像存储路径
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Smobiler.Plugins.PDFView.ResourceContentType">
            <summary>
            获取和设置资源数据类型
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PDFView.ResourceData">
            <summary>
            获取和设置图像资源数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smobiler.Plugins.PercentageCircle">
            <summary>
            百分比圆形控件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.PercentageCircle.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PercentageCircle.ValueColor">
            <summary>
            获取与设置默认百分比进度条值颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PercentageCircle.Value">
            <summary>
            获取与设置默认百分比进度条比值（0-100）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PercentageCircle.CircleColor">
            <summary>
            获取与设置默认百分比进度条颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PercentageCircle.InnerColor">
            <summary>
            获取与设置百分比进度条内部颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PercentageCircle.CircleSize">
            <summary>
            获取与设置百分比进度条宽度
            </summary>
            <value>最小值为2</value>
            <remarks>仅在设计时或第一次加载前设置生效</remarks>
        </member>
        <member name="P:Smobiler.Plugins.PercentageCircle.Layout">
            <summary>
            百分比圆形控件默认使用相对布局
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PercentageCircle.Direction">
            <summary>
            百分比圆形控件默认使用垂直布局
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PercentageCircle.JustifyAlign">
            <summary>
            百分比圆形控件默认主轴居中
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PercentageCircle.ItemAlign">
            <summary>
            百分比圆形控件默认侧轴居中
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.PercentageCircle.BeforePaintDesign(System.Object,Smobiler.Core.Controls.OnPaintDesignArgs)">
            <summary>
            在绘制子控件前，绘制百分比的内容
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Smobiler.Plugins.ProgressView">
            <summary>
            进度条控件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.ProgressView.#ctor">
            <summary>
            初始化ProgressView类的一个新实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.Type">
            <summary>
            获取和设置控件的样式
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.IndeterMinate">
            <summary>
            获取和设置是否指标将会旋转（progress属性将无效）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.Progress">
            <summary>
            获取和设置进度条的值(0-1)
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.Color">
            <summary>
            获取和设置progress选中填充部分颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.UnfilledColor">
            <summary>
            获取和设置progress剩余未填充部分颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.ProgressBorderWidth">
            <summary>
            获取和设置progress边框宽度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.ProgressBorderColor">
            <summary>
            获取和设置progress边框颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.ProgressBorderRadius">
            <summary>
            获取和设置progress边框圆角半径（type=bar时有效）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.CircleThickness">
            <summary>
            获取和设置progress内圈的厚度（type=circle,circlesnail 时有效）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.ShowsText">
            <summary>
            获取和设置是否文字显示进度(type=circle 时有效）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.CircleDirection">
            <summary>
            获取和设置进度按顺时针还是逆时针显示，默认顺时针（type=circle时有效）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ProgressView.SnailColor">
            <summary>
            获取和设置螺旋显示的颜色(type=CircleSnail时有效)
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.ProgressViewType">
            <summary>
            控件的样式
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.ProgressViewType.circle">
            <summary>
            圆环形
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.ProgressViewType.pie">
            <summary>
            圆饼行
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.ProgressViewType.bar">
            <summary>
            条形
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.ProgressViewType.circlesnail">
            <summary>
            特殊圆环形
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.ProgressViewType.verticalbar">
            <summary>
            竖条形
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.ProgressViewCircleDirection">
            <summary>
            时针
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.ProgressViewCircleDirection.clockwise">
            <summary>
            顺时针
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.ProgressViewCircleDirection.counterclockwise">
            <summary>
            逆时针
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.PulseLoader">
            <summary>
            动态Loader
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.PulseLoader.onPress">
            <summary>
            用户点击按钮后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.PulseLoader.#ctor">
            <summary>
            构建函数
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PulseLoader.ResourceID">
            <summary>
            获取与设置图片地址
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PulseLoader.ResourcePath">
            <summary>
            图像存储路径
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PulseLoader.ResourceContentType">
            <summary>
            获取和设置资源数据类型
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PulseLoader.Interval">
            <summary>
            获取与设置边缘脉冲产生的间隔（单位毫秒）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PulseLoader.CircleColor">
            <summary>
            获取与设置边缘脉冲的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PulseLoader.ImageScale">
            <summary>
            获取与设置图片在控件所占的比例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PulseLoader.CallBack">
            <summary>
            获取与设置按钮点击时是否产生loadding
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.PulseLoader.ResourceMode">
            <summary>
            获取或设置资源模式
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RichTextBox">
            <summary>
            富文本控件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.RichTextBox.TagChanged">
            <summary>
            编辑器的选定标签改变后发生。
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.RichTextBox.StyleChanged">
            <summary>
            选定的编辑器样式改变后发生。
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.RichTextBox.OnValueChanged">
            <summary>
            编辑器的值改变后发生。
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.RichTextBox.OnRemoveImage">
            <summary>
            删除图片后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RichTextBox.#ctor">
            <summary>
            初始化RichTextBox类的一个新实例
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RichTextBox.OnEventRaised(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            处理回调
            </summary>
            <param name="params"></param>
        </member>
        <member name="T:Smobiler.Plugins.RichTextBoxTagChangedEventHandler">
            <summary>
            一个委托，它表示编辑器的选定标签改变后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 RichTextBoxTagChangedEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.RichTextBoxTagChangedEventArgs">
            <summary>
            为TagChanged提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RichTextBoxTagChangedEventArgs.#ctor(Smobiler.Plugins.RichTextBoxTag)">
            <summary>
            获取一个 RichTextBoxTagChangedEventArgs 实例
            </summary>
            <param name="tag">状态</param>
        </member>
        <member name="P:Smobiler.Plugins.RichTextBoxTagChangedEventArgs.Tag">
            <summary>
            获取返回的状态。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RichTextBoxStyleChangedEventHandler">
            <summary>
            一个委托，它表示选定的编辑器样式改变后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 RichTextBoxStyleChangedEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.RichTextBoxStyleChangedEventArgs">
            <summary>
            为StyleChanged提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RichTextBoxStyleChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            获取一个 RichTextBoxTagChangedEventArgs 实例
            </summary>
            <param name="color">颜色</param>
            <param name="highlight">高亮</param>
        </member>
        <member name="P:Smobiler.Plugins.RichTextBoxStyleChangedEventArgs.SelectedColor">
            <summary>
            获取返回的状态。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RichTextBoxStyleChangedEventArgs.SelectedHighlight">
            <summary>
            获取返回的状态。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RichTextBoxOnValueChangedEventHandler">
            <summary>
            一个委托，它表示编辑器的值改变后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 RichTextBoxOnValueChangedEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.RichTextBoxOnValueChangedEventArgs">
            <summary>
            为OnValueChanged提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RichTextBoxOnValueChangedEventArgs.#ctor(System.Object)">
            <summary>
            获取一个 RichTextBoxTagChangedEventArgs 实例
            </summary>
            <param name="value">值</param>
        </member>
        <member name="P:Smobiler.Plugins.RichTextBoxOnValueChangedEventArgs.Value">
            <summary>
            获取返回的值。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RichTextBoxOnRemoveImageEventHandler">
            <summary>
            一个委托，它表示删除图片后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 RichTextBoxOnRemoveImageEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.RichTextBoxOnRemoveImageEventArgs">
            <summary>
            为OnRemoveImage提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RichTextBoxOnRemoveImageEventArgs.#ctor(System.String,System.String)">
            <summary>
            获取一个 RichTextBoxOnRemoveImageEventArgs 实例
            </summary>
            <param name="id">id</param>
            <param name="url">地址</param>
        </member>
        <member name="P:Smobiler.Plugins.RichTextBoxOnRemoveImageEventArgs.Url">
            <summary>
            获取返回的地址。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RichTextBoxOnRemoveImageEventArgs.ID">
            <summary>
            获取返回的ID。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RichTextBoxTag">
            <summary>
            标签类型
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.RichTextBoxTag.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.RichTextBoxTag.Body">
            <summary>
            Body
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.RichTextBoxTag.Heading">
            <summary>
            Heading
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.RichTextBoxTag.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IM">
            <summary>
            IM组件
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IM.Token">
            <summary>
            获取和设置Token
            </summary>
            <returns></returns>
        </member>
        <member name="E:Smobiler.Plugins.RongIM.IM.IMViewExit">
            <summary>
            IM界面退出时发生
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.RongIM.IM.LoadUserInfo">
            <summary>
            在IM异步获取用户信息时发生。
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:Smobiler.Plugins.RongIM.IM.LoadGroupInfo">
            <summary>
            在IM异步获取群组信息时发生。
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:Smobiler.Plugins.RongIM.IM.LoadGroupMembers">
            <summary>
            在IM异步获取群组成员时发生。
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:Smobiler.Plugins.RongIM.IM.TokenExpired">
            <summary>
            在IM会话过期时发生。
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.RongIM.IM.Initial">
            <summary>
            在IM初始化完成后发生。
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.RongIM.IM.UnReadMessage">
            <summary>
            在IM接收到有未读消息时发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.InitialToken(System.String,System.String,System.String)">
            <summary>
            初始化用户Token
            </summary>
            <param name="userId">Token用户编号</param>
            <param name="userName">Token用户名称</param>
            <param name="portraitUri">Token用户头像</param>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.InitialToken">
            <summary>
            根据当前Token重新初始化客户端
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.Logout">
            <summary>
            退出当前用户并清除Token
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.StartPrivateChat(System.String,System.String)">
            <summary>
            开始单用户聊天
            </summary>
            <param name="userid">用户编号</param>
            <param name="title">聊天抬头</param>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.StartGroupChat(System.String,System.String)">
            <summary>
            开始群组聊天
            </summary>
            <param name="groupid">群组编号</param>
            <param name="title">聊天抬头</param>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.StartConversationList">
            <summary>
            打开会话列表
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.CreateUser(System.String,System.String,System.String)">
            <summary>
            创建用户
            </summary>
            <param name="userId">用户编号</param>
            <param name="userName">用户名称</param>
            <param name="portraitUri">用户头像</param>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.GetUserToken(System.String,System.String,System.String)">
            <summary>
            获取用户Token
            </summary>
            <param name="userId">用户编号</param>
            <param name="userName">用户名称</param>
            <param name="portraitUri">用户头像</param>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.RefreshUser(System.String,System.String,System.String)">
            <summary>
            刷新用户信息
            </summary>
            <param name="userId">用户编号</param>
            <param name="userName">用户名称</param>
            <param name="portraitUri">用户头像</param>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.CreateGroup(System.String[],System.String,System.String)">
            <summary>
            创建群组
            </summary>
            <param name="userId">用户编号</param>
            <param name="groupId">群组编号</param>
            <param name="groupName">群组名称</param>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.CreateGroup(System.String[],System.String,System.String,System.String)">
            <summary>
            创建群组
            </summary>
            <param name="userId">用户编号</param>
            <param name="groupId">群组编号</param>
            <param name="groupName">群组名称</param>
            <param name="portraitUri">群组头像</param>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.JoinGroup(System.String[],System.String,System.String)">
            <summary>
            加入群组
            </summary>
            <param name="userId">用户编号</param>
            <param name="groupId">群组编号</param>
            <param name="groupName">群组名称</param>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.QuitGroup(System.String[],System.String)">
            <summary>
            退出群组
            </summary>
            <param name="userId">用户编号</param>
            <param name="groupId">群组编号</param>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.DismissGroup(System.String,System.String)">
            <summary>
            解散群组
            </summary>
            <param name="userId">解散群组的操作用户</param>
            <param name="groupId">群组编号</param>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IM.OnEventRaised(System.Object)">
            <summary>
            处理事件（原因是由于事件并不通过RPC结果回调，而是通过当前插件的Event。
            </summary>
            <param name="params"></param>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMLoadUserInfoHandler">
            <summary>
            一个委托，它表示IM异步获取用户信息时所调用的方法。
            </summary>
            <param name="sender">事件发送者</param>
            <param name="e">事件数据</param>
            <remarks></remarks>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMLoadUserInfoArgs">
            <summary>
            为 <see cref="T:Smobiler.Plugins.RongIM.IMLoadUserInfoHandler" /> 提供数据
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMLoadUserInfoArgs.Result">
            <summary>
            获取和设置用户信息。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMLoadUserInfoArgs.UserId">
            <summary>
            获取和设置用户编号。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMLoadGroupInfoHandler">
            <summary>
            一个委托，它表示IM异步获取群组信息时所调用的方法。
            </summary>
            <param name="sender">事件发送者</param>
            <param name="e">事件数据</param>
            <remarks></remarks>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMLoadGroupInfoArgs">
            <summary>
            为 <see cref="T:Smobiler.Plugins.RongIM.IMLoadGroupInfoHandler" /> 提供数据
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMLoadGroupInfoArgs.Result">
            <summary>
            获取和设置组信息。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMLoadGroupInfoArgs.GroupId">
            <summary>
            获取和设置组编号。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMLoadGroupMembersHandler">
            <summary>
            一个委托，它表示IM异步获取群组成员时所调用的方法。
            </summary>
            <param name="sender">事件发送者</param>
            <param name="e">事件数据</param>
            <remarks></remarks>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMLoadGroupMembersArgs">
            <summary>
            为 <see cref="T:Smobiler.Plugins.RongIM.IMLoadGroupMembersHandler" /> 提供数据
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMLoadGroupMembersArgs.Result">
            <summary>
            获取和设置组内用户。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMLoadGroupMembersArgs.GroupId">
            <summary>
            获取和设置组编号。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMTokenExpiredHandler">
            <summary>
            一个委托，它表示IM会话过期时所调用的方法。
            </summary>
            <param name="sender">事件发送者</param>
            <param name="e">事件数据</param>
            <returns></returns>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMTokenExpiredArgs">
            <summary>
            为 <see cref="T:Smobiler.Plugins.RongIM.IMTokenExpiredHandler" /> 提供数据
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMTokenExpiredArgs.Result">
            <summary>
            获取和设置新的会话编号。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMTokenExpiredArgs.UserId">
            <summary>
            获取和设置会话用户编号。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMInitialHandler">
            <summary>
            一个委托，它表示IM初始化完成后所调用的方法。
            </summary>
            <param name="sender">事件发送者</param>
            <param name="e">事件数据</param>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMInitialArgs">
            <summary>
            为 <see cref="T:Smobiler.Plugins.RongIM.IMInitialHandler" /> 提供数据
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMInitialArgs.InitialResult">
            <summary>
            获取和设置初始化结果。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMUnReadMessageHandler">
            <summary>
            一个委托，它表示IM接收到有未读消息时所调用的方法。
            </summary>
            <param name="sender">事件发送者</param>
            <param name="e">事件数据</param>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMUnReadMessageArgs">
            <summary>
            为 <see cref="T:Smobiler.Plugins.RongIM.IMUnReadMessageHandler" /> 事件提供数据
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMUnReadMessageArgs.UnReadMsgCount">
            <summary>
            获取和设置未读取消息数量。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMViewExitEventHandler">
            <summary>
            一个委托，它IM界面退出时发生
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 IMViewExitEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMViewExitEventArgs">
            <summary>
            为 IMViewExit提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.RongIM.IMViewExitEventArgs.#ctor(Smobiler.Plugins.RongIM.IMView)">
            <summary>
            获取一个 IMViewExitEventArgs 实例
            </summary>
            <param name="IMView">IM退出界面类型</param>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMViewExitEventArgs.IMView">
            <summary>
            IM所退出的界面
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMView">
            <summary>
            IM退出界面类型
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.RongIM.IMView.ConversationView">
            <summary>
            群组/单人聊天界面
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.RongIM.IMView.ChatListView">
            <summary>
            会话列表界面
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.RongIM.IMGroupEntry">
            <summary>
            IM群组实体
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMGroupEntry.GroupID">
            <summary>
            用户ID
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMGroupEntry.GroupName">
            <summary>
            用户名称
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMGroupEntry.PortraitUri">
            <summary>
            用户头像资源路径
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMUserEntry.UserID">
            <summary>
            用户ID
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMUserEntry.UserName">
            <summary>
            用户名称
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Smobiler.Plugins.RongIM.IMUserEntry.PortraitUri">
            <summary>
            用户头像资源路径
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Smobiler.Plugins.ScanBarcodeView">
            <summary>
            条码扫描控件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.ScanBarcodeView.BarcodeDataCaptured">
            <summary>
            在条码扫描后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.ScanBarcodeView.#ctor">
            <summary>
            构建函数
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ScanBarcodeView.FlashLight">
            <summary>
            获取与设置是否开启闪光灯
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.ScanBarcodeView.IntervalTime">
            <summary>
            获取与设置扫描间隔(ms)
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.ScanBarcodeView.ScanStart">
            <summary>
            开启扫描
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.ScanBarcodeView.ScanStop">
            <summary>
            关闭扫描
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.ScanBarcodeViewEventHandler">
            <summary>
            一个委托，它表示在点击后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 CalenderStripChangeEventArgs</param>
            <remarks></remarks>
        </member>
        <member name="T:Smobiler.Plugins.ScanBarcodeViewEventArgs">
            <summary>
            为ScanBarcodeViewEventHandler提供数据 
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.ScanBarcodeViewEventArgs.#ctor(System.String)">
            <summary>
            获取一个 ScanBarcodeViewEventArgs 实例
            </summary>
            <param name="data">扫描数据</param>
        </member>
        <member name="P:Smobiler.Plugins.ScanBarcodeViewEventArgs.Data">
            <summary>
            获取扫描数据。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.SignatureView">
            <summary>
            签字组件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.SignatureView.OnSignatureImageSave">
            <summary>
            在客户端返回签字数据时发生
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SignatureView.#ctor">
            <summary>
            初始化SignatureView类的一个新实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SignatureView.StrokeColor">
            <summary>
            获取与设置线条颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SignatureView.StrokeWidth">
            <summary>
            获取与设置线条粗细
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SignatureView.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SignatureView.Clear">
            <summary>
            清除
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.SupoinScanner">
            <summary>
            条码扫描组件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.SupoinScanner.DataCaptured">
            <summary>
            条码扫描后发生。
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.SupoinScanner.OnNotify">
            <summary>
            在方法调用返回通知时发生。
            </summary>
            <remarks>仅在出现错误时触发</remarks>
        </member>
        <member name="M:Smobiler.Plugins.SupoinScanner.#ctor">
            <summary>
            获取 Scanner 的一个实例
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SupoinScanner.PowerOn">
            <summary>
            使能扫描
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SupoinScanner.PowerOff">
            <summary>
            使不能扫描
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SupoinScanner.Scan">
            <summary>
            扫描条码
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SupoinScanner.OnlyStartScan">
            <summary>
            开启扫描,下次执行扫描前必须执行stopScan,否则无法启动
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SupoinScanner.ScanStop">
            <summary>
            关闭扫描
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SupoinScanner.OnEventRaised(System.Object)">
            <summary>
            处理扫描事件或当前扫描设备状态（原因是由于扫描事件并不通过RPC结果回调，而是通过当前插件的Event。）
            </summary>
            <param name="params"></param>
        </member>
        <member name="M:Smobiler.Plugins.SupoinScanner.OnRPCResult(System.Object,Smobiler.Core.RPC.RPCResultArgs)">
            <summary>
            用于接收RPC调用结果回调（仅在存在错误时）
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Smobiler.Plugins.SupoinBarcodeOnNotifyEventHandler">
            <summary>
            一个委托，它表示在方法调用返回通知时要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 ComponentResultArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.SupoinBarcodeScanEventHandler">
            <summary>
            一个委托，它表示条码扫描后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 SupoinBarcodeScanEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.SupoinBarcodeScanEventArgs">
            <summary>
            为BarcodeScan提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SupoinBarcodeScanEventArgs.#ctor(System.String)">
            <summary>
            获取一个 SupoinBarcodeScanEventArgs 实例
            </summary>
            <param name="data">扫描数据</param>
        </member>
        <member name="P:Smobiler.Plugins.SupoinBarcodeScanEventArgs.Data">
            <summary>
            获取扫描数据。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SupoinBarcodeScanEventArgs.isError">
            <summary>
            获取一个值，该值指示是否在接口调用结果中包含错误信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SupoinBarcodeScanEventArgs.error">
            <summary>
            获取和设置错误信息
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.SwitchSelector">
            <summary>
            选择器控件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.SwitchSelector.OnPress">
            <summary>
            点击后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SwitchSelector.#ctor">
            <summary>
            构建函数
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.Options">
            <summary>
            获取与设置选项内容集合
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.InitialSelectIndex">
            <summary>
            获取与设置起始选择项
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.FontSize">
            <summary>
            获取与设置字体大小
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.SelectedTextColor">
            <summary>
            获取与设置选中字体颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.SelectedItemColor">
            <summary>
            获取与设置选中项颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.UnSelectedTextColor">
            <summary>
            获取与设置未选中字体颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.BackColor">
            <summary>
            获取与设置背景颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.SelectedIndex">
            <summary>
            获取选中项索引
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.SelectedItem">
            <summary>
            获取选中项
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.BorderColor">
            <summary>
            获取与设置控件边框颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.BorderRadius">
            <summary>
            隐藏原边框弧度
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.BorderStyle">
            <summary>
            隐藏原边框样式
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelector.Border">
            <summary>
            隐藏原边框
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SwitchSelector.OnEventRaised(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            处理事件（原因是由于扫描事件并不通过RPC结果回调，而是通过当前插件的Event)
            </summary>
            <param name="params"></param>
        </member>
        <member name="T:Smobiler.Plugins.SwitchSelectorOnPressEventHandler">
            <summary>
            一个委托，它表示点击后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 SwitchSelectorOnPressEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.SwitchSelectorOnPressEventArgs">
            <summary>
            为BarcodeScan提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SwitchSelectorOnPressEventArgs.#ctor(Smobiler.Plugins.SwitchSelectorItem)">
            <summary>
            获取一个 SwitchSelectorOnPressEventArgs 实例
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelectorOnPressEventArgs.Option">
            <summary>
            获取数据。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.SwitchSelectorItem">
            <summary>
            选择组
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelectorItem.Text">
            <summary>
            获取或设置选择组文本
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelectorItem.Value">
            <summary>
            获取或设置选择组值
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelectorItem.ImageResourceID">
            <summary>
            获取或设置选择组image
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelectorItem.ImageResourcePath">
            <summary>
            获取和设置资源存储路径
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelectorItem.ImageResourceMode">
            <summary>
            获取或设置资源模式
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.SwitchSelectorItem.ActiveColor">
            <summary>
            获取或设置选择组选中颜色
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.SwitchSelectorItemCollection">
            <summary>
            选择组集合
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.SwitchSelectorItemCollection.#ctor(Smobiler.Core.Controls.IMobileViewCollectionOwner)">
            <summary>
            初始化SwitchSelectorItemCollection类的一个新实例
            </summary>
            <param name="owner">所有者</param>
        </member>
        <member name="T:Smobiler.Plugins.TextBoxField">
            <summary>
            带特效的输入框控件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.TextBoxField.#ctor">
            <summary>
            构建函数
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.Text">
            <summary>
            获取与设置显示的内容
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.UnderLineColor">
            <summary>
            获取与设置未获得焦点时下划线的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.Dense">
            <summary>
            获取与设置显示的内容字体样式(如果为true，label字体大小不变，如果为false，没有文字时label字体较大，有文字时label字体较小)
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.Duration">
            <summary>
            获取与设置label动态变化的持续时间（毫秒）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.FontSize">
            <summary>
            获取与设置文字的大小
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.Label">
            <summary>
            获取与设置头部表述文字的内容
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.LabelFocusColor">
            <summary>
            获取与设置lable在输入框有焦点时的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.LabelBlurColor">
            <summary>
            获取与设置lable在输入框没有焦点时的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.Multiline">
            <summary>
            获取与设置文字输入是否多行
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.ReturnKeyType">
            <summary>
            获取与设置键盘右下角显示的内容
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.TextBlurColor">
            <summary>
            获取与设置文字未获得焦点时的颜色
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.TextColor">
            <summary>
            获取与设置文字的颜色，如果设置了textBlurColor或者textFocusColor，会覆盖textColor的属性
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.TextBoxField.TextFocusColor">
            <summary>
            获取与设置文字获得焦点时的颜色
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.TTS.TTS">
            <summary>
            文字转语音插件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.TTS.TTS.#ctor">
            <summary>
            获取 TTS 的一个实例
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.TTS.TTS.Speak(System.String,Smobiler.Plugins.TTS.TTSLanguage,System.Single,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            播放
            </summary>
            <param name="text">播放的内容</param>
            <param name="language">播放内容的语言 zh:中文, en:英文</param>
            <param name="rate">播放的语速 范围:0.1-2(1为正常语速)</param>
            <param name="handler">结果回调，可选参数，默认为null</param>
        </member>
        <member name="M:Smobiler.Plugins.TTS.TTS.Stop(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            停止
            </summary>
            <param name="handler">结果回调，可选参数，默认为null</param>
        </member>
        <member name="T:Smobiler.Plugins.TTS.TTSLanguage">
            <summary>
            TTS语言
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.TTS.TTSLanguage.zh">
            <summary>
            中文
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.TTS.TTSLanguage.en">
            <summary>
            英文
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.USBSerial">
            <summary>
            USB串口
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.USBSerial.DataReceived">
            <summary>
            接收后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.USBSerial.#ctor">
            <summary>
            获取一个实例
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.USBSerial.Connect(Smobiler.Plugins.USBSerialDataBits,Smobiler.Plugins.USBSerialStopBits,Smobiler.Plugins.USBSerialParity,System.Int32,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            连接设备
            </summary>
            <param name="dataBits">字节(5:DATABITS_5,5:DATABITS_6,7:DATABITS_7,8:DATABITS_8)</param> 
            <param name="stopBits">停止位(1:STOPBITS_1, 2:STOPBITS_2, 3:STOPBITS_1_5)</param>
            <param name="parity">校验规则(0:PARITY_NONE,1:PARITY_ODD,2:PARITY_EVEN,3:PARITY_MARK,4:PARITY_SPACE)</param>
            <param name="baudRate">传输速率(默认115200)</param>
            <param name="handler">连接后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.USBSerial.Close(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.USBSerial.Write(System.Byte[],Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            写入信息
            </summary>
            <param name="data">内容</param>
            <param name="handler">写入后触发</param>
        </member>
        <member name="M:Smobiler.Plugins.USBSerial.OnRPCResult(System.Object,Smobiler.Core.RPC.RPCResultArgs)">
            <summary>
            用于接收RPC调用结果回调
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Smobiler.Plugins.USBSerial.OnEventRaised(System.Object)">
            <summary>
            处理异步回调
            </summary>
            <param name="params">参数</param>
        </member>
        <member name="T:Smobiler.Plugins.USBSerialDataReceivedEventHandler">
            <summary>
            一个委托，它表示接收后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的<see cref="T:Smobiler.Plugins.USBSerialDataReceivedEventArgs"/></param>
        </member>
        <member name="T:Smobiler.Plugins.USBSerialDataReceivedEventArgs">
            <summary>
            为DataReceived提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.USBSerialDataReceivedEventArgs.#ctor(System.String)">
            <summary>
            获取一个 USBSerialDataReceivedEventArgs 实例
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="P:Smobiler.Plugins.USBSerialDataReceivedEventArgs.Data">
            <summary>
            获取数据。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.USBSerialDataBits">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialDataBits.DATABITS_5">
            <summary>
            DATABITS_5
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialDataBits.DATABITS_6">
            <summary>
            DATABITS_6
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialDataBits.DATABITS_7">
            <summary>
            DATABITS_7
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialDataBits.DATABITS_8">
            <summary>
            DATABITS_8
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.USBSerialStopBits">
            <summary>
            停止位
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialStopBits.STOPBITS_1">
            <summary>
            STOPBITS_1
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialStopBits.STOPBITS_2">
            <summary>
            STOPBITS_2
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialStopBits.STOPBITS_1_5">
            <summary>
            STOPBITS_1_5
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.USBSerialParity">
            <summary>
            校验规则
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialParity.PARITY_NONE">
            <summary>
            PARITY_NONE
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialParity.PARITY_ODD">
            <summary>
            PARITY_ODD
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialParity.PARITY_EVEN">
            <summary>
            PARITY_EVEN
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialParity.PARITY_MARK">
            <summary>
            PARITY_MARK
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.USBSerialParity.PARITY_SPACE">
            <summary>
            PARITY_SPACE
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.VLCPlayer">
            <summary>
            直播控件
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.VLCPlayer.StateChanged">
            <summary>
            视频状态改变后发生。
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.VLCPlayer.#ctor">
            <summary>
            初始化LiveStreamPlayer类的一个新实例
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.VLCPlayer.Url">
            <summary>
            获取和设置媒体源
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.VLCPlayer.OnEventRaised(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            处理视频回调
            </summary>
            <param name="params"></param>
        </member>
        <member name="T:Smobiler.Plugins.VLCPlayerStateChangedEventHandler">
            <summary>
            一个委托，它表示状态改变后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的 VLCPlayerStateChangedEventArgs</param>
        </member>
        <member name="T:Smobiler.Plugins.VLCPlayerStateChangedEventArgs">
            <summary>
            为StateChanged提供数据
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.VLCPlayerStateChangedEventArgs.#ctor(Smobiler.Plugins.LiveStreamState)">
            <summary>
            获取一个 VLCPlayerStateChangedEventArgs 实例
            </summary>
            <param name="state">状态</param>
        </member>
        <member name="P:Smobiler.Plugins.VLCPlayerStateChangedEventArgs.State">
            <summary>
            获取返回的状态。
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.VLCPlayerState">
            <summary>
            视频状态
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.VLCPlayerState.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.VLCPlayerState.Play">
            <summary>
            播放
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.VLCPlayerState.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApi">
            <summary>
            微信组件APi
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.WeiXinApi.Afterlogin">
            <summary>
            登陆后发生。
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.WeiXinApi.AfterMiniPay">
            <summary>
            微信小程序支付后发生。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApi.AppID">
            <summary>
            公众号的唯一标识
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.config(System.Int64,System.String,System.String,Smobiler.Core.Controls.ComponentOnResultHandler,System.Boolean)">
            <summary>
            注入权限验证配置
            </summary>
            <param name="timestamp">生成签名的时间戳</param>
            <param name="nonceStr">生成签名的随机串</param>
            <param name="signature">签名</param>
            <param name="handler">结果回调</param>
            <param name="debug">开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.WeiXinApiGetSignature(System.String,System.String,System.Int64)">
            <summary>
            config时获取签名信息
            </summary>
            <param name="jsapi_ticket">jsapi_ticket</param>
            <param name="noncestr">noncestr</param>
            <param name="timestamp">timestamp</param>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.Sha1(System.String,System.String)">
            <summary>
            Sha1
            </summary>
            <param name="orgStr"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.WeiXinApiCreatenNonce_str">
            <summary>
            创建随机字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.WeiXinApiCreatenTimestamp">
            <summary>
            创建时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.checkJsApi(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            是否支持指定JS接口
            </summary>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.shareToSession(Smobiler.Plugins.WeiXinApiShareEntity,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            分享给好友
            </summary>
            <param name="entity">分享实体</param>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.shareToTimeline(Smobiler.Plugins.WeiXinApiShareEntity,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            分享到朋友圈
            </summary>
            <param name="entity">分享实体</param>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.getLocation(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            获取地理位置
            </summary>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.scanQRCode(Smobiler.Plugins.WeiXinApiScanResultType,Smobiler.Plugins.WeiXinApiScanCodeType,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            微信扫一扫
            </summary>
            <param name="type">扫一扫结果返回方式</param>
            <param name="codetype">扫一扫扫描条码类型(微信暂时只支持IOS修改)</param>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.scanQRCode(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            微信扫一扫
            </summary>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.scanQRCode(Smobiler.Plugins.WeiXinApiScanResultType,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            微信扫一扫
            </summary>
            <param name="type">扫一扫结果返回方式</param>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.login(Smobiler.Plugins.WeiXinApiScopeType)">
            <summary>
            微信登陆
            </summary>
            <param name="scope">登陆授权作用域（小程序中无效）</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.pay(Smobiler.Plugins.WeiXinApiPayEntity,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            支付
            </summary>
            <param name="entity">支付实体</param>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.minipay(Smobiler.Plugins.WeiXinApiPayEntity,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            跳转微信支付界面,只在小程序中有效
            </summary>
            <param name="entity">支付实体</param>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApi.OnEventRaised(System.Object)">
            <summary>
            处理授权状态回调
            </summary>
            <param name="params">参数</param>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiMiniPayEventHandler">
            <summary>
            一个委托，它表示微信小程序支付后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的<see cref="T:Smobiler.Plugins.WeiXinApiMiniPayEventArgs"/></param>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiMiniPayEventArgs">
            <summary>
            为支付后提供数据
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Plugins.WeiXinApiMiniPayEventArgs.#ctor(System.Boolean,System.String)" -->
        <member name="P:Smobiler.Plugins.WeiXinApiMiniPayEventArgs.Success">
            <summary>
            是否支付成功
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniPayEventArgs.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiLoginEventHandler">
            <summary>
            一个委托，它表示登陆后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的<see cref="T:Smobiler.Plugins.WeiXinApiLoginEventArgs"/></param>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiLoginEventArgs">
            <summary>
            为授权提供数据
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Plugins.WeiXinApiLoginEventArgs.#ctor(System.String,System.String,System.String,System.String)" -->
        <member name="M:Smobiler.Plugins.WeiXinApiLoginEventArgs.Create(System.String,Smobiler.Core.ClientVariables)">
            <summary>
            根据当前的Client获取微信登陆信息
            </summary>
            <param name="appId"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiLoginEventArgs.Code">
            <summary>
            获取Code
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiLoginEventArgs.State">
            <summary>
            获取State
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiLoginEventArgs.MiniLoginInfo">
            <summary>
            小程序用户信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiLoginEventArgs.AppID">
            <summary>
            获取AppID
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApiLoginEventArgs.GetAccessToken(System.String)">
            <summary>
            获取授权access_token
            </summary>
            <param name="appSecret"></param>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApiLoginEventArgs.GetUserInfo(System.String)">
            <summary>
            获取用户信息
            </summary>
            <param name="appSecret">公众号的appsecret</param>
            <returns></returns>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiMiniLoginInfo">
            <summary>
            小程序登陆信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniLoginInfo.errcode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniLoginInfo.errmsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniLoginInfo.rawData">
            <summary>
            不包括敏感信息的原始数据字符串，用于计算签名
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniLoginInfo.userInfo">
            <summary>
            用户信息对象，不包含 openid 等敏感信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniLoginInfo.signature">
            <summary>
            使用 sha1( rawData + sessionkey ) 得到字符串，用于校验用户信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniLoginInfo.encryptedData">
            <summary>
            包括敏感数据在内的完整用户信息的加密数据
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniLoginInfo.iv">
            <summary>
            加密算法的初始向量
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApiMiniLoginInfo.GetMiniEncryptUserInfo(System.String,System.String)">
            <summary>
            获取小程序加密用户信息
            </summary>
            <param name="miniAppId">小程序应用编号</param>
            <param name="appSecret">小程序安装密钥</param>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApiMiniLoginInfo.Decrypt(System.String,System.String,System.String)">
            <summary>
            根据微信小程序平台提供的解密算法解密数据
            </summary>
            <param name="encryptedData">加密数据</param>
            <param name="iv">初始向量</param>
            <param name="sessionKey">从服务端获取的SessionKey</param>
            <returns></returns>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiMiniUserInfo">
            <summary>
            小程序用户信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniUserInfo.nickName">
            <summary>
            用户昵称
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniUserInfo.avatarUrl">
             <summary>
            用户头像图片的 URL
             </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniUserInfo.gender">
            <summary>
            用户性别
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniUserInfo.country">
            <summary>
            用户所在国家
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniUserInfo.province">
            <summary>
            用户所在省份
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniUserInfo.city">
            <summary>
            用户所在城市
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniUserInfo.language">
            <summary>
            显示 country，province，city 所用的语言
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiMiniEncryptUserInfo">
            <summary>
            小程序用户加密信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniEncryptUserInfo.errcode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniEncryptUserInfo.errmsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniEncryptUserInfo.openId">
            <summary>
            用户的唯一标识
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiMiniEncryptUserInfo.unionId">
            <summary>
            如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过 UnionID 来区分用户的唯一性
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiUserInfo">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.errcode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.errmsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.openid">
            <summary>
            用户的唯一标识
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.nickname">
            <summary>
            用户昵称
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.sex">
            <summary>
            用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.province">
            <summary>
            用户个人资料填写的省份
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.city">
            <summary>
            普通用户个人资料填写的城市
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.country">
            <summary>
            国家
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.headimgurl">
            <summary>
            用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.privilege">
            <summary>
            用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.unionid">
            <summary>
            只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiUserInfo.AccessToken">
            <summary>
            网页授权access_token信息
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiAccessToken">
            <summary>
            网页授权access_token信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiAccessToken.errcode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiAccessToken.errmsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiAccessToken.openid">
            <summary>
            用户唯一标识，请注意，在未关注公众号时，用户访问公众号的网页，也会产生一个用户和公众号唯一的OpenID
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiAccessToken.expires_in">
            <summary>
            access_token接口调用凭证超时时间，单位（秒）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiAccessToken.refresh_token">
            <summary>
            用户刷新access_token
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiAccessToken.scope">
            <summary>
            用户授权的作用域
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiAccessToken.access_token">
            <summary>
            网页授权接口调用凭证
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApiAccessToken.Refresh">
            <summary>
            由于access_token拥有较短的有效期，当access_token超时后，可以进行刷新，refresh_token有效期为30天
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smobiler.Plugins.WeXinApiCheckJsApiResponseEntity">
            <summary>
            微信结果类
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeXinApiCheckJsApiResponseEntity.shareToSession">
            <summary>
            分享给朋友
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeXinApiCheckJsApiResponseEntity.shareToTimeline">
            <summary>
            分享到朋友圈
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeXinApiCheckJsApiResponseEntity.getLocation">
            <summary>
            获取地理位置
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeXinApiCheckJsApiResponseEntity.scanQRCode">
            <summary>
            微信扫一扫
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeXinApiCheckJsApiResponseEntity.pay">
            <summary>
            微信支付请求
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeXinApiGetLocationResponseEntity">
            <summary>
            微信地理位置结果类
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeXinApiGetLocationResponseEntity.latitude">
            <summary>
            longitude
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeXinApiGetLocationResponseEntity.longitude">
            <summary>
            longitude
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiScanResultType">
            <summary>
            扫一扫返回方式
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinApiScanResultType.WeixinDecode">
            <summary>
            扫描结果由微信处理
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinApiScanResultType.NoDocode">
            <summary>
            直接返回扫描结果
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiScanCodeType">
            <summary>
            扫一扫扫描条码类型
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinApiScanCodeType.All">
            <summary>
            二维码与一维码
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinApiScanCodeType.QrCode">
            <summary>
            二维码
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinApiScanCodeType.BarCode">
            <summary>
            一维码
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiScopeType">
            <summary>
            应用授权作用域类型
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinApiScopeType.snsapi_base">
            <summary>
            不弹出授权页面
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinApiScopeType.snsapi_userinfo">
            <summary>
            弹出授权页面
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiPayEntity">
            <summary>
            支付实体
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiPayEntity.timestamp">
            <summary>
            支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiPayEntity.nonceStr">
            <summary>
            支付签名随机串，不长于 32 位
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiPayEntity.package">
            <summary>
            统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=\*\*\*）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiPayEntity.signType">
            <summary>
            签名方式，默认为'SHA1'，使用新版支付需传入'MD5'
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiPayEntity.paySign">
            <summary>
            支付签名
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinApiShareEntity">
            <summary>
            分享实体
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinApiShareEntity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="title">分享标题</param>
            <param name="desc">分享描述</param>
            <param name="link">分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</param>
            <param name="imgUrl">分享图标</param>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiShareEntity.imgUrl">
            <summary>
            获取和设置分享图标
            </summary>  
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiShareEntity.title">
            <summary>
            获取和设置分享标题
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiShareEntity.desc">
            <summary>
            获取和设置分享描述
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinApiShareEntity.link">
            <summary>
            获取和设置分享链接
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinENTApi">
            <summary>
            企业微信组件Api
            </summary>
        </member>
        <member name="E:Smobiler.Plugins.WeiXinENTApi.Afterlogin">
            <summary>
            登陆后发生。
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApi.AppID">
            <summary>
            公众号的唯一标识
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApi.CorpID">
            <summary>
            企业的CorpID
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinENTApi.config(System.Int64,System.String,System.String,System.String[],Smobiler.Core.Controls.ComponentOnResultHandler,System.Boolean)">
            <summary>
            注入权限验证配置
            </summary>
            <param name="timestamp">生成签名的时间戳</param>
            <param name="nonceStr">生成签名的随机串</param>
            <param name="signature">签名</param>
            <param name="jsApiList">需要使用的JS接口列表</param>
            <param name="handler">结果回调</param>
            <param name="debug">开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinENTApi.agentConfig(System.String,System.Int64,System.String,System.String,Smobiler.Core.Controls.ComponentOnResultHandler,System.Boolean)">
            <summary>
            注入应用的权限,需要先config
            </summary>
            <param name="agentid">企业微信的应用id</param>
            <param name="timestamp">生成签名的时间戳</param>
            <param name="nonceStr">生成签名的随机串</param>
            <param name="signature">签名</param>
            <param name="handler">结果回调</param>
            <param name="debug">开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinENTApi.checkJsApi(System.String[],Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            是否支持指定JS接口
            </summary>
            <param name="jsApiList">需要使用的JS接口列表</param>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinENTApi.login(System.String)">
            <summary>
            微信登陆
            </summary>
            <param name="state">重定向后会带上state参数，企业可以填写a-zA-Z0-9的参数值，长度不可超过128个字节</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinENTApi.invoke(System.String,System.Object,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            invoke调用形式的jsapi
            </summary>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinENTApi.OnEventRaised(System.Object)">
            <summary>
            处理授权状态回调
            </summary>
            <param name="params">参数</param>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinENTApiLoginEventHandler">
            <summary>
            一个委托，它表示登陆后要调用的方法。
            </summary>
            <param name="sender">事件源</param>
            <param name="e">包含事件数据的<see cref="T:Smobiler.Plugins.WeiXinENTApiLoginEventArgs"/></param>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinENTApiLoginEventArgs">
            <summary>
            为授权提供数据
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Plugins.WeiXinENTApiLoginEventArgs.#ctor(System.String,System.String,System.String)" -->
        <member name="M:Smobiler.Plugins.WeiXinENTApiLoginEventArgs.Create(System.String,Smobiler.Core.ClientVariables)">
            <summary>
            根据当前的Client获取微信登陆信息
            </summary>
            <param name="appId"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiLoginEventArgs.Code">
            <summary>
            获取Code
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiLoginEventArgs.State">
            <summary>
            获取State
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiLoginEventArgs.CorpID">
            <summary>
            获取CorpID
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinENTApiLoginEventArgs.GetAccessToken(System.String)">
            <summary>
            获取授权access_token
            </summary>
            <param name="corpsecret"></param>
            <returns></returns>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinENTApiLoginEventArgs.GetUserInfo(System.String)">
            <summary>
            获取用户信息
            </summary>
            <param name="appSecret">公众号的appsecret</param>
            <returns></returns>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinENTApiUserInfo">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiUserInfo.errcode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiUserInfo.errmsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiUserInfo.UserId">
            <summary>
            成员UserID
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiUserInfo.OpenId">
            <summary>
            非企业成员的标识，对当前企业唯一
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiUserInfo.DeviceId">
            <summary>
            手机设备号(由企业微信在安装时随机生成，删除重装会改变，升级不受影响)
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiUserInfo.AccessToken">
            <summary>
            网页授权access_token信息
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinENTApiAccessToken">
            <summary>
            网页授权access_token信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiAccessToken.errcode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiAccessToken.errmsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiAccessToken.expires_in">
            <summary>
            凭证的有效时间（秒）
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinENTApiAccessToken.access_token">
            <summary>
            获取到的凭证，最长为512字节
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXin">
            <summary>
            微信组件
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXin.registerApp(System.String,Smobiler.Core.Controls.ComponentOnResultHandler,System.String)">
            <summary>
            应用注册（只需要注册一次即可）
            </summary>
            <param name="appid">应用编号</param>
            <param name="handler">结果回调</param>
            <param name="universalLink">Universal Links</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXin.shareToTimeline(Smobiler.Plugins.WeiXinShareEntity,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            分享到朋友圈
            </summary>
            <param name="entity">分享实体</param>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXin.shareToSession(Smobiler.Plugins.WeiXinShareEntity,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            分享给好友
            </summary>
            <param name="entity">分享实体</param>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXin.loginWithWeixin(System.String,System.String,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            登陆
            </summary>
            <param name="scope">应用授权作用域，如获取用户个人信息则填写snsapi_userinfo</param>
            <param name="state">用于保持请求和回调的状态，授权请求后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验</param>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXin.pay(Smobiler.Plugins.WeiXinPayEntity,Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            支付
            </summary>
            <param name="entity">支付实体</param>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXin.isWXAppInstalled(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            检测是否安装微信
            </summary>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXin.isWXAppSupportApi(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            检测是否支持微信api
            </summary>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXin.getWXAppInstallUrl(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            获取微信itunes下载地址（ios独有）
            </summary>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXin.getApiVersion(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            获取微信api版本
            </summary>
            <param name="handler">结果回调</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXin.openWXApp(Smobiler.Core.Controls.ComponentOnResultHandler)">
            <summary>
            打开微信
            </summary>
            <param name="handler">结果回调</param>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinPayEntity">
            <summary>
            支付实体
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinPayEntity.partnerId">
            <summary>
            商家向财付通申请的商家id
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinPayEntity.prepayId">
            <summary>
            预支付订单
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinPayEntity.nonceStr">
            <summary>
            随机串，防重发
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinPayEntity.timeStamp">
            <summary>
            时间戳，防重发
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinPayEntity.package">
            <summary>
            商家根据财付通文档填写的数据和签名
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinPayEntity.sign">
            <summary>
            商家根据微信开放平台文档对数据做的签名
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinShareEntity">
            <summary>
            分享实体
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareEntity.#ctor(System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="title">分享标题</param>
            <param name="description">分享内容</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareEntity.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="title">分享标题</param>
            <param name="description">分享内容</param>
            <param name="thumbImage">分享缩微图</param>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareEntity.type">
            <summary>
            获取分享类型
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareEntity.thumbImage">
            <summary>
            获取和设置分享缩微图
            </summary>  
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareEntity.title">
            <summary>
            获取和设置分享标题
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareEntity.description">
            <summary>
            获取和设置分享内容
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinShareNewsEntity">
            <summary>
            链接分享实体
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareNewsEntity.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="title">分享标题</param>
            <param name="desciption">分享内容</param>
            <param name="webpageUrl">分享链接</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareNewsEntity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="title">分享标题</param>
            <param name="desciption">分享内容</param>
            <param name="webpageUrl">分享链接</param>
            <param name="thumbImage">分享缩微图</param>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareNewsEntity.type">
            <summary>
            获取分享类型
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareNewsEntity.webpageUrl">
            <summary>
            获取和设置链接地址
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinShareTextEntity">
            <summary>
            文本分享实体
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareTextEntity.#ctor(System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="title">分享标题</param>
            <param name="desciption">分享内容</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareTextEntity.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="title">分享标题</param>
            <param name="desciption">分享内容</param>
            <param name="thumbImage">分享缩微图</param>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareTextEntity.type">
            <summary>
            获取分享内容
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinShareImageEntity">
            <summary>
            图片分享实体
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareImageEntity.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="title">分享标题</param>
            <param name="desciption">分享内容</param>
            <param name="imageUrl">分享图片链接地址</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareImageEntity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="title">分享标题</param>
            <param name="desciption">分享内容</param>
            <param name="imageUrl">分享图片链接地址</param>
            <param name="thumbImage">分享缩微图</param>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareImageEntity.type">
            <summary>
            获取分享类型
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareImageEntity.imageUrl">
            <summary>
            图片链接地址
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinShareAudioEntity">
            <summary>
            音频分享实体
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareAudioEntity.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="title">分享标题</param>
            <param name="desciption">分享内容</param>
            <param name="musicUrl">分享音频链接地址</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareAudioEntity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="title">分享标题</param>
            <param name="desciption">分享内容</param>
            <param name="musicUrl">分享音频链接地址</param>
            <param name="thumbImage">分享缩微图</param>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareAudioEntity.type">
            <summary>
            获取分享类型
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareAudioEntity.musicUrl">
            <summary>
            获取和设置音频分享实体
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinShareVideoEntity">
            <summary>
            视频分享实体
            </summary>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareVideoEntity.#ctor(System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="title">分享标题</param>
            <param name="desciption">分享内容</param>
            <param name="videoUrl">分享视频地址</param>
        </member>
        <member name="M:Smobiler.Plugins.WeiXinShareVideoEntity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="title">分享标题</param>
            <param name="desciption">分享内容</param>
            <param name="videoUrl">分享视频地址</param>
            <param name="thumbImage">分享缩微图</param>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareVideoEntity.type">
            <summary>
            获取分享类型
            </summary>
        </member>
        <member name="P:Smobiler.Plugins.WeiXinShareVideoEntity.videoUrl">
            <summary>
            获取和设置视频链接地址
            </summary>
        </member>
        <member name="T:Smobiler.Plugins.WeiXinShareType">
            <summary>
            微信分享类型
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinShareType.news">
            <summary>
            新闻
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinShareType.text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinShareType.imageUrl">
            <summary>
            外链图片
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinShareType.video">
            <summary>
            视频
            </summary>
        </member>
        <member name="F:Smobiler.Plugins.WeiXinShareType.audio">
            <summary>
            音频
            </summary>
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.messages.CmdMsgMessage">
            
             通用命令通知消息。此类型消息没有 Push 通知。此类型消息没有 Push 通知，与通用命令通知消息的区别是不存储、不计数。
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.CmdMsgMessage.getName">
             获取命令名称，可以自行定义
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.CmdMsgMessage.setName(System.String)">
             设置命令名称，可以自行定义
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.CmdMsgMessage.getData">
             获取命令的内容
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.CmdMsgMessage.setData(System.String)">
             设置命令的内容
            
             @return
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.messages.CmdNtfMessage">
            
             通用命令通知消息。此类型消息没有 Push 通知。
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.CmdNtfMessage.getName">
             获取命令名称，可以自行定义
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.CmdNtfMessage.setName(System.String)">
             设置命令名称，可以自行定义
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.CmdNtfMessage.getData">
             获取命令的内容
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.CmdNtfMessage.setData(System.String)">
             设置命令的内容
            
             @return
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.messages.ContactNtfMessage">
            
             添加联系人消息。
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ContactNtfMessage.getOperation">
             获取操作名。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ContactNtfMessage.setOperation(System.String)">
             设置操作名。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ContactNtfMessage.getExtra">
             获取为附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ContactNtfMessage.setExtra(System.String)">
             设置为附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ContactNtfMessage.getSourceUserId">
             获取请求者或者响应者的 UserId。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ContactNtfMessage.setSourceUserId(System.String)">
             设置请求者或者响应者的 UserId。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ContactNtfMessage.getTargetUserId">
             获取被请求者或者被响应者的 UserId。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ContactNtfMessage.setTargetUserId(System.String)">
             设置被请求者或者被响应者的 UserId。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ContactNtfMessage.getMessage">
             获取请求或者响应消息。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ContactNtfMessage.setMessage(System.String)">
             设置请求或者响应消息。
            
             @return
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.messages.CustomTxtMessage">
            
             自定义消息
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.CustomTxtMessage.getContent">
             获取自定义消息内容。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.CustomTxtMessage.setContent(System.String)">
             设置自定义消息内容。
            
             @return
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.messages.ImgMessage">
            
             图片消息。
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgMessage.getContent">
             获取表示图片缩略图，格式为 JPG，大小不超过 30k，注意在 Base64 进行 Encode 后需要将所有 \r\n 和 \r 和 \n 替换成空。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgMessage.setContent(System.String)">
             设置表示图片缩略图，格式为 JPG，大小不超过 30k，注意在 Base64 进行 Encode 后需要将所有 \r\n 和 \r 和 \n 替换成空。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgMessage.getExtra">
             获取为附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgMessage.setExtra(System.String)">
             设置为附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgMessage.getImageUri">
             获取图片 Url。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgMessage.setImageUri(System.String)">
             设置图片 Url。
            
             @return
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.messages.ImgTextMessage">
            
             图文消息。
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgTextMessage.getContent">
             获取消息文本内容。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgTextMessage.setContent(System.String)">
             设置消息文本内容。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgTextMessage.getExtra">
             获取附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgTextMessage.setExtra(System.String)">
             设置附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgTextMessage.getTitle">
             获取消息标题。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgTextMessage.setTitle(System.String)">
             设置消息标题。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgTextMessage.getImageUri">
             获取图片地址。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgTextMessage.setImageUri(System.String)">
             设置图片地址。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgTextMessage.getUrl">
             获取 url 跳转地址。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ImgTextMessage.setUrl(System.String)">
             设置 url 跳转地址。
            
             @return
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.messages.InfoNtfMessage">
            
             提示条（小灰条）通知消息。此类型消息没有 Push 通知。
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.InfoNtfMessage.getMessage">
             获取提示条消息内容。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.InfoNtfMessage.setMessage(System.String)">
             设置提示条消息内容。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.InfoNtfMessage.getExtra">
             获取附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.InfoNtfMessage.setExtra(System.String)">
             设置附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @return
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.messages.LBSMessage">
            
             位置消息。
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.LBSMessage.getContent">
            		 * 获取位置图片缩略图，格式为 JPG，以 Base64 进行 Encode 后需要将所有 \r\n 和 \r 和 \
             替换成空。
            		 *
            		 * @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.LBSMessage.setContent(System.String)">
            		 * 设置位置图片缩略图，格式为 JPG，以 Base64 进行 Encode 后需要将所有 \r\n 和 \r 和 \
             替换成空。
            		 *
            		 * @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.LBSMessage.getExtra">
             获取为附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.LBSMessage.setExtra(System.String)">
             设置为附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.LBSMessage.getLatitude">
             获取纬度。
            
             @returndouble
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.LBSMessage.setLatitude(System.Double)">
             设置纬度。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.LBSMessage.getLongitude">
             获取经度。
            
             @returndouble
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.LBSMessage.setLongitude(System.Double)">
             设置经度。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.LBSMessage.getPoi">
             获取位置信息。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.LBSMessage.setPoi(System.String)">
             设置位置信息。
            
             @return
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.messages.ProfileNtfMessage">
            
             资料通知消息。此类型消息没有 Push 通知。
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ProfileNtfMessage.getOperation">
             获取为资料通知操作，可以自行定义。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ProfileNtfMessage.setOperation(System.String)">
             设置为资料通知操作，可以自行定义。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ProfileNtfMessage.getData">
             获取操作的数据。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ProfileNtfMessage.setData(System.String)">
             设置操作的数据。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ProfileNtfMessage.getExtra">
             获取附加内容(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.ProfileNtfMessage.setExtra(System.String)">
             设置附加内容(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @return
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.messages.TxtMessage">
            
             文本消息。
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.TxtMessage.getContent">
             获取消息内容。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.TxtMessage.setContent(System.String)">
             设置消息内容。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.TxtMessage.getExtra">
             获取附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.TxtMessage.setExtra(System.String)">
             设置附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @return
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.messages.VoiceMessage">
            
             语音消息。
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.VoiceMessage.getContent">
             获取表示语音内容，格式为 AMR，以 Base64 进行 Encode 后需要将所有 \r\n 和 \r 和 \n 替换成空，大小不超过 60k，duration 表示语音长度，最长为 60 秒。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.VoiceMessage.setContent(System.String)">
             设置表示语音内容，格式为 AMR，以 Base64 进行 Encode 后需要将所有 \r\n 和 \r 和 \n 替换成空，大小不超过 60k，duration 表示语音长度，最长为 60 秒。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.VoiceMessage.getExtra">
             获取为附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @returnString
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.VoiceMessage.setExtra(System.String)">
             设置为附加信息(如果开发者自己需要，可以自己在 App 端进行解析)。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.VoiceMessage.getDuration">
             获取持续时间。
            
             @returnlong
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.messages.VoiceMessage.setDuration(System.Int64)">
             设置持续时间。
            
             @return
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.create(Smobiler.Core.Controls.RongIM.IO.models.ChatRoomInfo[])">
            	 	 * 创建聊天室方法 
            	 	 * 
            	 	 * @param  chatRoomInfo:id:要创建的聊天室的id；name:要创建的聊天室的name。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.join(System.String[],System.String)">
            	 	 * 加入聊天室方法 
            	 	 * 
            	 	 * @param  userId:要加入聊天室的用户 Id，可提交多个，最多不超过 50 个。（必传）
            	 	 * @param  chatroomId:要加入的聊天室 Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.query(System.String[])">
            	 	 * 查询聊天室信息方法 
            	 	 * 
            	 	 * @param  chatroomId:要查询的聊天室id（必传）
            		 *
            	 	 * @return ChatroomQueryReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.queryUser(System.String,System.String,System.String)">
            	 	 * 查询聊天室内用户方法 
            	 	 * 
            	 	 * @param  chatroomId:要查询的聊天室 ID。（必传）
            	 	 * @param  count:要获取的聊天室成员数，上限为 500 ，超过 500 时最多返回 500 个成员。（必传）
            	 	 * @param  order:加入聊天室的先后顺序， 1 为加入时间正序， 2 为加入时间倒序。（必传）
            		 *
            	 	 * @return ChatroomUserQueryReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.stopDistributionMessage(System.String)">
            	 	 * 聊天室消息停止分发方法（可实现控制对聊天室中消息是否进行分发，停止分发后聊天室中用户发送的消息，融云服务端不会再将消息发送给聊天室中其他用户。） 
            	 	 * 
            	 	 * @param  chatroomId:聊天室 Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.resumeDistributionMessage(System.String)">
            	 	 * 聊天室消息恢复分发方法 
            	 	 * 
            	 	 * @param  chatroomId:聊天室 Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.addGagUser(System.String,System.String,System.String)">
            	 	 * 添加禁言聊天室成员方法（在 App 中如果不想让某一用户在聊天室中发言时，可将此用户在聊天室中禁言，被禁言用户可以接收查看聊天室中用户聊天信息，但不能发送消息.） 
            	 	 * 
            	 	 * @param  userId:用户 Id。（必传）
            	 	 * @param  chatroomId:聊天室 Id。（必传）
            	 	 * @param  minute:禁言时长，以分钟为单位，最大值为43200分钟。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.ListGagUser(System.String)">
            	 	 * 查询被禁言聊天室成员方法 
            	 	 * 
            	 	 * @param  chatroomId:聊天室 Id。（必传）
            		 *
            	 	 * @return ListGagChatroomUserReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.rollbackGagUser(System.String,System.String)">
            	 	 * 移除禁言聊天室成员方法 
            	 	 * 
            	 	 * @param  userId:用户 Id。（必传）
            	 	 * @param  chatroomId:聊天室Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.addBlockUser(System.String,System.String,System.String)">
            	 	 * 添加封禁聊天室成员方法 
            	 	 * 
            	 	 * @param  userId:用户 Id。（必传）
            	 	 * @param  chatroomId:聊天室 Id。（必传）
            	 	 * @param  minute:封禁时长，以分钟为单位，最大值为43200分钟。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.getListBlockUser(System.String)">
            	 	 * 查询被封禁聊天室成员方法 
            	 	 * 
            	 	 * @param  chatroomId:聊天室 Id。（必传）
            		 *
            	 	 * @return ListBlockChatroomUserReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.rollbackBlockUser(System.String,System.String)">
            	 	 * 移除封禁聊天室成员方法 
            	 	 * 
            	 	 * @param  userId:用户 Id。（必传）
            	 	 * @param  chatroomId:聊天室 Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.destroy(System.String[])">
            	 	 * 销毁聊天室方法 
            	 	 * 
            	 	 * @param  chatroomId:要销毁的聊天室 Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.addPriority(System.String[])">
            	 	 * 添加聊天室消息优先级方法 
            	 	 * 
            	 	 * @param  objectName:低优先级的消息类型，每次最多提交 5 个，设置的消息类型最多不超过 20 个。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Chatroom.addWhiteListUser(System.String,System.String[])">
            	 	 * 添加聊天室白名单成员方法 
            	 	 * 
            	 	 * @param  chatroomId:聊天室中用户 Id，可提交多个，聊天室中白名单用户最多不超过 5 个。（必传）
            	 	 * @param  userId:聊天室 Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Group.create(System.String[],System.String,System.String)">
            	 	 * 创建群组方法（创建群组，并将用户加入该群组，用户将可以收到该群的消息，同一用户最多可加入 500 个群，每个群最大至 3000 人，App 内的群组数量没有限制.注：其实本方法是加入群组方法 /group/join 的别名。） 
            	 	 * 
            	 	 * @param  userId:要加入群的用户 Id。（必传）
            	 	 * @param  groupId:创建群组 Id。（必传）
            	 	 * @param  groupName:群组 Id 对应的名称。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Group.create(System.String[],System.String,System.String,System.String)">
             创建群组方法（创建群组，并将用户加入该群组，用户将可以收到该群的消息，同一用户最多可加入 500 个群，每个群最大至 3000 人，App 内的群组数量没有限制.注：其实本方法是加入群组方法 /group/join 的别名。） 
             
             @param  userId:要加入群的用户 Id。（必传）
             @param  groupId:创建群组 Id。（必传）
             @param  groupName:群组 Id 对应的名称。（必传）
             @param  portraitUri:群组 Id 对应的头像。（必传）
            
             @return CodeSuccessReslut
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Group.sync(System.String,Smobiler.Core.Controls.RongIM.IO.models.GroupInfo[])">
            	 	 * 同步用户所属群组方法（当第一次连接融云服务器时，需要向融云服务器提交 userId 对应的用户当前所加入的所有群组，此接口主要为防止应用中用户群信息同融云已知的用户所属群信息不同步。） 
            	 	 * 
            	 	 * @param  userId:被同步群信息的用户 Id。（必传）
            	 	 * @param  groupInfo:该用户的群信息，如群 Id 已经存在，则不会刷新对应群组名称，如果想刷新群组名称请调用刷新群组信息方法。
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Group.refresh(System.String,System.String)">
            	 	 * 刷新群组信息方法 
            	 	 * 
            	 	 * @param  groupId:群组 Id。（必传）
            	 	 * @param  groupName:群名称。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Group.join(System.String[],System.String,System.String)">
            	 	 * 将用户加入指定群组，用户将可以收到该群的消息，同一用户最多可加入 500 个群，每个群最大至 3000 人。 
            	 	 * 
            	 	 * @param  userId:要加入群的用户 Id，可提交多个，最多不超过 1000 个。（必传）
            	 	 * @param  groupId:要加入的群 Id。（必传）
            	 	 * @param  groupName:要加入的群 Id 对应的名称。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Group.queryUser(System.String)">
            	 	 * 查询群成员方法 
            	 	 * 
            	 	 * @param  groupId:群组Id。（必传）
            		 *
            	 	 * @return GroupUserQueryReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Group.quit(System.String[],System.String)">
            	 	 * 退出群组方法（将用户从群中移除，不再接收该群组的消息.） 
            	 	 * 
            	 	 * @param  userId:要退出群的用户 Id.（必传）
            	 	 * @param  groupId:要退出的群 Id.（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Group.addGagUser(System.String,System.String,System.String)">
            	 	 * 添加禁言群成员方法（在 App 中如果不想让某一用户在群中发言时，可将此用户在群组中禁言，被禁言用户可以接收查看群组中用户聊天信息，但不能发送消息。） 
            	 	 * 
            	 	 * @param  userId:用户 Id。（必传）
            	 	 * @param  groupId:群组 Id。（必传）
            	 	 * @param  minute:禁言时长，以分钟为单位，最大值为43200分钟。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Group.lisGagUser(System.String)">
            	 	 * 查询被禁言群成员方法 
            	 	 * 
            	 	 * @param  groupId:群组Id。（必传）
            		 *
            	 	 * @return ListGagGroupUserReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Group.rollBackGagUser(System.String[],System.String)">
            	 	 * 移除禁言群成员方法 
            	 	 * 
            	 	 * @param  userId:用户Id。支持同时移除多个群成员（必传）
            	 	 * @param  groupId:群组Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Group.dismiss(System.String,System.String)">
            	 	 * 解散群组方法。（将该群解散，所有用户都无法再接收该群的消息。） 
            	 	 * 
            	 	 * @param  userId:操作解散群的用户 Id。（必传）
            	 	 * @param  groupId:要解散的群 Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Message.publishPrivate(System.String,System.String[],Smobiler.Core.Controls.RongIM.IO.messages.VoiceMessage,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            	 	 * 发送单聊消息方法（一个用户向另外一个用户发送消息，单条消息最大 128k。每分钟最多发送 6000 条信息，每次发送用户上限为 1000 人，如：一次发送 1000 人时，示为 1000 条消息。） 
            	 	 * 
            	 	 * @param  fromUserId:发送人用户 Id。（必传）
            	 	 * @param  toUserId:接收用户 Id，可以实现向多人发送消息，每次上限为 1000 人。（必传）
            	 	 * @param  voiceMessage:消息。
            	 	 * @param  pushContent:定义显示的 Push 内容，如果 objectName 为融云内置消息类型时，则发送后用户一定会收到 Push 信息。如果为自定义消息，则 pushContent 为自定义消息显示的 Push 内容，如果不传则用户不会收到 Push 通知。（可选）
            	 	 * @param  pushData:针对 iOS 平台为 Push 通知时附加到 payload 中，Android 客户端收到推送消息时对应字段名为 pushData。（可选）
            	 	 * @param  count:针对 iOS 平台，Push 时用来控制未读消息显示数，只有在 toUserId 为一个用户 Id 的时候有效。（可选）
            	 	 * @param  verifyBlacklist:是否过滤发送人黑名单列表，0 表示为不过滤、 1 表示为过滤，默认为 0 不过滤。（可选）
            	 	 * @param  isPersisted:当前版本有新的自定义消息，而老版本没有该自定义消息时，老版本客户端收到消息后是否进行存储，0 表示为不存储、 1 表示为存储，默认为 1 存储消息。（可选）
            	 	 * @param  isCounted:当前版本有新的自定义消息，而老版本没有该自定义消息时，老版本客户端收到消息后是否进行未读消息计数，0 表示为不计数、 1 表示为计数，默认为 1 计数，未读消息数增加 1。（可选）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Message.publishTemplate(Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage)">
            	 	 * 发送单聊模板消息方法（一个用户向多个用户发送不同消息内容，单条消息最大 128k。每分钟最多发送 6000 条信息，每次发送用户上限为 1000 人。） 
            	 	 * 
            	 	 * @param  templateMessage:单聊模版消息。
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Message.PublishSystem(System.String,System.String[],Smobiler.Core.Controls.RongIM.IO.messages.TxtMessage,System.String,System.String,System.Int32,System.Int32)">
            	 	 * 发送系统消息方法（一个用户向一个或多个用户发送系统消息，单条消息最大 128k，会话类型为 SYSTEM。每秒钟最多发送 100 条消息，每次最多同时向 100 人发送，如：一次发送 100 人时，示为 100 条消息。） 
            	 	 * 
            	 	 * @param  fromUserId:发送人用户 Id。（必传）
            	 	 * @param  toUserId:接收用户 Id，提供多个本参数可以实现向多人发送消息，上限为 1000 人。（必传）
            	 	 * @param  txtMessage:发送消息内容（必传）
            	 	 * @param  pushContent:如果为自定义消息，定义显示的 Push 内容，内容中定义标识通过 values 中设置的标识位内容进行替换.如消息类型为自定义不需要 Push 通知，则对应数组传空值即可。（可选）
            	 	 * @param  pushData:针对 iOS 平台为 Push 通知时附加到 payload 中，Android 客户端收到推送消息时对应字段名为 pushData。如不需要 Push 功能对应数组传空值即可。（可选）
            	 	 * @param  isPersisted:当前版本有新的自定义消息，而老版本没有该自定义消息时，老版本客户端收到消息后是否进行存储，0 表示为不存储、 1 表示为存储，默认为 1 存储消息。（可选）
            	 	 * @param  isCounted:当前版本有新的自定义消息，而老版本没有该自定义消息时，老版本客户端收到消息后是否进行未读消息计数，0 表示为不计数、 1 表示为计数，默认为 1 计数，未读消息数增加 1。（可选）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Message.publishSystemTemplate(Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage)">
            	 	 * 发送系统模板消息方法（一个用户向一个或多个用户发送系统消息，单条消息最大 128k，会话类型为 SYSTEM.每秒钟最多发送 100 条消息，每次最多同时向 100 人发送，如：一次发送 100 人时，示为 100 条消息。） 
            	 	 * 
            	 	 * @param  templateMessage:系统模版消息。
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Message.publishGroup(System.String,System.String[],Smobiler.Core.Controls.RongIM.IO.messages.TxtMessage,System.String,System.String,System.Int32,System.Int32)">
            	 	 * 发送群组消息方法（以一个用户身份向群组发送消息，单条消息最大 128k.每秒钟最多发送 20 条消息，每次最多向 3 个群组发送，如：一次向 3 个群组发送消息，示为 3 条消息。） 
            	 	 * 
            	 	 * @param  fromUserId:发送人用户 Id 。（必传）
            	 	 * @param  toGroupId:接收群Id，提供多个本参数可以实现向多群发送消息，最多不超过 3 个群组。（必传）
            	 	 * @param  txtMessage:发送消息内容（必传）
            	 	 * @param  pushContent:定义显示的 Push 内容，如果 objectName 为融云内置消息类型时，则发送后用户一定会收到 Push 信息. 如果为自定义消息，则 pushContent 为自定义消息显示的 Push 内容，如果不传则用户不会收到 Push 通知。（可选）
            	 	 * @param  pushData:针对 iOS 平台为 Push 通知时附加到 payload 中，Android 客户端收到推送消息时对应字段名为 pushData。（可选）
            	 	 * @param  isPersisted:当前版本有新的自定义消息，而老版本没有该自定义消息时，老版本客户端收到消息后是否进行存储，0 表示为不存储、 1 表示为存储，默认为 1 存储消息。（可选）
            	 	 * @param  isCounted:当前版本有新的自定义消息，而老版本没有该自定义消息时，老版本客户端收到消息后是否进行未读消息计数，0 表示为不计数、 1 表示为计数，默认为 1 计数，未读消息数增加 1。（可选）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Message.publishDiscussion(System.String,System.String,Smobiler.Core.Controls.RongIM.IO.messages.TxtMessage,System.String,System.String,System.Int32,System.Int32)">
            	 	 * 发送讨论组消息方法（以一个用户身份向讨论组发送消息，单条消息最大 128k，每秒钟最多发送 20 条消息.） 
            	 	 * 
            	 	 * @param  fromUserId:发送人用户 Id。（必传）
            	 	 * @param  toDiscussionId:接收讨论组 Id。（必传）
            	 	 * @param  txtMessage:发送消息内容（必传）
            	 	 * @param  pushContent:定义显示的 Push 内容，如果 objectName 为融云内置消息类型时，则发送后用户一定会收到 Push 信息. 如果为自定义消息，则 pushContent 为自定义消息显示的 Push 内容，如果不传则用户不会收到 Push 通知。（可选）
            	 	 * @param  pushData:针对 iOS 平台为 Push 通知时附加到 payload 中，Android 客户端收到推送消息时对应字段名为 pushData.（可选）
            	 	 * @param  isPersisted:当前版本有新的自定义消息，而老版本没有该自定义消息时，老版本客户端收到消息后是否进行存储，0 表示为不存储、 1 表示为存储，默认为 1 存储消息.（可选）
            	 	 * @param  isCounted:当前版本有新的自定义消息，而老版本没有该自定义消息时，老版本客户端收到消息后是否进行未读消息计数，0 表示为不计数、 1 表示为计数，默认为 1 计数，未读消息数增加 1。（可选）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Message.publishChatroom(System.String,System.String[],Smobiler.Core.Controls.RongIM.IO.messages.TxtMessage)">
            	 	 * 发送聊天室消息方法（一个用户向聊天室发送消息，单条消息最大 128k。每秒钟限 100 次。） 
            	 	 * 
            	 	 * @param  fromUserId:发送人用户 Id。（必传）
            	 	 * @param  toChatroomId:接收聊天室Id，提供多个本参数可以实现向多个聊天室发送消息。（必传）
            	 	 * @param  txtMessage:发送消息内容（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Message.broadcast(System.String,Smobiler.Core.Controls.RongIM.IO.messages.TxtMessage,System.String,System.String,System.String)">
            	 	 * 发送广播消息方法（发送消息给一个应用下的所有注册用户，如用户未在线会对满足条件（绑定手机终端）的用户发送 Push 信息，单条消息最大 128k，会话类型为 SYSTEM。每小时只能发送 1 次，每天最多发送 3 次。） 
            	 	 * 
            	 	 * @param  fromUserId:发送人用户 Id。（必传）
            	 	 * @param  txtMessage:文本消息。
            	 	 * @param  pushContent:定义显示的 Push 内容，如果 objectName 为融云内置消息类型时，则发送后用户一定会收到 Push 信息. 如果为自定义消息，则 pushContent 为自定义消息显示的 Push 内容，如果不传则用户不会收到 Push 通知.（可选）
            	 	 * @param  pushData:针对 iOS 平台为 Push 通知时附加到 payload 中，Android 客户端收到推送消息时对应字段名为 pushData。（可选）
            	 	 * @param  os:针对操作系统发送 Push，值为 iOS 表示对 iOS 手机用户发送 Push ,为 Android 时表示对 Android 手机用户发送 Push ，如对所有用户发送 Push 信息，则不需要传 os 参数。（可选）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Message.getHistory(System.String)">
            	 	 * 消息历史记录下载地址获取 方法消息历史记录下载地址获取方法。获取 APP 内指定某天某小时内的所有会话消息记录的下载地址。（目前支持二人会话、讨论组、群组、聊天室、客服、系统通知消息历史记录下载） 
            	 	 * 
            	 	 * @param  date:指定北京时间某天某小时，格式为2014010101,表示：2014年1月1日凌晨1点。（必传）
            		 *
            	 	 * @return HistoryMessageReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Message.deleteMessage(System.String)">
            	 	 * 消息历史记录删除方法（删除 APP 内指定某天某小时内的所有会话消息记录。调用该接口返回成功后，date参数指定的某小时的消息记录文件将在随后的5-10分钟内被永久删除。） 
            	 	 * 
            	 	 * @param  date:指定北京时间某天某小时，格式为2014010101,表示：2014年1月1日凌晨1点。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Push.setUserPushTag(Smobiler.Core.Controls.RongIM.IO.models.UserTag)">
            	 	 * 添加 Push 标签方法 
            	 	 * 
            	 	 * @param  userTag:用户标签。
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Push.broadcastPush(Smobiler.Core.Controls.RongIM.IO.models.PushMessage)">
            	 	 * 广播消息方法（fromuserid 和 message为null即为不落地的push） 
            	 	 * 
            	 	 * @param  pushMessage:json数据
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.SMS.getImageCode(System.String)">
            	 	 * 获取图片验证码方法 
            	 	 * 
            	 	 * @param  appKey:应用Id
            		 *
            	 	 * @return SMSImageCodeReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.SMS.sendCode(System.String,System.String,System.String,System.String,System.String)">
            	 	 * 发送短信验证码方法。 
            	 	 * 
            	 	 * @param  mobile:接收短信验证码的目标手机号，每分钟同一手机号只能发送一次短信验证码，同一手机号 1 小时内最多发送 3 次。（必传）
            	 	 * @param  templateId:短信模板 Id，在开发者后台->短信服务->服务设置->短信模版中获取。（必传）
            	 	 * @param  region:手机号码所属国家区号，目前只支持中图区号 86）
            	 	 * @param  verifyId:图片验证标识 Id ，开启图片验证功能后此参数必传，否则可以不传。在获取图片验证码方法返回值中获取。
            	 	 * @param  verifyCode:图片验证码，开启图片验证功能后此参数必传，否则可以不传。
            		 *
            	 	 * @return SMSSendCodeReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.SMS.verifyCode(System.String,System.String)">
            	 	 * 验证码验证方法 
            	 	 * 
            	 	 * @param  sessionId:短信验证码唯一标识，在发送短信验证码方法，返回值中获取。（必传）
            	 	 * @param  code:短信验证码内容。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.User.getToken(System.String,System.String,System.String)">
            	 	 * 获取 Token 方法 
            	 	 * 
            	 	 * @param  userId:用户 Id，最大长度 64 字节.是用户在 App 中的唯一标识码，必须保证在同一个 App 内不重复，重复的用户 Id 将被当作是同一用户。（必传）
            	 	 * @param  name:用户名称，最大长度 128 字节.用来在 Push 推送时显示用户的名称.用户名称，最大长度 128 字节.用来在 Push 推送时显示用户的名称。（必传）
            	 	 * @param  portraitUri:用户头像 URI，最大长度 1024 字节.用来在 Push 推送时显示用户的头像。（必传）
            		 *
            	 	 * @return TokenReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.User.refresh(System.String,System.String,System.String)">
            	 	 * 刷新用户信息方法 
            	 	 * 
            	 	 * @param  userId:用户 Id，最大长度 64 字节.是用户在 App 中的唯一标识码，必须保证在同一个 App 内不重复，重复的用户 Id 将被当作是同一用户。（必传）
            	 	 * @param  name:用户名称，最大长度 128 字节。用来在 Push 推送时，显示用户的名称，刷新用户名称后 5 分钟内生效。（可选，提供即刷新，不提供忽略）
            	 	 * @param  portraitUri:用户头像 URI，最大长度 1024 字节。用来在 Push 推送时显示。（可选，提供即刷新，不提供忽略）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.User.checkOnline(System.String)">
            	 	 * 检查用户在线状态 方法 
            	 	 * 
            	 	 * @param  userId:用户 Id，最大长度 64 字节。是用户在 App 中的唯一标识码，必须保证在同一个 App 内不重复，重复的用户 Id 将被当作是同一用户。（必传）
            		 *
            	 	 * @return CheckOnlineReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.User.block(System.String,System.Int32)">
            	 	 * 封禁用户方法（每秒钟限 100 次） 
            	 	 * 
            	 	 * @param  userId:用户 Id。（必传）
            	 	 * @param  minute:封禁时长,单位为分钟，最大值为43200分钟。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.User.unBlock(System.String)">
            	 	 * 解除用户封禁方法（每秒钟限 100 次） 
            	 	 * 
            	 	 * @param  userId:用户 Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.User.queryBlock">
            	 	 * 获取被封禁用户方法（每秒钟限 100 次） 
            	 	 * 
            		 *
            	 	 * @return QueryBlockUserReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.User.addBlacklist(System.String,System.String)">
            	 	 * 添加用户到黑名单方法（每秒钟限 100 次） 
            	 	 * 
            	 	 * @param  userId:用户 Id。（必传）
            	 	 * @param  blackUserId:被加到黑名单的用户Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.User.queryBlacklist(System.String)">
            	 	 * 获取某用户的黑名单列表方法（每秒钟限 100 次） 
            	 	 * 
            	 	 * @param  userId:用户 Id。（必传）
            		 *
            	 	 * @return QueryBlacklistUserReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.User.removeBlacklist(System.String,System.String)">
            	 	 * 从黑名单中移除用户方法（每秒钟限 100 次） 
            	 	 * 
            	 	 * @param  userId:用户 Id。（必传）
            	 	 * @param  blackUserId:被移除的用户Id。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Wordfilter.add(System.String)">
            	 	 * 添加敏感词方法（设置敏感词后，App 中用户不会收到含有敏感词的消息内容，默认最多设置 50 个敏感词。） 
            	 	 * 
            	 	 * @param  word:敏感词，最长不超过 32 个字符。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Wordfilter.getList">
            	 	 * 查询敏感词列表方法 
            	 	 * 
            		 *
            	 	 * @return ListWordfilterReslut
            	 	 *
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.methods.Wordfilter.delete(System.String)">
            	 	 * 移除敏感词方法（从敏感词列表中，移除某一敏感词。） 
            	 	 * 
            	 	 * @param  word:敏感词，最长不超过 32 个字符。（必传）
            		 *
            	 	 * @return CodeSuccessReslut
            	 	 *
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.BlockChatRoomUser">
            聊天室被封禁用户信息。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.BlockChatRoomUser.setId(System.String)">
             设置id
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.BlockChatRoomUser.getId">
             获取id
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.BlockChatRoomUser.setTime(System.String)">
             设置time
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.BlockChatRoomUser.getTime">
             获取time
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.BlockUsers">
            封禁用户信息
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.BlockUsers.setUserId(System.String)">
             设置userId
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.BlockUsers.getUserId">
             获取userId
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.BlockUsers.setBlockEndTime(System.String)">
             设置blockEndTime
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.BlockUsers.getBlockEndTime">
             获取blockEndTime
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.ChatRoom">
            聊天室信息。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoom.setChrmId(System.String)">
             设置chrmId
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoom.getChrmId">
             获取chrmId
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoom.setName(System.String)">
             设置name
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoom.getName">
             获取name
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoom.setTime(System.String)">
             设置time
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoom.getTime">
             获取time
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.ChatRoomInfo">
            聊天室信息。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoomInfo.setId(System.String)">
             设置id
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoomInfo.getId">
             获取id
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoomInfo.setName(System.String)">
             设置name
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoomInfo.getName">
             获取name
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.ChatroomQueryReslut">
            chatroomQuery 返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomQueryReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomQueryReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomQueryReslut.setChatRooms(System.Collections.Generic.List{Smobiler.Core.Controls.RongIM.IO.models.ChatRoom})">
             设置chatRooms
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomQueryReslut.getChatRooms" -->
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomQueryReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomQueryReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.ChatRoomUser">
            聊天室用户信息。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoomUser.setId(System.String)">
             设置id
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoomUser.getId">
             获取id
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoomUser.setTime(System.String)">
             设置time
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatRoomUser.getTime">
             获取time
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.ChatroomUserQueryReslut">
            chatroomUserQuery 返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomUserQueryReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomUserQueryReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomUserQueryReslut.setTotal(System.Int32)">
             设置total
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomUserQueryReslut.getTotal">
             获取total
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomUserQueryReslut.setUsers(System.Collections.Generic.List{Smobiler.Core.Controls.RongIM.IO.models.ChatRoomUser})">
             设置users
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomUserQueryReslut.getUsers" -->
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomUserQueryReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ChatroomUserQueryReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.CheckOnlineReslut">
            checkOnlineUser返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.CheckOnlineReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.CheckOnlineReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.CheckOnlineReslut.setStatus(System.String)">
             设置status
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.CheckOnlineReslut.getStatus">
             获取status
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.CheckOnlineReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.CheckOnlineReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.CodeSuccessReslut">
            http 成功返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.CodeSuccessReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.CodeSuccessReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.CodeSuccessReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.CodeSuccessReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.GagChatRoomUser">
            聊天室被禁言用户信息。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GagChatRoomUser.setTime(System.String)">
             设置time
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GagChatRoomUser.getTime">
             获取time
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GagChatRoomUser.setUserId(System.String)">
             设置userId
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GagChatRoomUser.getUserId">
             获取userId
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.GagGroupUser">
            群组用户信息。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GagGroupUser.setTime(System.String)">
             设置time
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GagGroupUser.getTime">
             获取time
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GagGroupUser.setUserId(System.String)">
             设置userId
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GagGroupUser.getUserId">
             获取userId
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.GroupInfo">
            群组信息。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GroupInfo.setId(System.String)">
             设置id
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GroupInfo.getId">
             获取id
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GroupInfo.setName(System.String)">
             设置name
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GroupInfo.getName">
             获取name
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.GroupUser">
            群组用户信息。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GroupUser.setId(System.String)">
             设置id
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GroupUser.getId">
             获取id
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.GroupUserQueryReslut">
            groupUserQuery返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GroupUserQueryReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GroupUserQueryReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GroupUserQueryReslut.setId(System.String)">
             设置id
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GroupUserQueryReslut.getId">
             获取id
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.GroupUserQueryReslut.setUsers(System.Collections.Generic.List{Smobiler.Core.Controls.RongIM.IO.models.GroupUser})">
             设置users
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Core.Controls.RongIM.IO.models.GroupUserQueryReslut.getUsers" -->
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.HistoryMessageReslut">
            historyMessage返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.HistoryMessageReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.HistoryMessageReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.HistoryMessageReslut.setUrl(System.String)">
             设置url
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.HistoryMessageReslut.getUrl">
             获取url
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.HistoryMessageReslut.setDate(System.String)">
             设置date
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.HistoryMessageReslut.getDate">
             获取date
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.HistoryMessageReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.HistoryMessageReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.ListBlockChatroomUserReslut">
            listBlockChatroomUser返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListBlockChatroomUserReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListBlockChatroomUserReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListBlockChatroomUserReslut.setUsers(System.Collections.Generic.List{Smobiler.Core.Controls.RongIM.IO.models.BlockChatRoomUser})">
             设置users
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Core.Controls.RongIM.IO.models.ListBlockChatroomUserReslut.getUsers" -->
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListBlockChatroomUserReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListBlockChatroomUserReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.ListGagChatroomUserReslut">
            listGagChatroomUser返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListGagChatroomUserReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListGagChatroomUserReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListGagChatroomUserReslut.setUsers(System.Collections.Generic.List{Smobiler.Core.Controls.RongIM.IO.models.GagChatRoomUser})">
             设置users
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Core.Controls.RongIM.IO.models.ListGagChatroomUserReslut.getUsers" -->
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListGagChatroomUserReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListGagChatroomUserReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.ListGagGroupUserReslut">
            lisitGagGroupUser 返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListGagGroupUserReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListGagGroupUserReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListGagGroupUserReslut.setUsers(System.Collections.Generic.List{Smobiler.Core.Controls.RongIM.IO.models.GagGroupUser})">
             设置users
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Core.Controls.RongIM.IO.models.ListGagGroupUserReslut.getUsers" -->
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListGagGroupUserReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListGagGroupUserReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.ListWordfilterReslut">
            listWordfilter返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListWordfilterReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListWordfilterReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListWordfilterReslut.setWord(System.String)">
             设置word
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListWordfilterReslut.getWord">
             获取word
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListWordfilterReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.ListWordfilterReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.MsgObj">
            用于Push中的message。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.MsgObj.setContent(System.String)">
             设置content
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.MsgObj.getContent">
             获取content
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.MsgObj.setObjectName(System.String)">
             设置objectName
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.MsgObj.getObjectName">
             获取objectName
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.Notification">
            按操作系统类型推送消息内容，如 platform 中设置了给 ios 和 android 系统推送消息，而在 notification 中只设置了 ios 的推送内容，则 android 的推送内容为最初 alert 设置的内容。（非必传）
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.Notification.setAlert(System.String)">
             设置alert
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.Notification.getAlert">
             获取alert
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.Notification.setIos(Smobiler.Core.Controls.RongIM.IO.models.PlatformNotification)">
             设置ios
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.Notification.getIos">
             获取ios
            
             @return PlatformNotification
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.Notification.setAndroid(Smobiler.Core.Controls.RongIM.IO.models.PlatformNotification)">
             设置android
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.Notification.getAndroid">
             获取android
            
             @return PlatformNotification
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.PlatformNotification">
            设备中的推送内容。（非必传）
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PlatformNotification.setAlert(System.String)">
             设置alert
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PlatformNotification.getAlert">
             获取alert
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PlatformNotification.setExtras(System.Collections.Generic.Dictionary{System.String,System.String})">
             设置extras
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Core.Controls.RongIM.IO.models.PlatformNotification.getExtras" -->
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.PushMessage">
            不落地 push 消息体。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PushMessage.setPlatform(System.String[])">
             设置platform
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PushMessage.getPlatform">
             获取platform
            
             @return String[]
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PushMessage.setFromuserid(System.String)">
             设置fromuserid
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PushMessage.getFromuserid">
             获取fromuserid
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PushMessage.setAudience(Smobiler.Core.Controls.RongIM.IO.models.TagObj)">
             设置audience
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PushMessage.getAudience">
             获取audience
            
             @return TagObj
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PushMessage.setMessage(Smobiler.Core.Controls.RongIM.IO.models.MsgObj)">
             设置message
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PushMessage.getMessage">
             获取message
            
             @return MsgObj
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PushMessage.setNotification(Smobiler.Core.Controls.RongIM.IO.models.Notification)">
             设置notification
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.PushMessage.getNotification">
             获取notification
            
             @return Notification
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.QueryBlacklistUserReslut">
            queryBlacklistUser返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlacklistUserReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlacklistUserReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlacklistUserReslut.setUsers(System.String[])">
             设置users
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlacklistUserReslut.getUsers">
             获取users
            
             @return String[]
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlacklistUserReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlacklistUserReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.QueryBlockUserReslut">
            queryBlockUser返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlockUserReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlockUserReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlockUserReslut.setUsers(System.Collections.Generic.List{Smobiler.Core.Controls.RongIM.IO.models.BlockUsers})">
             设置users
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlockUserReslut.getUsers" -->
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlockUserReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.QueryBlockUserReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.SMSImageCodeReslut">
            getImageCode 成功返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSImageCodeReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSImageCodeReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSImageCodeReslut.setUrl(System.String)">
             设置url
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSImageCodeReslut.getUrl">
             获取url
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSImageCodeReslut.setVerifyId(System.String)">
             设置verifyId
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSImageCodeReslut.getVerifyId">
             获取verifyId
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSImageCodeReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSImageCodeReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.SMSSendCodeReslut">
            SMSSendCodeReslut 成功返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSSendCodeReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSSendCodeReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSSendCodeReslut.setSessionId(System.String)">
             设置sessionId
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSSendCodeReslut.getSessionId">
             获取sessionId
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSSendCodeReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.SMSSendCodeReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.TagObj">
            用于Push中的 标签。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TagObj.setTag(System.String[])">
             设置tag
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TagObj.getTag">
             获取tag
            
             @return String[]
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TagObj.setUserid(System.String[])">
             设置userid
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TagObj.getUserid">
             获取userid
            
             @return String[]
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TagObj.setIs_to_all(System.Boolean)">
             设置is_to_all
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TagObj.getIs_to_all">
             获取is_to_all
            
             @return Boolean
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage">
            模版消息对象。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.setFromUserId(System.String)">
             设置fromUserId
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.getFromUserId">
             获取fromUserId
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.setToUserId(System.String[])">
             设置toUserId
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.getToUserId">
             获取toUserId
            
             @return String[]
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.setContent(System.String)">
             设置content
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.getContent">
             获取content
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.setValues(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}})">
             设置values
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.getValues" -->
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.setObjectName(System.String)">
             设置objectName
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.getObjectName">
             获取objectName
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.setPushContent(System.String[])">
             设置pushContent
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.getPushContent">
             获取pushContent
            
             @return String[]
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.setPushData(System.String[])">
             设置pushData
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.getPushData">
             获取pushData
            
             @return String[]
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.setVerifyBlacklist(System.Int32)">
             设置verifyBlacklist
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TemplateMessage.getVerifyBlacklist">
             获取verifyBlacklist
            
             @return Integer
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.TokenReslut">
            getToken 返回结果
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TokenReslut.setCode(System.Int32)">
             设置code
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TokenReslut.getCode">
             获取code
            
             @return Integer
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TokenReslut.setToken(System.String)">
             设置token
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TokenReslut.getToken">
             获取token
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TokenReslut.setUserId(System.String)">
             设置userId
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TokenReslut.getUserId">
             获取userId
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TokenReslut.setErrorMessage(System.String)">
             设置errorMessage
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.TokenReslut.getErrorMessage">
             获取errorMessage
            
             @return String
        </member>
        <member name="T:Smobiler.Core.Controls.RongIM.IO.models.UserTag">
            用于打标签的对象。
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.UserTag.setTags(System.String[])">
             设置tags
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.UserTag.getTags">
             获取tags
            
             @return String[]
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.UserTag.setUserId(System.String)">
             设置userId
            
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.models.UserTag.getUserId">
             获取userId
            
             @return String
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.util.RongHttpClient.ConvertDateTimeInt(System.DateTime)">
            <summary>  
            DateTime时间格式转换为Unix时间戳格式  
            </summary>  .
            <param name="time"> DateTime时间格式</param>  
            <returns>Unix时间戳格式</returns>  
        </member>
        <member name="M:Smobiler.Core.Controls.RongIM.IO.util.RongHttpClient.ValidateRemoteCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Certificate validation callback.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State"/> to Closed.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="T:Newtonsoft.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to single parameterized constructor, then the non-public default constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a parameterized constructor.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
            <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>
            Create a custom object
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
            <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
            <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
            <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>
            Gets or sets a value indicating whether integer values are allowed.
            </summary>
            <value><c>true</c> if integers are allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="camelCaseText"><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version"/> to and from a string (e.g. "1.2.3.4").
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
            <summary>
            Converts XML to and from JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
            <value>The name of the deserialize root element.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value><c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
            <value><c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="serializer">The calling serializer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns><c>true</c> if attribute name is for a namespace attribute, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime"/> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime"/> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime"/> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime"/>, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/> with <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double"/> property, null for a <see cref="T:System.Nullable`1"/> property.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Double"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal"/>.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation"/> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.IArrayPool`1">
            <summary>
            Provides an interface for using pooled arrays.
            </summary>
            <typeparam name="T">The array type content.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>
            Rent a array from the pool. This array must be returned when it is no longer needed.
            </summary>
            <param name="minimumLength">The minimum required length of the array. The returned array may be longer.</param>
            <returns>The rented array from the pool. This array must be returned when it is no longer needed.</returns>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Return(`0[])">
            <summary>
            Return an array to the pool.
            </summary>
            <param name="array">The array that is being returned.</param>
        </member>
        <member name="T:Newtonsoft.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets or sets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter"/> described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.JsonConverter"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> described by NamingStrategyType.  
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConvert">
            <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            Default settings are automatically used by serialization methods on <see cref="T:Newtonsoft.Json.JsonConvert"/>,
            and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1"/> and <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)"/> on <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            To serialize without using any default settings create a <see cref="T:Newtonsoft.Json.JsonSerializer"/> with
            <see cref="M:Newtonsoft.Json.JsonSerializer.Create"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,Newtonsoft.Json.StringEscapeHandling)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <param name="stringEscapeHandling">The string escape handling.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)">
            <summary>
            Asynchronously serializes the specified object to a JSON string.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            Asynchronously serializes the specified object to a JSON string using formatting.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            Deserialization will happen on a new thread.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            Deserialization will happen on a new thread.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>
            A task that represents the asynchronous populate operation.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            Serializes the XML node to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the XML node to a JSON string using formatting.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the XML node to a JSON string using formatting and omits the root object if <paramref name="omitRootObject"/> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>
            and writes a .NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string using formatting.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject"/> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>
            and writes a .NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
            <summary>
            <para>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.</returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Newtonsoft.Json.JsonConverter"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter"/> described by ConverterType.  
            If null, the default constructor is used.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Newtonsoft.Json.JsonConverter"/>.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Newtonsoft.Json.JsonConverter"/>.</param>
            <param name="converterParameters">Parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter"/>. Can be null.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
            	<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
            	<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute"/> class.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter"/> used when serializing the property's collection items.
            </summary>
            <value>The collection's items <see cref="T:Newtonsoft.Json.JsonConverter"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter"/> described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.JsonConverter"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> described by NamingStrategyType.  
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Start">
            <summary>
            The Read method has not been called.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Closed">
            <summary>
            The Close method has been called.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>
            Reader in a constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the reader is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the reader is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
            <value>
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>
            Get or set how custom date formatted strings are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns><c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonRequiredAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer"/> to always serialize the member, and require the member has a value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <remarks>
            <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="T:System.Runtime.Serialization.SerializationBinder"/>
            when deserializing with a value other than <c>TypeNameHandling.None</c>.
            </remarks>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text, and the expected date format when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> as well as the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> as well as the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a <see cref="T:Newtonsoft.Json.JsonConverter"/> collection that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <remarks>
            <see cref="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="T:System.Runtime.Serialization.SerializationBinder"/>
            when deserializing with a value other than <c>TypeNameHandling.None</c>.
            </remarks>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>
            Gets or sets a function that creates the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>A function that creates the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text, and the expected date format when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.ArrayPool">
            <summary>
            Gets or sets the reader's character buffer pool.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Close">
            <summary>
            Changes the state to closed. 
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.ArrayPool">
            <summary>
            Gets or sets the writer's character array pool.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of JSON token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader"/> if a <see cref="M:Newtonsoft.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonValidatingReader">
            <summary>
            <para>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> validation.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader"/> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from while validating.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader"/> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader"/>.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.JsonReader"/> specified in the constructor.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>
            A <see cref="T:System.Byte"/>[] or a null reference if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the writer is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the writer is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current JSON object or array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader"/> token and its children.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Writes the <see cref="T:Newtonsoft.Json.JsonToken"/> token and its value.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken"/> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String"/> property name for <see cref="F:Newtonsoft.Json.JsonToken.PropertyName"/>.
            A null value can be passed to the method for token's that don't have a value, e.g. <see cref="F:Newtonsoft.Json.JsonToken.StartObject"/>.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the <see cref="T:Newtonsoft.Json.JsonToken"/> token.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken"/> to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the state of the JsonWriter,
            </summary>
            <param name="token">The JsonToken being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.CommentHandling">
            <summary>
            Specifies how JSON comments are handled when loading JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Ignore">
            <summary>
            Ignore comments.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Load">
            <summary>
            Load comments as a <see cref="T:Newtonsoft.Json.Linq.JValue"/> with type <see cref="F:Newtonsoft.Json.Linq.JTokenType.Comment"/>.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.LineInfoHandling">
            <summary>
            Specifies how line information is handled when loading JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Ignore">
            <summary>
            Ignore line information.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Load">
            <summary>
            Load line information.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains every token in the source collection, the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains every token in the source collection, and the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> class from another <see cref="T:Newtonsoft.Json.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
            <summary>
            Occurs before an item is added to the collection.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
            <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>
            Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing this token, and all the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter"/> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <returns>An <see cref="T:Newtonsoft.Json.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
            <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be merged.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Newtonsoft.Json.Linq.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken"/> using <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings"/>.
            </summary>
            <param name="content">The content to be merged.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings"/> used to merge the content.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(Newtonsoft.Json.Linq.JEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject"/> class from another <see cref="T:Newtonsoft.Json.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty"/> the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> with the specified name or null.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> of this object's property values.
            </summary>
            <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> of this object's property values.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if item was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor"/> that represents the default event for this object, or null if this object does not have events.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the default property for this object, or null if this object does not have properties.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"/> that represents the editor for this object.</param>
            <returns>
            An <see cref="T:System.Object"/> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the filtered events for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the events for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the property whose owner is to be found.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the owner of the specified property.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty"/> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty"/>.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
            <c>true</c> if resetting the component changes its value; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component to test for reset capability.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value. 
                            </param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set. 
                            </param><param name="value">The new value. 
                            </param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
            <c>true</c> if the property should be persisted; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component with the property to be examined for persistence.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
            <c>true</c> if the property is read-only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the property.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value></value>
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw"/> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonLoadSettings">
            <summary>
            Specifies the settings used when loading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>
            Gets or sets how JSON comments are handled when loading JSON.
            </summary>
            <value>The JSON comment handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>
            Gets or sets how JSON line info is handled when loading JSON.
            </summary>
            <value>The JSON line info handling.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonMergeSettings">
            <summary>
            Specifies the settings used when merging JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
            <value>The method used when merging JSON arrays.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>
            Gets or sets how how null value properties are merged.
            </summary>
            <value>How null value properties are merged.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns><c>true</c> if the tokens are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token. 
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AncestorsAndSelf">
            <summary>
            Returns a collection of tokens that contain this token, and the ancestors of this token.
            </summary>
            <returns>A collection of tokens that contain this token, and the ancestors of this token.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>[].
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/>[] to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader"/> for this token.
            </summary>
            <returns>An <see cref="T:Newtonsoft.Json.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken"/>, or null.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the selected elements.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the selected elements.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation``1">
            <summary>
            Get the first annotation object of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation(System.Type)">
            <summary>
            Gets the first annotation object of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type"/> of the annotation to retrieve.</param>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations``1">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>  that contains the annotations for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations(System.Type)">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type"/> of the annotations to retrieve.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Object"/> that contains the annotations that match the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of annotations to remove.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type"/> of annotations to remove.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>
            <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.CurrentToken">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> at the reader's current position.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.CurrentToken">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> at the writer's current position.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class from another <see cref="T:Newtonsoft.Json.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateNull">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue"/> null value.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue"/> null value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateUndefined">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue"/> undefined value.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue"/> undefined value.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeArrayHandling">
            <summary>
            Specifies how JSON arrays are merged together.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
            <summary>Concatenate arrays.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Union">
            <summary>Union arrays, skipping items that already exist.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
            <summary>Replace all array items.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
            <summary>Merge array items together, matched by index.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeNullValueHandling">
            <summary>
            Specifies how null value properties are merged.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>
            The content's null value properties will be ignored during merging.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Merge">
            <summary>
            The content's null value properties will be merged.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>
            Only members marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute"/>
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> to false.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Ignore">
            <summary>
            Do not try to read metadata properties.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />       
            </example>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.DisallowNull">
            <summary>
            The property is not required but it cannot be a null value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Extensions">
            <summary>
            <para>
            Contains the JSON schema extension methods.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken"/> is valid.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            <para>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken"/> is valid.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            <para>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            <para>
            An in-memory representation of a JSON Schema.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read only.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
            <value>A number that the value should be divisble by.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of items.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> instance at their array position from <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items"/>.
            </summary>
            <value>
            	<c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of additional items.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of additional items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
            <value>
            	<c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>
            Gets or sets whether the array items must be unique.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of properties.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallow types.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.
            </summary>
            <value>The collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> to use when resolving schema references.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from a string that contains schema JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter"/> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            <para>
            Returns detailed information about the schema exception.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            <para>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from a specified <see cref="T:System.Type"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            <para>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> from an id.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.
            </summary>
            <param name="reference">The id.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            <para>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            <para>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            <para>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> associated with the validation error.
            </summary>
            <value>The JsonSchemaException associated with the validation error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
            <value>The path of the JSON location where the validation error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation error.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            <para>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy">
            <summary>
            A camel case naming strategy.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/> class.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer"/> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute"/> attribute when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.SerializableAttribute"/> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how property names and dictionary keys are serialized.
            </summary>
            <value>The naming strategy used to resolve how property names and dictionary keys are serialized.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
            <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly improve performance with multiple resolver instances because expensive reflection will only
            happen once. This setting can cause unexpected behavior if different instances of the resolver are suppose to produce different
            results. When set to false it is highly recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Resolved name of the property.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>
            Resolves the key of the dictionary. By default <see cref="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)"/> is used to resolve dictionary keys.
            </summary>
            <param name="dictionaryKey">Key of the dictionary.</param>
            <returns>Resolved key of the dictionary.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultNamingStrategy">
            <summary>
            The default naming strategy. Property names and dictionary keys are unchanged.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object. </param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object. </param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
            <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener"/> instances.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IAttributeProvider">
            <summary>
            Provides methods to get attributes.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer"/> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the sepecified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type"/> of the collection items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the collection values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the collection values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer"/> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer"/> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
            <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
            <value>The method called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
            <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
            <value>The method called during deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
            <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
            <value>The method called after serialization of the object graph.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
            <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
            <value>The method called before serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
            <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The method called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>
            Gets or sets the dictionary key resolver.
            </summary>
            <value>The dictionary key resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary keys.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary values.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the dictionary values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the dictionary values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
            <value>The ISerializable object constructor.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary>
            Gets a collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> instances that define the parameters used with <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator"/>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
            <value>The override constructor.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
            <value>The parametrized constructor.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            This function is called with a collection of arguments which are defined by the <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters"/> collection.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>
            Gets or sets the extension data value type.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider"/> for this property.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider"/> for this property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets or sets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> has a member attribute.
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
            <value>A predicate used to determine whether the property should be serialize.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be deserialized.
            </summary>
            <value>A predicate used to determine whether the property should be deserialized.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>
            Lookup and create an instance of the JsonConverter type described by the argument.
            </summary>
            <param name="converterType">The JsonConverter type to create.</param>
            <param name="converterArgs">Optional arguments to pass to an initializing constructor of the JsonConverter.
            If null, the default constructor is used.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String"/> of the most recent trace messages.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.NamingStrategy">
            <summary>
            A base class for resolving how property names and dictionary keys are serialized.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>
            A flag indicating whether dictionary keys should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>
            A flag indicating whether explicitly specified property names,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>, should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>
            Gets the serialized name for a given property name.
            </summary>
            <param name="name">The initial property name.</param>
            <param name="hasSpecifiedName">A flag indicating whether the property has had a name explicitly specfied.</param>
            <returns>The serialized property name.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>
            Gets the serialized key for a given dictionary key.
            </summary>
            <param name="key">The initial dictionary key.</param>
            <returns>The serialized dictionary key.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider">
            <summary>
            Provides methods to get attributes from a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider"/> class.
            </summary>
            <param name="attributeProvider">The instance to get attributes for. This parameter should be a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy">
            <summary>
            A snake case naming strategy.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, &apos;, &quot;) and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <remarks>
            <see cref="T:Newtonsoft.Json.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="T:System.Runtime.Serialization.SerializationBinder"/>
            when deserializing with a value other than <c>TypeNameHandling.None</c>.
            </remarks>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <param name="enumType">The enum type to get names and values for.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
    </members>
</doc>
