<?xml version="1.0"?>
<doc>
<assembly>
<name>
Smobiler.Core
</name>
</assembly>
<members>
<member name="T:Smobiler.Core.My.Resources.Resources">
<summary>
  一个强类型的资源类，用于查找本地化的字符串等。
</summary>
</member>
<member name="P:Smobiler.Core.My.Resources.Resources.ResourceManager">
<summary>
  返回此类使用的缓存的 ResourceManager 实例。
</summary>
</member>
<member name="P:Smobiler.Core.My.Resources.Resources.Culture">
<summary>
  重写当前线程的 CurrentUICulture 属性
</summary>
</member>
<member name="P:Smobiler.Core.My.Resources.Resources.logon">
<summary>
  查找 System.Drawing.Bitmap 类型的本地化资源。
</summary>
</member>
<member name="T:Smobiler.Core.EncodingModes">
 <summary>
 数据编码
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.EncodingModes.System">
 <summary>
 根据系统区域设置
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.EncodingModes.GB2312">
 <summary>
 汉字编码字符集
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.EncodingModes.UTF8">
 <summary>
 可变长度字符编码
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.EncodingModes.Unicode">
 <summary>
 通用字符集
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.NetWorkType">
 <summary>
 网络类型
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.NetWorkType.Wifi">
 <summary>
 WIFI
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.NetWorkType.Net">
 <summary>
 移动数据网络
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.NetWorkType.None">
 <summary>
 未获取到网络状态
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.ClientFramework">
 <summary>
 客户端平台
 </summary>
</member>
<member name="F:Smobiler.Core.ClientFramework.Develop">
 <summary>
 开发版
 </summary>
</member>
<member name="F:Smobiler.Core.ClientFramework.Standard">
 <summary>
 标准版
 </summary>
</member>
<member name="F:Smobiler.Core.ClientFramework.Enterprise">
 <summary>
 企业版
 </summary>
</member>
<member name="T:Smobiler.Core.ClientSource">
 <summary>
 客户端源
 </summary>
</member>
<member name="F:Smobiler.Core.ClientSource.App">
 <summary>
 应用
 </summary>
</member>
<member name="F:Smobiler.Core.ClientSource.Web">
 <summary>
 网站
 </summary>
</member>
<member name="F:Smobiler.Core.ClientSource.WeChat">
 <summary>
 微信
 </summary>
</member>
<member name="F:Smobiler.Core.ClientSource.WeWork">
 <summary>
 微信企业
 </summary>
</member>
<member name="F:Smobiler.Core.ClientSource.WeChatMiniProgram">
 <summary>
 微信小程序
 </summary>
</member>
<member name="T:Smobiler.Core.MobileClientStopEventHandler">
 <summary>
 一个委托，它表示在客户端停止时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="removeClient">包含事件数据的 removeClient</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.NetWorkCallBackHandler">
 <summary>
 一个委托，它表示客户端返回网络状态时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="args">包含事件数据的 NetWorkHandlerArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.NetWorkHandlerArgs">
 <summary>
 为NetWorkCallBackHandler提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.NetWorkHandlerArgs.NetWorkType">
 <summary>
 获取网络类型
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.NetWorkHandlerArgs.WifiIP">
 <summary>
 获取WIFI网络下的IP地址
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.NetWorkHandlerArgs.WifiSSID">
 <summary>
 获取WIFI网络下的SSID
 </summary>
 <returns></returns>
 <remarks>仅支持Android系统</remarks>
</member>
<member name="P:Smobiler.Core.NetWorkHandlerArgs.WifiBSSID">
 <summary>
 获取WIFI网络下的BSSID
 </summary>
 <returns></returns>
 <remarks>仅支持Android系统</remarks>
</member>
<member name="T:Smobiler.Core.StatusbarCallBackHandler">
 <summary>
 一个委托，它表示客户端返回状态栏时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="args">包含事件数据的 StatusbarHandlerArgs</param>
</member>
<member name="T:Smobiler.Core.StatusbarHandlerArgs">
 <summary>
 为StatusbarCallBackHandler提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.StatusbarHandlerArgs.Height">
 <summary>
 获取状态栏高度
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.InvalidLayoutException">
 <summary>
 无效的布局异常
 </summary>
</member>
<member name="T:Smobiler.Core.MobileUtility">
 <summary>
 通用类
 </summary>
</member>
<member name="M:Smobiler.Core.MobileUtility.GetJsonInstance(System.String)">
 <summary>
 获取Json实例
 </summary>
 <param name="jsonstr">Json字符串</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileUtility.GetJsonInstance``1(System.String)">
 <summary>
 获取Json实例
 </summary>
 <typeparam name="T">实例类型</typeparam>
 <param name="jsonstr">Json字符串</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileUtility.GetJsonString(System.Object)">
 <summary>
 获取Json字符串
 </summary>
 <param name="jsonobj">Json对象</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileUtility.GetJsonStringNull(System.Object)">
 <summary>
 获取Json字符串（非空值）
 </summary>
 <param name="jsonobj">Json对象</param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.ResultHandler">
 <summary>
 一个委托，它表示基于组件API接口调用结束时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 ResultArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.ResultHandler`1">
 <summary>
 一个委托，它表示基于组件API接口调用结束时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 ResultArgs</param>
</member>
<member name="T:Smobiler.Core.ResultArgs">
 <summary>
 为ResultHandler提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.ResultArgs.Empty">
 <summary>
 获取一个空的ResultArgs
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ResultArgs.isError">
 <summary>
 获取一个值，该值指示是否在接口调用结果中包含错误信息
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ResultArgs.error">
 <summary>
 获取和设置错误信息
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ResultArgs.errorCode">
 <summary>
 获取和设置错误信息编号
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.ResultArgs.setErrorInfo(System.Int32,System.String)">
 <summary>
 设置错误信息
 </summary>
 <param name="errorCode"></param>
 <param name="error"></param>
</member>
<member name="T:Smobiler.Core.ResultArgs`1">
 <summary>
 为ResultHandler提供数据
 </summary>
</member>
<member name="T:Smobiler.Core.DesignStyleSetting">
 <summary>
 样式配置类
 </summary>
</member>
<member name="M:Smobiler.Core.DesignStyleSetting.#ctor(System.String)">
 <summary>
 构造函数
 </summary>
 <param name="path">配置文件路径</param>
</member>
<member name="P:Smobiler.Core.DesignStyleSetting.Styles">
 <summary>
 样式集合
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.DesignStyleSetting.SaveData">
 <summary>
 保存配置
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.DesignStyleSetting.GetControlStyle(System.String,System.String)">
 <summary>
 根据控件类型以及控件类型中对应的控件样式名称来查找ControlStyle
 </summary>
 <param name="ctltypename"></param>
 <param name="stylename"></param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.DesignStyleSetting.GetNodePropertyValueDict(System.String,System.String)">
 <summary>
 根据控件类型及控件类型中对应的控件样式名称来查找NodePropertyValueDict
 </summary>
 <param name="ctltypename"></param>
 <param name="stylename"></param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.ControlStyle">
 <summary>
 控件样式类
 </summary>
</member>
<member name="P:Smobiler.Core.ControlStyle.Name">
 <summary>
 控件名称
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ControlStyle.ControlType">
 <summary>
 控件类型
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ControlStyle.ControlObj">
 <summary>
 控件实体，用于添加到PropertyGrid上
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ControlStyle.PropertyGridObj">
 <summary>
 自定义的类型
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ControlStyle.NodeControlStyle">
 <summary>
 下一层包含的样式字典（允许下级）
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ControlStyle.NodePropertyDict">
 <summary>
 控件样式对应的配置文件中的属性和值（由于并不想在获取配置文件时，就创建样式控件的实例，所以这里只添加在字典中）
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ControlStyle.NodePropertyValueDict">
 <summary>
 控件样式对应的配置文件中的属性和实际类型的值
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.DesignStyleType">
 <summary>
 样式设计类型
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Design.AttributeProvider">
 <summary>
 Provides attributes for the Keys or Values in the dictionary.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Design.AttributeProvider.GetAttributes(System.Type)">
 <summary>
 Returns a collection of attributes for the specified type. 
 </summary>
 <param name="type">The type of the key or value to provide attributes for.</param>
 <returns>An <see cref="T:System.ComponentModel.AttributeCollection"/> with the attributes for the component.</returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Design.DefaultUsage">
 <summary>
 Used to specify whether the requested default value is to be used as Key or Value of a dictionary entry
 </summary>
 <remarks>If the default value is to be used as Key it may NOT be null (because the Dictionary doesn't allow null as Key)</remarks>
</member>
<member name="F:Smobiler.Core.Design.DefaultUsage.Key">
 <summary>
 The requested default value is to be used as Key in the dictionary
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Design.DefaultUsage.Value">
 <summary>
 The requested default value is to be used as Value in the dictionary
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Design.DefaultProvider`1">
 <summary>
 Provides default values for the Key or Value properties for new dictionary entries
 </summary>
 <typeparam name="T">The type of the Key or Value</typeparam>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Design.DefaultProvider`1.GetDefault(Smobiler.Core.Design.DefaultUsage)">
 <summary>
 Returns a default value for the Key or Value properties for new dictionary entries
 </summary>
 <param name="usage">Specifies if the desired default value is to be used as Key or Value</param>
 <returns>Returns a value of type T to be used as the default</returns>
 <remarks>If the default value is to be used as Key it may NOT be null (because the Dictionary doesn't allow null as Key)</remarks>
</member>
<member name="M:Smobiler.Core.Design.EditableKeyValuePair`2.#ctor(`0,`1,Smobiler.Core.Design.GenericDictionaryEditorAttribute)">
 <summary>
 实例化 EditableKeyValuePair(Of TKey, TValue)
 </summary>
 <param name="key">key值</param>
 <param name="value">value值</param>
 <param name="editorAttribute">属性</param>
</member>
<member name="M:Smobiler.Core.Design.GenericDictionaryEditor`2.#ctor(System.Type)">
 <summary>
 Initializes a new instance of the GenericDictionaryEditor class using the specified collection type.
 </summary>
 <param name="type">The type of the collection for this editor to edit.</param>
</member>
<member name="M:Smobiler.Core.Design.GenericDictionaryEditor`2.CreateCollectionForm">
 <summary>
 集合编辑器的属性窗口的属性描述
 </summary>
 <returns>A <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm"/>  to provide as the user interface for editing the collection.</returns>
</member>
<member name="M:Smobiler.Core.Design.GenericDictionaryEditor`2.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
 <summary>
 Edits the value of the specified object using the specified service provider and context.
 </summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </param>
 <param name="provider">A service provider object through which editing services can be obtained.</param>
 <param name="value">The object to edit the value of.</param>
 <returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
</member>
<member name="M:Smobiler.Core.Design.GenericDictionaryEditor`2.CreateCollectionItemType">
 <summary>
 Gets the data type that this collection contains.
 </summary>
 <returns>The data type of the items in the collection, or an Object if no Item property can be located on the collection.</returns>
</member>
<member name="M:Smobiler.Core.Design.GenericDictionaryEditor`2.CreateInstance(System.Type)">
 <summary>
 创建指定的集合项类型的新实例
 </summary>
 <param name="itemType">The type of item to create.</param>
 <returns>A new instance of the specified type.</returns>
</member>
<member name="M:Smobiler.Core.Design.GenericDictionaryEditor`2.GetItems(System.Object)">
 <summary>
 Gets an array of objects containing the specified collection.
 </summary>
 <param name="editValue">The collection to edit.</param>
 <returns>An array containing the collection objects, or an empty object array if the specified collection does not inherit from ICollection.</returns>
</member>
<member name="M:Smobiler.Core.Design.GenericDictionaryEditor`2.SetItems(System.Object,System.Object[])">
 <summary>
 Sets the specified array as the items of the collection.
 </summary>
 <param name="editValue">The collection to edit.</param>
 <param name="value">An array of objects to set as the collection items.</param>
 <returns>The newly created collection object or, otherwise, the collection indicated by the <paramref name="editValue"/> parameter.</returns>
</member>
<member name="M:Smobiler.Core.Design.GenericDictionaryEditor`2.GetDisplayText(System.Object)">
 <summary>
 Retrieves the display text for the given list item.
 </summary>
 <param name="value">The list item for which to retrieve display text.</param>
 <returns>he display text for <paramref name="value"/>.</returns>
</member>
<member name="T:Smobiler.Core.Design.GenericDictionaryEditorAttribute">
 <summary>
 Provides configuration options for the GenericDictionaryEditor.
 配置当前泛型字典对应的配置
 </summary>
</member>
<member name="P:Smobiler.Core.Design.GenericDictionaryEditorAttribute.KeyDefaultProviderType">
 <summary>
 Specifies what type to use as a <see cref="T:Smobiler.Core.Design.DefaultProvider`1"/> for the keys in the dictionary.
 key默认值
 </summary>
</member>
<member name="P:Smobiler.Core.Design.GenericDictionaryEditorAttribute.KeyConverterType">
 <summary>
 Specifies what type to use as a <see cref="T:System.ComponentModel.TypeConverter">converter</see> for the keys in the dictionary.
 key类型转换
 </summary>
</member>
<member name="P:Smobiler.Core.Design.GenericDictionaryEditorAttribute.KeyEditorType">
 <summary>
 Specifies what type to use as an <see cref="T:System.Drawing.Design.UITypeEditor">editor</see> to change the key of a dictionary entry.
 key设计UI
 </summary>
</member>
<member name="P:Smobiler.Core.Design.GenericDictionaryEditorAttribute.KeyAttributeProviderType">
 <summary>
 Specifies what type to use as an <see cref="T:Smobiler.Core.Design.AttributeProvider"/> for the keys in the dictionary.
 key属性
 </summary>
</member>
<member name="P:Smobiler.Core.Design.GenericDictionaryEditorAttribute.ValueDefaultProviderType">
 <summary>
 Specifies what type to use as a <see cref="T:Smobiler.Core.Design.DefaultProvider`1"/> for the values in the dictionary.
 value默认值
 </summary>
</member>
<member name="P:Smobiler.Core.Design.GenericDictionaryEditorAttribute.ValueConverterType">
 <summary>
 Specifies what type to use as a <see cref="T:System.ComponentModel.TypeConverter">converter</see> for the values in the dictionary.
 value类型转换
 </summary>
</member>
<member name="P:Smobiler.Core.Design.GenericDictionaryEditorAttribute.ValueEditorType">
 <summary>
 Specifies what type to use as an <see cref="T:System.Drawing.Design.UITypeEditor">editor</see> to change the value of a dictionary entry.
 value设计UI
 </summary>
</member>
<member name="P:Smobiler.Core.Design.GenericDictionaryEditorAttribute.ValueAttributeProviderType">
 <summary>
 Specifies what type to use as <see cref="T:Smobiler.Core.Design.AttributeProvider"/> for the values in the dictionary.
 value类型提供
 </summary>
</member>
<member name="P:Smobiler.Core.Design.GenericDictionaryEditorAttribute.Title">
 <summary>
 The title for the editor window.
 显示抬头
 </summary>
</member>
<member name="P:Smobiler.Core.Design.GenericDictionaryEditorAttribute.KeyDisplayName">
 <summary>
 The display name for key property (defaults to "Key")
 key显示名称
 </summary>
</member>
<member name="P:Smobiler.Core.Design.GenericDictionaryEditorAttribute.ValueDisplayName">
 <summary>
 The display name for value property (defaults to "Value")
 value显示名称
 </summary>
</member>
<member name="M:Smobiler.Core.Design.KeyValueDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Type,System.Type,System.Type,System.String)">
 <summary>
 实例化
 </summary>
 <param name="pd">PropertyDescriptor</param>
 <param name="converterType">TypeConvert</param>
 <param name="editorType">UITypeEditor</param>
 <param name="attributeProviderType">AttributeProvider</param>
 <param name="displayName">显示的名称（在PropertyGrid上）</param>
</member>
<member name="T:Smobiler.Core.Setting">
 <summary>
 Smobiler 配置类
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Setting.#ctor">
 <summary>
 初始化 Setting 类的新实例。
 </summary>
</member>
<member name="M:Smobiler.Core.Setting.#ctor(System.String)">
 <summary>
 根据指定的路径初始化 Setting 类的新实例。
 </summary>
 <param name="configPath">配置文件路径</param>
</member>
<member name="M:Smobiler.Core.Setting.#ctor(System.String,System.String)">
 <summary>
 根据指定的路径和文件名初始化 Setting 类的新实例。
 </summary>
 <param name="configPath">配置文件路径</param>
 <param name="configFileName">配置文件名</param>
</member>
<member name="P:Smobiler.Core.Setting.ConfigPath">
 <summary>
 获取配置文件路径
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Setting.DefaultImagePath">
 <summary>
 获取默认图片路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.DefaultAudioPath">
 <summary>
 获取默认音频路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.DefaultDocumentPath">
 <summary>
 获取默认文档路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.DefaultUploadPath">
 <summary>
 获取默认上传路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.DefaultMediaPath">
 <summary>
 获取默认媒体路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.DefaultWebPath">
 <summary>
 获取默认WEB路径
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Setting.HttpServerPort">
 <summary>
 获取或设置服务端HTTP端口。
 </summary>
 <value>默认值:2324</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Setting.HttpsServerPort">
 <summary>
 获取或设置服务端HTTPS端口。
 </summary>
 <value>默认值:0</value>
 <remarks>此端口不建议使用，建议使用反射代理的方式</remarks>
</member>
<member name="P:Smobiler.Core.Setting.TcpServerPort">
 <summary>
 获取或设置服务端TCP端口。
 </summary>
 <value>默认值:2323</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Setting.EnableStackView">
 <summary>
 获取或设置客户端是否启用堆栈视图
 </summary>
 <value>默认值true</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.SessionTimeOut">
 <summary>
 获取或设置客户端会话超时时间(秒)
 </summary>
 <value>默认1800秒</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.NetworkTimeOut">
 <summary>
 获取或设置网络超时时间(秒)
 </summary>
 <value>默认30秒</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.StartupForm">
 <summary>
 获取或设置启动界面
 </summary>
 <value>默认值空</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.StartupAssembly">
 <summary>
 获取或设置入口程序集
 </summary>
 <value>默认值空</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.DeveloperTrace">
 <summary>
 获取或设置客户端详细日志输出模式
 </summary>
 <value>默认值Single</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.TracePrint">
 <summary>
 获取或设置一个值，该值指示是否在VS调试时输出日志
 </summary>
 <value>默认值True</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.ClientTrace">
 <summary>
 获取和设置一个值，该值指示是否记录客户端操作日志
 </summary>
 <value>默认值False</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Setting.SysTrace">
 <summary>
 获取或设置是否记录进程运行日志
 </summary>
 <value>默认值False</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.PurgingTimeSpan">
 <summary>
 获取或设置辅助线程的轮询时间(秒)。
 </summary>
 <value>默认值60秒</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.PerformTimeSpan">
 <summary>
 性能监测时间间隔
 </summary>
 <value>小于等于0不启动性能监测</value>
 <remarks>性能监测时间用于记录在处理时间是否大于指定的时间，如果大于指定时间，那么会在日志中输出相关业务流程</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Setting.Resources">
 <summary>
 获取资源列表
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Setting.MirrorPatternMaxVerifyTimes">
 <summary>
 获取和设置窗体在Mirror模式时，最大图案解锁验证次数
 </summary>
 <value></value>
 <returns></returns>
 <remarks>超过最大次数时，会重置当前客户端会话，最少1次</remarks>
</member>
<member name="P:Smobiler.Core.Setting.FormStackMaxCount">
 <summary>
 获取和设置窗体最大栈数量
 </summary>
 <value>默认为10，最小值为1，最大值为50</value>
 <returns></returns>
 <remarks>
 Smobiler客户端窗体使用堆栈结构，打开界面时会压栈，关闭界面时会出栈，
 设置窗体最大栈数量为了防止无限制打开窗体导致内存不释放的问题出现，
 建议设置合理大小，正常业务中建议不超过5</remarks>
</member>
<member name="P:Smobiler.Core.Setting.SecurityKey">
 <summary>
 获取和设置客户端连接时验证的安全密钥
 </summary>
 <returns>
 如果设置验证的安全密钥后，会验证当前客户端是从当前应用的打包版本。并禁止非当前应用的打包版本连接到当前服务器。
 </returns>
</member>
<member name="P:Smobiler.Core.Setting.RelativeScreen">
 <summary>
 获取和设置一个值，该值指示是否在计算位置和大小时，是否使用屏幕相对大小。
 </summary>
 <remarks>此属性仅为了兼容老版本的布局模式，如果设置为true，那么会根据屏幕大小和当前控件大小进行比例计算。以满足在设计时控件的位置和大小在客户端屏幕上显示一致。</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Setting.TextFontScaling">
 <summary>
 获取和设置一个值，该值指示是否根据系统缩放文本字体大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Setting.ResourceDenyLocation">
 <summary>
 获取和设置禁止资源访问的路径正则表达式
 </summary>
 <value>默认为空</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Setting.BaiduMapApi">
 <summary>
 获取或设置百度地图API
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Setting.WebScreenWidth">
 <summary>
 获取或设置Web屏幕宽度
 </summary>
 <value></value>
 <returns></returns>
 <remarks>仅在PC生效，如果浏览器的宽度大于设置的值，那么会使用当前设置的值并居中显示</remarks>
</member>
<member name="M:Smobiler.Core.Setting.InitialResources">
 <summary>
 初始化资源
 </summary>
</member>
<member name="M:Smobiler.Core.Setting.LoadData(System.String)">
 <summary>
 从指定的文件中载入配置信息。
 </summary>
 <param name="configfilepath"></param>
</member>
<member name="M:Smobiler.Core.Setting.InitialData">
 <summary>
 重新初始化配置信息。
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Setting.InitialDataInternal">
 <summary>
 初始化
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Setting.TransferOldConfig(System.Xml.XmlNode)">
 <summary>
 将老的配置文件，更新到新的配置文件
 </summary>
 <param name="pNode"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Setting.SaveData">
 <summary>
 保存配置信息。
 </summary>
</member>
<member name="M:Smobiler.Core.Setting.LoadSecurity">
 <summary>
 加载黑白名单
 </summary>
</member>
<member name="T:Smobiler.Core.DeveloperTraceMode">
 <summary>
 客户端日志输出模式
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.DeveloperTraceMode.All">
 <summary>
 记录所有客户端日志
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.DeveloperTraceMode.Single">
 <summary>
 仅记录客户端属性ClientTrace设置为True的客户端日志
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.DeveloperTraceMode.None">
 <summary>
 不记录客户端日志
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.SecurityMode">
 <summary>
 安全模式
 </summary>
</member>
<member name="F:Smobiler.Core.SecurityMode.None">
 <summary>
 无
 </summary>
</member>
<member name="F:Smobiler.Core.SecurityMode.BlackList">
 <summary>
 黑名单
 </summary>
</member>
<member name="F:Smobiler.Core.SecurityMode.WhiteList">
 <summary>
 白名单
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ControlStyleAttribute">
 <summary>
 控件样式描述声明
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.MobileMethodAttribute">
 <summary>
 方法特性
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileMethodAttribute.#ctor(System.String)">
 <summary>
 构造方法
 </summary>
 <param name="methodName">RPC方法名称</param>
</member>
<member name="P:Smobiler.Core.Controls.MobileMethodAttribute.Method">
 <summary>
 获取RPC方法名称
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileModuleAttribute">
 <summary>
 模板特性
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileModuleAttribute.#ctor(System.String)">
 <summary>
 构造方法
 </summary>
 <param name="moduleName">组件或控件模板名称</param>
</member>
<member name="P:Smobiler.Core.Controls.MobileModuleAttribute.Module">
 <summary>
 获取组件或控件模板名称
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileTypeAttribute">
 <summary>
 类型特性
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileTypeAttribute.#ctor(System.String)">
 <summary>
 构造方法
 </summary>
 <param name="typeName">类型名称</param>
</member>
<member name="P:Smobiler.Core.Controls.MobileTypeAttribute.Type">
 <summary>
 获取类型名称
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.PropertyStyleAttribute">
 <summary>
 属性样式
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.SmobilerServiceEditionAttribute">
 <summary>
 SmobilerService版本标识的控件
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.SmobilerServiceEditionAttribute.#ctor(Smobiler.Core.Controls.ServiceEdition)">
 <summary>
 创建 <see cref="T:Smobiler.Core.Controls.SmobilerServiceEditionAttribute"/> 的实例
 </summary>
 <param name="edtion">SmobilerService版本标识</param>
</member>
<member name="P:Smobiler.Core.Controls.SmobilerServiceEditionAttribute.Edition">
 <summary>
 获取SmobilerService版本标识
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.ServiceEdition">
 <summary>
 SmobilerService版本标识
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ServiceEdition.Standard">
 <summary>
 标准版
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ServiceEdition.Professional">
 <summary>
 专业版
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ServiceEdition.Enterprise">
 <summary>
 企业版
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.MobileComponentCollection">
 <summary>
 Mobile组件集合
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.#ctor(Smobiler.Core.Controls.MobileParentControl)">
 <summary>
 初始化 Form.ComponnetControlCollection 类的新实例。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.Add(Smobiler.Core.Controls.MobileComponent)">
 <summary>
 将控件添加到窗体中。
 </summary>
 <param name="value">要添加到窗体中的 Control。</param>
 <returns></returns>
 <remarks>
 可以使用此方法将控件添加到窗体中。如果要将一组已经创建的控件添加到窗体中，请使用 ControlCollection.AddRange 方法。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.AddRange(Smobiler.Core.Controls.MobileComponent[])">
 <summary>
 将控件对象数组添加到集合中。
 </summary>
 <param name="ctls">要添加到集合的 Control 对象的数组。 </param>
 <remarks>
 将 controls 数组中包含的 Control 对象追加到集合的结尾。
 可以使用 AddRange 方法将一组 Control 对象迅速添加到集合，而不是通过使用 Add 方法将每个 Control 手动添加到集合中。
 若要移除以前添加的 Control，请使用 Remove、RemoveAt 或 Clear 方法。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.GetEnumerator">
 <summary>
 返回一个可用于循环访问控件集合的枚举数。
 </summary>
 <returns>一个 IEnumerator 对象，它表示控件集合。</returns>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.Remove(Smobiler.Core.Controls.MobileComponent)">
 <summary>
 从窗体中移除控件。
 </summary>
 <param name="value">要从窗体中移除的 MobileComponent。</param>
 <remarks>
 可以使用此方法移除窗体中不再需要的控件。如果要在移除某控件后显示它，将需要使用 Add 方法将该控件重新添加到窗体中。若要使控件保留在窗体上但不显示，请使用该控件的 Visible 属性。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.Contains(Smobiler.Core.Controls.MobileComponent)">
 <summary>
 确定指定控件是否为集合的成员。
 </summary>
 <param name="value">要在集合中定位的 MobileComponent。</param>
 <returns>如果 Control 是集合的成员，则为 true；否则为 false。</returns>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.RemoveAt(System.Int32)">
 <summary>
 在指定的索引位置从控件集合移除控件。
 </summary>
 <param name="index">要移除的 Control 的索引值。</param>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.Insert(System.Int32,System.Object)">
 <summary>
 在指定位置插入控件
 </summary>
 <param name="index"></param>
 <param name="value"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.Remove(System.Object)">
 <summary>
 移除控件
 </summary>
 <param name="value"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.Contains(System.Object)">
 <summary>
 判断是否包含控件
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.Clear">
 <summary>
 从集合中移除所有控件。
 </summary>
 <remarks>
 可以使用 Clear 方法从父控件中移除整个控件集合。
 若要从集合中移除单个控件，请使用 Remove 或 RemoveAt 方法。
 若要向集合中添加新的 Control 对象，请使用 Add 或 AddRange 方法。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.IndexOf(System.Object)">
 <summary>
 查找指定控件位置
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponentCollection.Add(System.Object)">
 <summary>
 添加控件
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileComponentCollection.IsReadOnly">
 <summary>
 获取一个值，通过该值指示该控件集合是否为只读。
 </summary>
 <value>如果该控件集合为只读，则为 true；否则为 false。</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileComponentCollection.Item(System.Int32)">
 <summary>
 指示集合中指定索引位置的 MobileComponent。
 </summary>
 <param name="index">要从控件集合中检索的控件索引。</param>
 <value>位于控件集合内指定索引位置的 MobileComponent。</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileComponentCollection.Count">
 <summary>
 获取集合中 Control 对象的总数。
 </summary>
 <value>集合中的 Control 对象总数。</value>
 <remarks>
 Count 属性包含分配给集合的 Control 对象数。可以将 Count 属性值用作循环上限以循环访问集合。
 </remarks>
</member>
<member name="T:Smobiler.Core.Controls.MobileControlCollection">
 <summary>
 控件集合
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.Add(Smobiler.Core.Controls.MobileControl)">
 <summary>
 将控件添加到窗体中。
 </summary>
 <param name="value">要添加到窗体中的 Control。</param>
 <returns></returns>
 <remarks>
 可以使用此方法将控件添加到窗体中。如果要将一组已经创建的控件添加到窗体中，请使用 ControlCollection.AddRange 方法。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.AddRange(Smobiler.Core.Controls.MobileControl[])">
 <summary>
 将控件对象数组添加到集合中。
 </summary>
 <param name="ctls">要添加到集合的 Control 对象的数组。 </param>
 <remarks>
 将 controls 数组中包含的 Control 对象追加到集合的结尾。
 可以使用 AddRange 方法将一组 Control 对象迅速添加到集合，而不是通过使用 Add 方法将每个 Control 手动添加到集合中。
 若要移除以前添加的 Control，请使用 Remove、RemoveAt 或 Clear 方法。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.GetEnumerator">
 <summary>
 返回一个可用于循环访问控件集合的枚举数。
 </summary>
 <returns>一个 IEnumerator 对象，它表示控件集合。</returns>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.Remove(Smobiler.Core.Controls.MobileControl)">
 <summary>
 从窗体中移除控件。
 </summary>
 <param name="value">要从窗体中移除的 MobileControl。</param>
 <remarks>
 可以使用此方法移除窗体中不再需要的控件。如果要在移除某控件后显示它，将需要使用 Add 方法将该控件重新添加到窗体中。若要使控件保留在窗体上但不显示，请使用该控件的 Visible 属性。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.Remove(System.String)">
 <summary>
 从窗体中移除指定名称的控件。
 </summary>
 <param name="name">要从窗体中移除的 MobileControl 名称</param>
 <remarks>
 可以使用此方法移除窗体中不再需要的控件。如果要在移除某控件后显示它，将需要使用 Add 方法将该控件重新添加到窗体中。若要使控件保留在窗体上但不显示，请使用该控件的 Visible 属性。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.Contains(Smobiler.Core.Controls.MobileControl)">
 <summary>
 确定指定控件是否为集合的成员。
 </summary>
 <param name="value">要在集合中定位的 MobileControl。</param>
 <returns>如果 Control 是集合的成员，则为 true；否则为 false。</returns>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.RemoveAt(System.Int32)">
 <summary>
 在指定的索引位置从控件集合移除控件。
 </summary>
 <param name="index">要移除的 Control 的索引值。</param>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.Insert(System.Int32,System.Object)">
 <summary>
 在指定位置插入控件[暂未实现]
 </summary>
 <param name="index"></param>
 <param name="value"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.Remove(System.Object)">
 <summary>
 移除控件
 </summary>
 <param name="value"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.Contains(System.Object)">
 <summary>
 判断是否包含控件
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.Clear">
 <summary>
 从集合中移除所有控件。
 </summary>
 <remarks>
 可以使用 Clear 方法从父控件中移除整个控件集合。
 若要从集合中移除单个控件，请使用 Remove 或 RemoveAt 方法。
 若要向集合中添加新的 Control 对象，请使用 Add 或 AddRange 方法。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.IndexOf(System.Object)">
 <summary>
 查找指定控件位置
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.Add(System.Object)">
 <summary>
 添加控件
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlCollection.IsReadOnly">
 <summary>
 获取一个值，通过该值指示该控件集合是否为只读。
 </summary>
 <value>如果该控件集合为只读，则为 true；否则为 false。</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlCollection.Item(System.Int32)">
 <summary>
 指示集合中指定索引位置的 MobileControl。
 </summary>
 <param name="index">要从控件集合中检索的控件索引。</param>
 <value>位于控件集合内指定索引位置的 MobileControl。</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlCollection.Item(System.String)">
 <summary>
 指示集合中指定名称的 MobileControl。
 </summary>
 <param name="name">要从控件集合中检索的控件名称。</param>
 <returns>位于控件集合内指定名称的 MobileControl。</returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlCollection.Count">
 <summary>
 获取集合中 Control 对象的总数。
 </summary>
 <value>集合中的 Control 对象总数。</value>
 <remarks>
 Count 属性包含分配给集合的 Control 对象数。可以将 Count 属性值用作循环上限以循环访问集合。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlCollection.Find(System.String,System.Boolean)">
 <summary>
 根据控件的 Smobiler.Core.Control.Name 属性搜索控件并返回匹配项。
 </summary>
 <param name="name">控件名称</param>
 <param name="childControl">是否在子控件中查找</param>
 <returns>查找到的控件，若不存在指定控件的名称，返回null</returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ComponentOnResultHandler">
 <summary>
 一个委托，它表示在组件结果回调后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 ComponentResultArgs</param>
</member>
<member name="T:Smobiler.Core.Controls.ComponentResultArgs">
 <summary>
 组件调用结果
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ComponentResultArgs.args">
 <summary>
 获取和设置附加数据
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.ComponentResultArgs.CreateErrorResult``1(System.Int32,System.String,System.Object)">
 <summary>
 创建错误结果
 </summary>
 <typeparam name="T">结果类型</typeparam>
 <param name="errorcode">错误编号</param>
 <param name="errorinfo">错误信息</param>
 <param name="args">附加参数</param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileComponent">
 <summary>
 组件基类
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileComponent.Name">
 <summary>
 获取或设置控件的名称。
 </summary>
 <value>控件的名称。默认值为空字符串 ("")。</value>
 <remarks>
 Name 属性可以在运行时使用，以按名称而不是按类型和编程名称计算对象。由于 Name 属性返回 String 类型，所以可以在 Case 式的逻辑语句中进行计算（在 Visual Basic 中是 Select 语句，在 C# 和 C++ 中是 switch 语句）。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileComponent.Parent">
 <summary>
 获取控件的父控件MobileParentControl。
 </summary>
 <value>一个 MobileParentControl 对象，它表示控件的父控件。</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileComponent.Form">
 <summary>
 获取组件所属窗体
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponent.CallRPC(Smobiler.Core.RPC.RPCResultHandler)">
 <summary>
 调用组件RPC方法
 </summary>
 <param name="rpcHandler">调用结果回调</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponent.CallRPC(Smobiler.Core.RPC.RPCResultHandler,Smobiler.Core.RPC.RPCParameter)">
 <summary>
 调用组件RPC方法
 </summary>
 <param name="rpcHandler">调用结果回调</param>
 <param name="parameter">参数</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileComponent.OnEventRaised(System.Object)">
 <summary>
 事件结果处理
 </summary>
 <param name="params"></param>
</member>
<member name="T:Smobiler.Core.Controls.LayoutPosition">
 <summary>
 布局
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutPosition.Absolute">
 <summary>
 绝对布局
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutPosition.Relative">
 <summary>
 相对布局
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.LayoutOverflow">
 <summary>
 布局覆盖范围
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutOverflow.Hidden">
 <summary>
 隐藏
 </summary>
 <remarks>在相对布局中，如果设置容器的Overflow为Hidden，那么在子控件大小超出容器后，不可见</remarks>
</member>
<member name="F:Smobiler.Core.Controls.LayoutOverflow.Visible">
 <summary>
 可见
 </summary>
 <remarks>在相对布局中，如果设置容器的Overflow为Visible，那么在子控件大小超出容器后，依然可见</remarks>
</member>
<member name="T:Smobiler.Core.Controls.LayoutPercentage">
 <summary>
 布局百分比
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutPercentage.None">
 <summary>
 不启用
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutPercentage.Left">
 <summary>
 左
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutPercentage.Top">
 <summary>
 上
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutPercentage.Right">
 <summary>
 右
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutPercentage.Bottom">
 <summary>
 下
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutPercentage.Width">
 <summary>
 宽度
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutPercentage.Height">
 <summary>
 高度
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutPercentage.Padding">
 <summary>
 内边距
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutPercentage.Margin">
 <summary>
 外边距
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.LayoutItemAlign">
 <summary>
 侧轴元素对齐方式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutItemAlign.FlexStart">
 <summary>
 元素在侧轴的起始位置靠齐
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutItemAlign.FlexEnd">
 <summary>
 元素在侧轴的结束位置靠齐
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutItemAlign.Center">
 <summary>
 元素在侧轴的中间位置靠齐
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutItemAlign.Stretch">
 <summary>
 元素在侧轴方向被拉伸到与容器相同的高度或宽度
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.LayoutJustifyAlign">
 <summary>
 主轴元素对齐方式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutJustifyAlign.FlexStart">
 <summary>
 元素在主轴的起始位置靠齐
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutJustifyAlign.FlexEnd">
 <summary>
 元素在主轴的结束位置靠齐
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutJustifyAlign.Center">
 <summary>
 元素在主轴的中间位置靠齐
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutJustifyAlign.SpaceBetween">
 <summary>
 元素平均地分布在主轴中。第一个伸缩项目一行中的最开始位置，最后一个伸缩项目在一行中最终点位置。
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutJustifyAlign.SpaceAround">
 <summary>
 元素平均地分布在主轴中。两端保留一半的空间。
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.LayoutSelfAlign">
 <summary>
 覆盖容器定义的侧轴对齐方式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutSelfAlign.Auto">
 <summary>
 元素跟随容器的对齐方式。
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutSelfAlign.FlexStart">
 <summary>
 元素向侧轴起点对齐
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutSelfAlign.FlexEnd">
 <summary>
 元素向侧轴终点对齐
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutSelfAlign.Center">
 <summary>
 元素在侧轴居中, 如果控件在侧轴上的高度高于其容器，那么在两个方向上溢出距离相同
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutSelfAlign.Stretch">
 <summary>
 元素在侧轴方向被拉伸到与容器相同的高度或宽度
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.LayoutWrap">
 <summary>
 布局换行
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutWrap.Wrap">
 <summary>
 容器控件中的子控件如果超出容器空间时，换行
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutWrap.NoWrap">
 <summary>
 容器控件中的子控件如果超出容器空间时，不换行
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.LayoutDirection">
 <summary>
 主轴方向
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutDirection.Row">
 <summary>
 水平
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.LayoutDirection.Column">
 <summary>
 垂直
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.DialogAnimationType">
 <summary>
 弹出动画样式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.DialogAnimationType.None">
 <summary>
 无动画
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.DialogAnimationType.Fade">
 <summary>
 淡出
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.DialogAnimationType.Slide">
 <summary>
 从边缘显现
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.DatePickerMode">
 <summary>
 日期/时间选择控件显示模式
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.DatePickerMode.Time">
 <summary>
 仅时间
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.DatePickerMode.Date">
 <summary>
 仅日期
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.DatePickerMode.DateTime">
 <summary>
 日期和日期
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.KeyboardType">
 <summary>
 文本框键盘样式
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.KeyboardType.Default">
 <summary>
 系统默认
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.KeyboardType.EmailAddress">
 <summary>
 电子邮箱
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.KeyboardType.Numeric">
 <summary>
 数字
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.KeyboardType.PhonePad">
 <summary>
 拨号
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ReturnKeyType">
 <summary>
 确定返回键的外观
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ReturnKeyType.Default">
 <summary>
 输入法默认
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ReturnKeyType.Done">
 <summary>
 完成
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ReturnKeyType.Go">
 <summary>
 跳转
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ReturnKeyType.Next">
 <summary>
 下一个
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ReturnKeyType.Search">
 <summary>
 搜索
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ReturnKeyType.Send">
 <summary>
 发送
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.BinarySaveModes">
 <summary>
 图像保存模式
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.BinarySaveModes.Online">
 <summary>
 在线
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.BinarySaveModes.Offline">
 <summary>
 离线
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.BinarySaveModes.Path">
 <summary>
 路径
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ImageSizeMode">
 <summary>
 图像显示样式
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ImageSizeMode.Default">
 <summary>
 图像不会放大. 如果大于视图面积, 那么会缩小图像, 使其完全可见.
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ImageSizeMode.Cover">
 <summary>
 在保持图片宽高比的前提下缩放图片，直到宽度和高度都大于等于容器视图的尺寸.
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ImageSizeMode.Zoom">
 <summary>
 在保持图片宽高比的前提下缩放图片，直到宽度和高度都小于等于容器视图的尺寸.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ImageSizeMode.Stretch">
 <summary>
 拉伸图片且不维持宽高比，直到宽高都刚好填满容器.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.StreamingType">
 <summary>
 流媒体类型
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.StreamingType.Media">
 <summary>
 点播
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.StreamingType.Live">
 <summary>
 直播
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.KeyCode">
 <summary>
 客户端实体按键
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.KeyCode.Back">
 <summary>
 后退
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.KeyCode.Menu">
 <summary>
 菜单
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.MessageBoxButtons">
 <summary>
 指定若干常数，用以定义 MessageBox 上将显示哪些按钮
 </summary>
 <remarks>
 MessageBox 类使用此枚举。
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.MessageBoxButtons.AbortRetryIgnore">
 <summary>
 该消息框包含“中止”、“重试”和“忽略”按钮。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.MessageBoxButtons.OK">
 <summary>
 该消息框包含“确定”按钮。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.MessageBoxButtons.OKCancel">
 <summary>
 该消息框包含“确定”和“取消”按钮。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.MessageBoxButtons.RetryCancel">
 <summary>
 该消息框包含“重试”和“取消”按钮。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.MessageBoxButtons.YesNo">
 <summary>
 该消息框包含“是”和“否”按钮。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.MessageBoxButtons.YesNoCancel">
 <summary>
 该消息框包含“是”、“否”和“取消”按钮。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="T:Smobiler.Core.Controls.ShowResult">
 <summary>
 指定标识符以指示的返回值。
 </summary>
 <remarks>
 MessageBox.ShowResult 属性和 Form.ShowResult 方法使用此枚举。
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.ShowResult.Abort">
 <summary>
 返回值是 Abort（通常由标签为“中止”的按钮发送）。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.ShowResult.Cancel">
 <summary>
 返回值是 Cancel（通常由标签为“取消”的按钮发送）。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.ShowResult.Ignore">
 <summary>
 返回值是 Ignore（通常由标签为“忽略”的按钮发送）。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.ShowResult.No">
 <summary>
 返回值是 No（通常由标签为“否”的按钮发送）。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.ShowResult.None">
 <summary>
 返回了 Nothing。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.ShowResult.OK">
 <summary>
 返回值是 OK（通常由标签为“确定”的按钮发送）。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.ShowResult.Retry">
 <summary>
 返回值是 Retry（通常由标签为“重试”的按钮发送）。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="F:Smobiler.Core.Controls.ShowResult.Yes">
 <summary>
 返回值是 Yes（通常由标签为“是”的按钮发送）。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="T:Smobiler.Core.Controls.HorizontalAlignment">
 <summary>
 水平方面
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.HorizontalAlignment.Left">
 <summary>
 左
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.HorizontalAlignment.Center">
 <summary>
 中
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.HorizontalAlignment.Right">
 <summary>
 右
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.HorizontalAlignment.Justify">
 <summary>
 两端对齐
 </summary>
 <remarks>仅支持Label控件</remarks>
</member>
<member name="T:Smobiler.Core.Controls.VerticalAlignment">
 <summary>
 垂直方向
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.VerticalAlignment.Top">
 <summary>
 上
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.VerticalAlignment.Center">
 <summary>
 中
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.VerticalAlignment.Bottom">
 <summary>
 下
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.BorderStyle">
 <summary>
 边框样式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.BorderStyle.Solid">
 <summary>
 实线
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.BorderStyle.Dotted">
 <summary>
 点状线
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.BorderStyle.Dashed">
 <summary>
 虚线
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ResourceMode">
 <summary>
 资源类型
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ResourceMode.File">
 <summary>
 服务端资源文件
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ResourceMode.Customize">
 <summary>
 自定义，继承自CustomizeResource
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ResourceMode.Client">
 <summary>
 客户端资源
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ResourceMode.Data">
 <summary>
 服务端资源数据（二进制）
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ResourceType">
 <summary>
 资源类型
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ResourceType.None">
 <summary>
 None
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ResourceType.Image">
 <summary>
 图像
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ResourceType.Audio">
 <summary>
 音频
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ResourceType.Document">
 <summary>
 文档
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ResourceType.ImageThumb">
 <summary>
 缩微图像
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ResourceType.Media">
 <summary>
 媒体
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.PointerEventType">
 <summary>
 控制当前组件是否可以作为触控事件的目标
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.PointerEventType.None">
 <summary>
 发生在本组件与本组件的子组件上的触摸事件都会交给本组件的父组件处理
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.PointerEventType.Auto">
 <summary>
 根据不同组件自动处理
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.PointerEventType.BoxNone">
 <summary>
 发生在本组件显示范围内（但不是子组件显示范围内）的事件交给本组件,在子组件显示范围内交给子组件处理
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.PointerEventType.BoxOnly">
 <summary>
 发生在本组件显示范围内的触摸事件将全部由本组件处理（即使触摸事件发生在本组件的子组件显示范围内）
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ControlUpdatedEventHandler">
 <summary>
 一个委托，它表示在控件属性更新时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 ControlUpdatedEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.FormUpdatedEventHandler">
 <summary>
 一个委托，它表示在窗体属性更新时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 FormUpdatedEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ControlEventRaisedEventHandler">
 <summary>
 一个委托，它表示在控件事件触发时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 ControlEventRaisedEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ControlUpdatedEventArgs">
 <summary>
 包含控件更新信息的事件数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ControlUpdatedEventArgs.Properites">
 <summary>
 获取和设置控件更新属性集合
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ControlUpdatedEventArgs.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
 <summary>
 构造函数
 </summary>
 <param name="props">控件更新属性集合</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.FormUpdatedEventArgs">
 <summary>
 包含窗体属性更新的事件数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.FormUpdatedEventArgs.Properites">
 <summary>
 获取和设置窗体更新数据的属性集合
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.FormUpdatedEventArgs.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
 <summary>
 构造函数
 </summary>
 <param name="props">控件更新数据属性集合</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ControlEventRaisedEventArgs">
 <summary>
 包含控件数据的事件数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ControlEventRaisedEventArgs.EventType">
 <summary>
 事件类型
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ControlEventRaisedEventArgs.EventParams">
 <summary>
 事件参数
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ControlEventRaisedEventArgs.#ctor(System.String,System.String)">
 <summary>
 构造函数
 </summary>
 <param name="type">事件类型</param>
 <param name="params">事件参数</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.KeyDownEventHandler">
 <summary>
 一个委托，它表示在客户端点击实体按键时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 e</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.KeyDownEventArgs">
 <summary>
 包含客户端点击实体按键的事件数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.KeyDownEventArgs.KeyCode">
 <summary>
 获取KeyCode
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ActionButtonPressEventHandler">
 <summary>
 一个委托，它表示在ActionButton元素被点击时需要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 e</param>
</member>
<member name="T:Smobiler.Core.Controls.ActionButtonPressEventArgs">
 <summary>
 为 ActionButtonItemPress 提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonPressEventArgs.Index">
 <summary>
 获取ActionButtonItemPress事件中点击的Item的索引
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.FormRedirectCallBackEventHandler">
 <summary>
 一个委托，它表示在打开给定的窗体，并在给定的窗体关闭后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="args">包含事件数据的 args</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.MessageBoxHandler">
 <summary>
 一个委托，它表示在提示框点击时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="args">包含事件数据的 MessageBoxHandlerArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.MobileHandlerArgs">
 <summary>
 HandlerArgs基类
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileHandlerArgs.Args">
 <summary>
 获取委托或事件中的可选参数
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.MessageBoxHandlerArgs">
 <summary>
 为MessageBoxHandler提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MessageBoxHandlerArgs.Result">
 <summary>
 获取消息框按钮点击结果
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileDialogControl.AnimationType">
 <summary>
 获取和设置弹出动画样式。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileDialogControl.Transparent">
 <summary>
 获取和设置一个值，该值指示是否弹出框透明。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileModalControl.AnimationType">
 <summary>
 获取和设置弹出动画样式。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileModalControl.Transparent">
 <summary>
 获取和设置一个值，该值指示是否弹出框透明。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.IMobileBindableControl">
 <summary>
 数据绑定控件接口
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.IMobileBindableControl.DataMember">
 <summary>
 获取和设置值绑定字段。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.IMobileBindableControl.DisplayMember">
 <summary>
 获取和设置显示绑定字段。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.IMobileBindableControl.DisplayFormat">
 <summary>
 获取和设置根据 DisplayMember 做数据绑定时的格式。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.IMobileBindableControl.BindDataValue">
 <summary>
 获取和设置一个值，该值用于指定根据 DataMember 做数据绑定时的值。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.IMobileBindableControl.BindDisplayValue">
 <summary>
 获取和设置一个值，该值用于指定根据 DisplayMember 做数据绑定时的值。
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.IMobileBindableControl.BindData(System.Object)">
 <summary>
 数据绑定
 </summary>
 <param name="data">绑定的数据</param>
 <returns>返回一个值，该值指示是否已经对data进行了绑定，如果返回True，调用此方法的数据绑定操作不再对data进行处理，否则进行处理。</returns>
</member>
<member name="T:Smobiler.Core.Controls.IMobileDataBindableControl">
 <summary>
 实现绑定模式的绑定控件
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.IMobileDataBindableControl.BindMode">
 <summary>
 获取和设置数据的绑定模式
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.IMobileDataBindControl">
 <summary>
 数据绑定控件接口
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.IMobileDataBindControl.DataMember">
 <summary>
 获取和设置数据源名称
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.IMobileDataBindControl.DataSource">
 <summary>
 获取和设置数据源
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.IMobileDataBindControl.BindMode">
 <summary>
 获取和设置绑定模式
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.IMobileDataBindControl.DataBind(System.Object[])">
 <summary>
 数据绑定
 </summary>
 <param name="params">数据绑定参数</param>
</member>
<member name="M:Smobiler.Core.Controls.IMobileDataBindControl.OnDataSourceUpdate(Smobiler.Core.Controls.DataSourceUpdateEventArgs)">
 <summary>
 触发数据源更新
 </summary>
 <param name="e">为数据源更新提供数据</param>
</member>
<member name="T:Smobiler.Core.Controls.DataBindMode">
 <summary>
 数据绑定模式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.DataBindMode.BindOnly">
 <summary>
 仅执行绑定但不更新数据源
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.DataBindMode.BindUpdate">
 <summary>
 执行绑定并更新到数据源
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.IMobileResourceControl">
 <summary>
 资源控件
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.IMobileResourceControl.ResourceID">
 <summary>
 获取和设置资源编号
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.IMobileResourceControl.ResourcePath">
 <summary>
 获取和设置资源路径
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.IMobileResourceControl.ResourceMode">
 <summary>
 获取和设置资源类型
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.IMobileResourceControl.ResourceContentType">
 <summary>
 获取和设置资源Content-Type(Mime-Type)
 </summary>
 <returns></returns>
 <remarks>
 为空时，如果Resource为文件类型，会从文件类型中获取Content-Type
 如果是二进制类型时，会统一为application/octet-stream
 </remarks>
</member>
<member name="T:Smobiler.Core.Controls.IMobileResourceDataControl">
 <summary>
 资源数据控件
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.IMobileResourceDataControl.ResourceData">
 <summary>
 获取和设置资源数据
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.IRenderControl">
 <summary>
 IRenderControl
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.IRenderControl.RenderTypeName">
 <summary>
 获取RenderType类型
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileBindableControl">
 <summary>
 数据绑定控件
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileBindableControl.BindDataValue">
 <summary>
 获取和设置一个值，该值用于指定根据 DataMember 做数据绑定时的值。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileBindableControl.BindDisplayValue">
 <summary>
 获取和设置一个值，该值用于指定根据 DisplayMember 做数据绑定时的值。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileBindableControl.DisplayFormat">
 <summary>
 获取和设置根据 DisplayMember 做数据绑定时的格式。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileBindableControl.DataMember">
 <summary>
 获取和设置值绑定字段。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileBindableControl.DisplayMember">
 <summary>
 获取和设置显示绑定字段。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileBindableControl.BindDisplayValueGone">
 <summary>
 获取和设置一个值，该值指示是否根据BindDisplayValue的值判断是否隐藏显示
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileBindableControl.BindMode">
 <summary>
 获取绑定模式
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileBindableControl.BindData(System.Object)">
 <summary>
 数据绑定
 </summary>
 <param name="data">绑定的数据</param>
 <returns>返回一个值，该值指示是否已经对data进行了绑定，如果返回True，调用此方法的数据绑定操作不再对data进行处理，否则进行处理。</returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileBindableControl.SharedBindData(System.Object,Smobiler.Core.Controls.IMobileBindableControl)">
 <summary>
 数据绑定
 </summary>
 <param name="data">绑定的数据</param>
 <param name="ctl">绑定的控件</param>
</member>
<member name="T:Smobiler.Core.Controls.MobileContainerControl">
 <summary>
 容器控件
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileContainerControl.Controls">
 <summary>
 获取包含在控件内的控件的集合。
 </summary>
 <value>一个 MobileControlCollection，它表示控件内包含的控件的集合。</value>
 <remarks>
 </remarks>
</member>
<member name="T:Smobiler.Core.Controls.MobileControl">
 <summary>
 控件
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Dock">
 <summary>
 设置和获取控件停靠的位置和方式
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Left">
 <summary>
 获取或设置控件距离容器控件左边缘的 x 坐标。
 </summary>
 <value>控件的左边缘的 x 坐标。</value>
 <remarks>
 Left 属性值等效于控件的 Location 属性值的 Point.X 属性。
 对 Width 和 Left 属性值所做的更改导致该控件的 Right 属性值更改。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Top">
 <summary>
 获取或设置控件的上边缘的 y 坐标。
 </summary>
 <value>控件的上边缘的 y 坐标。</value>
 <remarks>
 Top 属性值等效于控件的 Location 属性值的 Point.Y 属性。
 对 Height 和 Top 属性值所做的更改导致该控件的 Bottom 属性值更改。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Right">
 <summary>
 获取和设置控件右边缘距离父控件的距离。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Bottom">
 <summary>
 获取和设置控件下边缘距离父控件的距离。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Location">
 <summary>
 获取或设置该控件的左上角相对于其容器的左上角的坐标。
 </summary>
 <value>Point，它表示控件的左上角相对于其容器的左上角。</value>
 <remarks>
 由于 Point 类是值类型（在 Visual Basic 中是 Structure，在 C# 中是 struct），它按传值方式返回，意思是说访问该属性返回控件的左上点的副本。因此，调整从该属性返回的 Point 对象的 X 或 Y 属性将不影响控件的 Left、Right、Top 或 Bottom 属性值。若要调整这些属性，请分别设置每个属性值，或用新的 Point 对象设置 Location 属性。
 如果 Control 是 Form，那么 Location 属性值表示 Form 的左上角（以屏幕坐标表示）。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Bounds">
 <summary>
 获取或设置控件（包括其非工作区元素）的大小和位置。
 </summary>
 <value>一个 Rectangle，它表示控件（包括其非工作区元素）的大小和位置。</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Height">
 <summary>
 获取或设置控件的高度。
 </summary>
 <value>控件的高度（以像素为单位）。</value>
 <remarks>
 对 Height 和 Top 属性值所做的更改导致该控件的 Bottom 属性值更改。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Width">
 <summary>
 获取或设置控件的宽度。
 </summary>
 <value>控件的宽度。</value>
 <remarks>
 对 Width 和 Left 属性值所做的更改导致该控件的 Right 属性值更改。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Size">
 <summary>
 获取或设置控件的高度和宽度。
 </summary>
 <value>Size 对象，它表示控件的高度和宽度。</value>
 <remarks>
 由于 Size 类是值类型（在 Visual Basic 中是 Structure，在 C# 中是 struct），它按传值方式返回，意思是说访问该属性返回控件的大小的副本。因此，调整从该属性返回的 Size 对象的 Width 或 Height 属性将不影响控件的 Width 或 Height。若要调整控件的 Width 或 Height，必须设置控件的 Width 或 Height 属性，或用新的 Size 对象设置 Size 属性。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.MaxHeightRate">
 <summary>
 获取和设置控件最大高度比例
 </summary>
 <value>0到100区间</value>
 <remarks>设置为0取消当前设置</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.MinHeightRate">
 <summary>
 获取和设置控件最小高度比例
 </summary>
 <value>0到100区间</value>
 <remarks>设置为0取消当前设置</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.LayoutPercentage">
 <summary>
 获取和设置布局百分比
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.BackColor">
 <summary>
 获取或设置控件的背景色。
 </summary>
 <value>表示控件背景色的 Color。</value>
 <remarks>
 BackColor 属性为环境属性。环境属性是一种控件属性，如果不设置，就会从父控件中检索该属性。
 例如，默认情况下，Button 与其父级 Form 一样具有相同的 BackColor。。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.TabIndex">
 <summary>
 获取或设置在控件的容器的控件的 Tab 键顺序。
 </summary>
 <value>控件在其容器的按 Tab 键顺序包括的控件集内的索引值。</value>
 <remarks>
 Tab 索引可由任何大于等于零的有效整数组成，越小的数字在 Tab 键顺序中越靠前。
 为了按 Tab 键顺序包括控件，其 TabStop 属性必须设置为 true。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControl.ShouldSerializeTabIndex">
 <summary>
 由于历史原因，不能直接删除TabIndex，所以这里永远不初始化TabIndex
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.ZIndex">
 <summary>
 获取和设置一个值，该值表示在Z轴上的显示顺序。
 </summary>
 <value>表示在Z轴上的显示顺序的 Int</value>
 <returns></returns>
 <remarks>
 Z 索引可由任何大于等于零的有效整数组成，在重叠的控件中，Z轴顺序越大，显示越靠前。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Padding">
 <summary>
 获取或设置控件边框与边框内控件间隔距离
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Margin">
 <summary>
 获取或设置控件边框与边框外控件间隔距离
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Border">
 <summary>
 获取或设置控件边框
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.BorderColor">
 <summary>
 获取或设置控件边框颜色
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.BorderRadius">
 <summary>
 获取和设置控件边框角度
 </summary>
 <value>表示控件边框角度的 int</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.BorderStyle">
 <summary>
 获取和设置控件边框线样式
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Visible">
 <summary>
 获取或设置一个值，该值指示是否显示该控件。
 </summary>
 <value>如果显示该控件，则为 true，否则为 false。默认为 true。</value>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.SelfAlign">
 <summary>
 获取和设置一个值，该值代表覆盖容器侧轴的对齐方式。
 </summary>
 <returns></returns>
 <remarks></remarks> 
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Position">
 <summary>
 获取和设置布局
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.SelfLayout">
 <summary>
 获取和设置控件自身布局。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControl.Flex">
 <summary>
 获取和设置一个值，该值代表FlexGrow和FlexShrink的组合。
 </summary>
 <value>正整数</value>
 <remarks>
 Flex > 1 : 比例因子
 flex = 0 : 根据控件自身的Width和Height确定Size
 </remarks>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileControlBase">
 <summary>
 控件基类
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.Client">
 <summary>
 获取客户端变量
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.RenderListID">
 <summary>
 由于在List或Grid中，由于数据中的ID必须和模板中的ID一致。所以这里用于保存当前模板中的RenderID
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.RenderListNestID">
 <summary>
 解决在嵌套时，前面的ID
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.InvokeRequired">
 <summary>
 获取一个值，该值指示在更新UI属性时，是否使用使用UI线程委托。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.Parent">
 <summary>
 获取或设置控件的父控件MobileContainerControl。
 </summary>
 <value>一个 MobileContainerControl 对象，它表示控件的父控件。</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.Owner">
 <summary>
 获取或设置控件的布局控件MobileLayoutControl。
 </summary>
 <value>一个 MobileLayoutControl 对象，它表示控件的父控件。</value>
 <remarks>在使用MobileLayoutControl作为父控件时，子控件必须使用Owner才能获取到父控件</remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.ParentInternal">
 <summary>
 由于允许MobileControlCollection的Owner为MobileLayoutControl，所以内部一定要使用ParentInternal，外部才使用Parent
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.Form">
 <summary>
 获取控件所属的窗体
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.IsLoaded">
 <summary>
 获取一个值，该值表示当前窗口 MobileForm 是否已经载入。
 </summary>
 <value>true,代表已经载入,false代表未载入</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.IsRender">
 <summary>
 获取一个值，该值指示当前控件是否已经绘制
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.CanRaiseEvent">
 <summary>
 这个属性主要用于在MobileClient中是不是要处理控件的OnEvent
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.Name">
 <summary>
 获取或设置控件的名称。
 </summary>
 <value>控件的名称。默认值为空字符串 ("")。</value>
 <remarks>
 Name 属性可以在运行时使用，以按名称而不是按类型和编程名称计算对象。由于 Name 属性返回 String 类型，所以可以在 Case 式的逻辑语句中进行计算（在 Visual Basic 中是 Select 语句，在 C# 和 C++ 中是 switch 语句）。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.Tag">
 <summary>
 获取或设置包含有关控件的数据的对象。
 </summary>
 <value>一个 Object，它包含有关控件的数据。默认为空引用（Visual Basic 中为 Nothing）。</value>
 <remarks>
 从 Object 类派生的任何类型都可以分配给该属性。
 Tag为弱引用 WeakReference
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileControlBase.DesignStyle">
 <summary>
 获取和设置包括有关控件的样式
 </summary>
 <value>一个 String，它包含有关控件的样式。默认为空。</value>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.SetSessionInfo(System.String)">
 <summary>
 此方法主要给Form在显示时，设置SessionID
 </summary>
 <param name="sessionid"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.OnPropertyChanged(System.Object,Smobiler.Core.Controls.MobilePropertyChangedEventArgs)">
 <summary>
 此方法用于MobileProperty的PropertyChanged事件的处理
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.OnPropertyChangedRenderCheck(Smobiler.Core.Controls.MobilePropertyChangedEventArgs)">
 <summary>
 这里主要用于判断在属性改变时，是否需要触发Render，由于判断了ParentInternal是否为空，所以会导致Form不发送协议，所以Form会重写此方法
 </summary>
 <param name="e"></param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.GetPropertyInitialValue(System.String)">
 <summary>
 根据属性名称获取STML协议中的属性默认值
 </summary>
 <param name="propName"></param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.SetPropertyValue(System.String,System.Object,System.Boolean)">
 <summary>
 返回是否和上次的结果有差异
 </summary>
 <param name="propName"></param>
 <param name="newValue"></param>
 <remarks>
 由于newValue是Object类型，所以对基础类型到Object会产生装箱操作
 但是由于后面全部都是Object类型，所以仅会在这里进行装箱操作一次
 使用不同类型的重载，并不能解决问题，由于在MobileProperty的SetValue时也是Object，所以这是无意义的
 同时在Render时的字典也是Object，所以始终都会产生装箱操作
 </remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileControlBase.PropertyChanged">
 <summary>
 Occurs when a property value changes
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.AfterLoad">
 <summary>
 在控件载入后被调用
 </summary>
 <remarks>请注意，此方法会被多次调用，在窗体第一次载入时会被调用，在窗体恢复时会被调用，在窗体载入后添加控件时会被调用</remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.CreateRenderProperties(Smobiler.Core.Controls.MobileControl)">
 <summary>
 请注意，templateControl主要是用来给基于ListView的控件来判断是否需要发送的判断。
 </summary>
 <param name="templateControl"></param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.CreateListRenderData(System.String,Smobiler.Core.Controls.MobileControl)">
 <summary>
 用于在List中获取数据，由于List中存在Cell，所以只需要组合数据即可
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.PropertyRenderUpdate(Smobiler.Core.Controls.MobileProperty)">
 <summary>
 更新控件属性协议
 </summary>
 <param name="prop">控件属性</param>
 <remarks>此方法会忽略控件属性是否已修改，用于强制控件属性值的协议发送</remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.CallControlRPCInternal(System.String,System.Object,Smobiler.Core.RPC.RPCResultHandler,System.Delegate)">
 <summary>
 这是没有回调的RPC调用。可以指定Type的。
 </summary>
 <param name="RPCType"></param>
 <param name="RPCData"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.Render(Smobiler.Core.Protocol.STMLRenderEntity)">
 <summary>
 新的Render，新的Render不再使用字符串的模式，而是使用发送对象的模式
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.GetRelativeScreenSize(System.Single,System.Boolean)">
 <summary>
 获取相对屏幕大小
 </summary>
 <param name="sizeValue">值</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileControlBase.ConvertToFormScreenSize(System.Single)">
 <summary>
 转化为当前窗体的大小
 </summary>
 <param name="sizeValue"></param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileLayoutControl">
 <summary>
 布局控件
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileLayoutControl.Layout">
 <summary>
 获取和设置布局
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileLayoutControl.ItemAlign">
 <summary>
 获取和设置布局控件内元素在侧轴上的对齐方式。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileLayoutControl.JustifyAlign">
 <summary>
 获取和设置布局控件内元素在主轴上的对齐方式。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileLayoutControl.Wrap">
 <summary>
 获取和设置子控件如果超出容器空间时，是否换行。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileLayoutControl.Direction">
 <summary>
 获取和设置容器主轴方向。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileLayoutControl.Overflow">
 <summary>
 获取和设置容器布局覆盖范围
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileLayoutControl.PointerEvent">
 <summary>
 获取和设置控制当前组件是否可以作为触控事件的目标
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileLayoutControl.RegisterControls(Smobiler.Core.Controls.MobileControlCollection)">
 <summary>
 注册控件集合
 </summary>
 <param name="controls"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileLayoutControl.ShowModal(Smobiler.Core.Controls.MobileUserControl)">
 <summary>
 弹出用户控件界面
 </summary>
 <param name="control">用户控件</param>
 <remarks>
 ShowModal一次仅能显示一个用户控件界面，并不能叠加显示，如果需要叠加显示，请使用ShowDialog方法
 默认的DialogOptions为：
 JustifyAlign = Center,
 Padding = 20,
 BackColor = 200,128,128,128,
 AnimationType = None,
 TouchClosed = true
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileLayoutControl.ShowModal(Smobiler.Core.Controls.MobileUserControl,Smobiler.Core.Controls.DialogOptions)">
 <summary>
 弹出用户控件界面
 </summary>
 <param name="control">用户控件</param>
 <param name="options">弹出框设置</param>
 <remarks>
 ShowModal一次仅能显示一个用户控件界面，并不能叠加显示，如果需要叠加显示，请使用ShowDialog方法
 默认的DialogOptions为：
 JustifyAlign = Center,
 Padding = 20,
 BackColor = 200,128,128,128,
 AnimationType = None,
 TouchClosed = true
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileLayoutControl.ShowDialog(Smobiler.Core.Controls.MobileUserControl,System.EventHandler)">
 <summary>
 弹出用户控件界面
 </summary>
 <param name="control">用户控件</param>
 <remarks>
 在不再使用弹出用户控件界面时，使用DestroyDialog方法销毁，否则会常驻客户端内存
 默认的DialogOptions为：
 JustifyAlign = Center,
 Padding = 20,
 BackColor = 200,128,128,128,
 AnimationType = None,
 TouchClosed = true
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileLayoutControl.ShowDialog(Smobiler.Core.Controls.MobileUserControl,Smobiler.Core.Controls.DialogOptions,System.EventHandler)">
 <summary>
 弹出用户控件界面
 </summary>
 <param name="control">用户控件</param>
 <param name="options">弹出框设置</param>
 <remarks>
 在不再使用弹出用户控件界面时，使用DestroyDialog方法销毁，否则会常驻客户端内存
 默认的DialogOptions为：
 JustifyAlign = Center,
 Padding = 20,
 BackColor = 200,128,128,128,
 AnimationType = None,
 TouchClosed = true
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileLayoutControl.DestroyDialog(Smobiler.Core.Controls.MobileUserControl)">
 <summary>
 销毁弹出用户控件界面
 </summary>
 <param name="control">用户控件</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileLayoutControl.ShowContextDialog(Smobiler.Core.Controls.MobileUserControl)">
 <summary>
 弹出上下文用户控件界面
 </summary>
 <param name="control">用户控件</param>
</member>
<member name="T:Smobiler.Core.Controls.DialogOptions">
 <summary>
 Dialog配置项
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.DialogOptions.#ctor">
 <summary>
 初始化一个类型为 <see cref="T:Smobiler.Core.Controls.DialogOptions"/> 的实例。
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.DialogOptions.#ctor(Smobiler.Core.Controls.LayoutJustifyAlign)">
 <summary>
 初始化一个类型为 <see cref="T:Smobiler.Core.Controls.DialogOptions"/> 的实例.
 </summary>
 <param name="justifyAlign">主轴对齐方向</param>
</member>
<member name="M:Smobiler.Core.Controls.DialogOptions.#ctor(Smobiler.Core.Controls.LayoutJustifyAlign,System.Drawing.Color)">
 <summary>
 初始化一个类型为 <see cref="T:Smobiler.Core.Controls.DialogOptions"/> 的实例.
 </summary>
 <param name="justifyAlign">主轴对齐方向</param>
 <param name="backColor">背景色</param>
</member>
<member name="M:Smobiler.Core.Controls.DialogOptions.#ctor(Smobiler.Core.Controls.LayoutJustifyAlign,System.Drawing.Color,Smobiler.Core.Controls.Padding)">
 <summary>
 初始化一个类型为 <see cref="T:Smobiler.Core.Controls.DialogOptions"/> 的实例。
 </summary>
 <param name="justifyAlign">主轴对齐方向</param>
 <param name="backColor">背景色</param>
 <param name="padding">控件内边距</param>
</member>
<member name="M:Smobiler.Core.Controls.DialogOptions.#ctor(Smobiler.Core.Controls.LayoutJustifyAlign,System.Drawing.Color,Smobiler.Core.Controls.Padding,System.Boolean)">
 <summary>
 初始化一个类型为 <see cref="T:Smobiler.Core.Controls.DialogOptions"/> 的实例.
 </summary>
 <param name="justifyAlign">主轴对齐方向</param>
 <param name="backColor">背景色</param>
 <param name="padding">控件内边距</param>
 <param name="touchClosed">当设置为 <c>true</c> 时，点击空白区域关闭Dailog</param>
</member>
<member name="M:Smobiler.Core.Controls.DialogOptions.#ctor(Smobiler.Core.Controls.LayoutJustifyAlign,System.Drawing.Color,Smobiler.Core.Controls.Padding,System.Boolean,Smobiler.Core.Controls.DialogAnimationType)">
 <summary>
 初始化一个类型为 <see cref="T:Smobiler.Core.Controls.DialogOptions"/> 的实例.
 </summary>
 <param name="justifyAlign">主轴对齐方向</param>
 <param name="backColor">背景色</param>
 <param name="padding">控件内边距</param>
 <param name="touchClosed">当设置为 <c>true</c> 时，点击空白区域关闭Dailog</param>
 <param name="animationType">弹出动画样式</param>
</member>
<member name="P:Smobiler.Core.Controls.DialogOptions.JustifyAlign">
 <summary>
 获取和设置主轴对齐方向
 </summary>
 <value>The justify align.</value>
</member>
<member name="P:Smobiler.Core.Controls.DialogOptions.BackColor">
 <summary>
 获取和设置背景色。
 </summary>
 <value></value>
</member>
<member name="P:Smobiler.Core.Controls.DialogOptions.Padding">
 <summary>
 获取和设置控件内边距。
 </summary>
 <value>The padding.</value>
</member>
<member name="P:Smobiler.Core.Controls.DialogOptions.TouchClosed">
 <summary>
 获取和设置一个值，该值指示是否点击空白区域时关闭Dialog。
 </summary>
 <value><c>true</c> 点击空白区域关闭Dialog; 否则, <c>false</c>.</value>
</member>
<member name="P:Smobiler.Core.Controls.DialogOptions.AnimationType">
 <summary>
 获取和设置弹出动画样式
 </summary>
 <value></value>
</member>
<member name="T:Smobiler.Core.Controls.MobileNativeContainerControl">
 <summary>
 原生容器控件
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeContainerControl.RegisterProperty(Smobiler.Core.Controls.MobileProperty)">
 <summary>
 注册属性
 </summary>
 <param name="prop"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeContainerControl.RegisterProperties(Smobiler.Core.Controls.MobileProperty[])">
 <summary>
 注册属性
 </summary>
 <param name="props"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeContainerControl.CallRPC">
 <summary>
 调用无参数，无回调的RPC
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeContainerControl.CallRPC(System.Object)">
 <summary>
 调用不包含回调，包含参数的RPC
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeContainerControl.CallRPC(Smobiler.Core.RPC.RPCResultHandler)">
 <summary>
 调用包含回调，不包含参数的RPC
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeContainerControl.CallRPC(Smobiler.Core.RPC.RPCResultHandler,System.Object)">
 <summary>
 调用包含回调和参数的RPC
 </summary>
 <param name="params">参数</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeContainerControl.CallSelfRPC(Smobiler.Core.RPC.RPCResultHandler,System.Object)">
 <summary>
 调用控件RPC
 </summary>
 <param name="rpcHandler">RCP结果回调</param>
 <param name="params">参数</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeContainerControl.OnEventRaised(System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 RPC调用结果处理
 </summary>
 <param name="params"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeContainerControl.BeforePaintDesign(System.Object,Smobiler.Core.Controls.OnPaintDesignArgs)">
 <summary>
 在设计时绘制控件
 </summary>
 <returns>返回一个值，该值指示是否终止设计器继续绘制控件，True，继续绘制，False不继续绘制</returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeContainerControl.OnPaintDesign(System.Object,Smobiler.Core.Controls.OnPaintDesignArgs)">
 <summary>
 在设计时绘制控件
 </summary>
 <returns>返回一个值，该值指示是否终止设计器继续绘制控件，True，继续绘制，False不继续绘制</returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileNativeControl">
 <summary>
 原生控件
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeControl.RegisterProperty(Smobiler.Core.Controls.MobileProperty)">
 <summary>
 注册属性
 </summary>
 <param name="prop"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeControl.RegisterProperties(Smobiler.Core.Controls.MobileProperty[])">
 <summary>
 注册属性
 </summary>
 <param name="props"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeControl.CallRPC">
 <summary>
 调用无参数，无回调的RPC
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeControl.CallRPC(System.Object)">
 <summary>
 调用不包含回调，包含参数的RPC
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeControl.CallRPC(Smobiler.Core.RPC.RPCResultHandler)">
 <summary>
 调用包含回调，不包含参数的RPC
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeControl.CallRPC(Smobiler.Core.RPC.RPCResultHandler,System.Object)">
 <summary>
 调用包含回调和参数的RPC
 </summary>
 <param name="params">参数</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeControl.OnEventRaised(System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 RPC调用结果处理
 </summary>
 <param name="params"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeControl.BeforePaintDesign(System.Object,Smobiler.Core.Controls.OnPaintDesignArgs)">
 <summary>
 在设计时绘制控件
 </summary>
 <returns>返回一个值，该值指示是否终止设计器继续绘制控件，True，继续绘制，False不继续绘制</returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileNativeControl.OnPaintDesign(System.Object,Smobiler.Core.Controls.OnPaintDesignArgs)">
 <summary>
 在设计时绘制控件
 </summary>
 <returns>返回一个值，该值指示是否终止设计器继续绘制控件，True，继续绘制，False不继续绘制</returns>
</member>
<member name="T:Smobiler.Core.Controls.OnPaintDesignArgs">
 <summary>
 为OnPaintDesign提供方法
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.OnPaintDesignArgs.OutputPath">
 <summary>
 获取输入路径
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.OnPaintDesignArgs.Graphics">
 <summary>
 获取画笔
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.OnPaintDesignArgs.Bounds">
 <summary>
 获取控件绘制区域
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileParentControl">
 <summary>
 父容器控件
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileParentControl.Components">
 <summary>
 获取包含在组件内的组件的集合。
 </summary>
 <value>一个 MobileComponentCollection，它表示组件内包含的组件的集合。</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileParentControl.ShowResult">
 <summary>
 获取或设置窗体的对话框结果。
 </summary>
 <value>默认值:ShowResult.None</value>
 <remarks>
 </remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileParentControl.Load">
 <summary>
 在父容器控件第一次显示前发生。
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileParentControl.OnLoad">
 <summary>
 触发Load事件。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileParentControl.MessageBox">
 <summary>
 显示可包含文本、按钮（通知并指示用户）的消息框。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileParentControl.Toast(System.String,Smobiler.Core.Controls.ToastLength)">
 <summary>
 显示Toast
 </summary>
 <param name="message">消息文本</param>
 <param name="length">信息的存续期间，默认为短期间</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.MobileUserControl">
 <summary>
 自定义控件
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobileUserControl._loading">
 <summary>
 一个自定义控件的Load，只会触发一次
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.DesignSize">
 <summary>
 获取和设置自定义控件在设计时的大小
 </summary>
 <returns></returns>
 <remarks>自定义控件在使用时，由于相对布局，导致如果设置了控件的Size属性，在实际使用这个自定义控件时，会导致大小不一致，所以为了使用Flex或者不指定实际宽度和宽度时，也能对自定义控件进行设计，需要设置设计时的大小。</remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.JS">
 <summary>
 获取和设置Javascript脚本
 </summary>
 <remarks>仅在窗体第一次或重新加载时生效</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.BackgroundImage">
 <summary>
 获取和设置窗体背景图片
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.BackgroundImagePath">
 <summary>
 获取或设置窗体背景图片路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.BackgroundImageSizeMode">
 <summary>
 获取和设置窗体背景图片显示样式
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileUserControl.Close">
 <summary>
 自定义控件在Dialog显示时，调用Close会关闭当前Dialog
 自定义控件被设置为窗体的LeftDrawer时，调用Close会关闭当前窗体的LeftDrawer
 其它模式下调用无效
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.Scrollable">
 <summary>
 获取一个值，该值指示控件是否可滚动
 </summary>
 <returns>可滚动返回true，不可滚动返回false</returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.Horizontal">
 <summary>
 获取和设置一个值，该值指示是否水平滑动
 </summary>
 <value>水平滑动设置为 <c>true</c>，否则为 <c>flase</c></value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.KeyboardScrollHidden">
 <summary>
 获取和设置一个值，该值指示用户拖拽滚动视图的时候，是否要隐藏软键盘。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.ShowHorizontalScrollBar">
 <summary>
 获取和设置一个值，该值指示是否显示水平滚动条。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.ShowVerticalScrollBar">
 <summary>
 获取和设置一个值，该值指示是否显示垂直滚动条。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.TemplateData">
 <summary>
 获取模板数据
 </summary>
 <returns></returns>
 <remarks>TemplateData 使用弱引用 WeakReference</remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileUserControl.TemplateItem">
 <summary>
 获取模板对象
 </summary>
 <returns></returns>
 <remarks>TemplateItem 使用弱引用 WeakReference</remarks>
</member>
<member name="T:Smobiler.Core.Controls.INotifyPropertyChanged">
 <summary>
 Notifies clients that a property value has changed.
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.INotifyPropertyChanged.PropertyChanged">
 <summary>
 Occurs when a property value changes.
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.PropertyChangedEventHandler">
 <summary>
 Represents the method that will handle the System.ComponentModel.INotifyPropertyChanged.PropertyChanged
 event raised when a property is changed on a component.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">A <see cref="T:Smobiler.Core.Controls.PropertyChangedEventArgs"/> that contains the event data.</param>
</member>
<member name="T:Smobiler.Core.Controls.PropertyChangedEventArgs">
 <summary>
 Provide event data for PropertyChangedEvent
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.PropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
 <summary>
 Instance
 </summary>
 <param name="propName">Property Name</param>
 <param name="oldValue">Old Value</param>
 <param name="newValue">New Value</param>
</member>
<member name="P:Smobiler.Core.Controls.PropertyChangedEventArgs.PropertyName">
 <summary>
 PropertyName
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PropertyChangedEventArgs.NewValue">
 <summary>
 NewValue
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PropertyChangedEventArgs.OldValue">
 <summary>
 OldValue
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PropertyChangedEventArgs.ChangedSource">
 <summary>
 ChangedSource
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.PropertyChangedSource">
 <summary>
 PropertyChangedSource
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.PropertyChangedSource.Value">
 <summary>
 Changed from ValueSet
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.PropertyChangedSource.Clent">
 <summary>
 Changed from Client
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.MobileInternalPropertyExtend">
 <summary>
 Class MobileInternalPropertyExtend.
 </summary>
 <seealso cref="T:Smobiler.Core.Controls.MobilePropertyExtend" />
</member>
<member name="M:Smobiler.Core.Controls.MobileInternalPropertyExtend.RenderPropertyValue(Smobiler.Core.Controls.MobileControlBase,Smobiler.Core.Controls.MobileProperty,Smobiler.Core.Protocol.ProtocolRenderAction)">
 <summary>
 Renders the property value.
 </summary>
 <param name="ctl">The control.</param>
 <param name="PropertyValue">The property value.</param>
 <param name="action">The action.</param>
 <returns>System.Object.</returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileInternalPropertyExtend.CanRenderValue(Smobiler.Core.Controls.MobileControlBase,Smobiler.Core.Controls.MobileProperty,Smobiler.Core.Controls.MobileProperty,Smobiler.Core.Protocol.ProtocolRenderAction,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 Sets the STML property value equals.
 </summary>
 <param name="ctl">The control.</param>
 <param name="PropertyValue">The property value.</param>
 <param name="templateProp">The template property.</param>
 <param name="action">The action.</param>
 <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileProperty">
 <summary>
 控件属性
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileProperty.#ctor(System.String,System.Object)">
 <summary>
 构造方法
 </summary>
 <param name="name">属性名称</param>
 <param name="value">属性值</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileProperty.#ctor(System.String,System.Object,System.Object)">
 <summary>
 构造方法
 </summary>
 <param name="name">属性名称</param>
 <param name="value">属性值</param>
 <param name="defaultValue">属性默认值</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileProperty.#ctor(System.String,System.Object,System.Object,Smobiler.Core.Controls.MobilePropertyExtend)">
 <summary>
 构造方法
 </summary>
 <param name="name">属性名称</param>
 <param name="value">属性值</param>
 <param name="defaultValue">属性默认值</param>
 <param name="propertyExtend">属性扩展</param>
</member>
<member name="P:Smobiler.Core.Controls.MobileProperty.Name">
 <summary>
 获取和设置属性名
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileProperty.PublicName">
 <summary>
 获取和设置属性名
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileProperty.Value">
 <summary>
 获取和设置属性值
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileProperty.PreValue">
 <summary>
 获取上一次属性设置的值
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileProperty.HasSetValue">
 <summary>
 获取一个值，该值指示是否已经设置了属性值
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileProperty.SetValue(System.Object)">
 <summary>
 设置属性值，但是不触发RPC更新属性
 </summary>
 <param name="value">属性值</param>
</member>
<member name="P:Smobiler.Core.Controls.MobileProperty.DefaultValue">
 <summary>
 获取属性默认值
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobilePropertyCategory">
 <summary>
 属性类别
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobilePropertyCategory.Property">
 <summary>
 属性
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobilePropertyCategory.Style">
 <summary>
 样式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobilePropertyCategory.STML">
 <summary>
 在整个STML协议上
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobilePropertyChangedType.Render">
 <summary>
 需要产生Render的属性修改
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobilePropertyChangedType.ValueSet">
 <summary>
 仅用于值更新
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.MobilePropertyExtend">
 <summary>
 属性扩展
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobilePropertyExtend.RenderPropertyValue(Smobiler.Core.Controls.MobileControlBase,Smobiler.Core.Controls.MobileProperty)">
 <summary>
 返回协议值
 </summary>
 <param name="ctl">控件</param>
 <param name="PropertyValue">属性</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobilePropertyExtend.CanRenderValue(Smobiler.Core.Controls.MobileControlBase,Smobiler.Core.Controls.MobileProperty)">
 <summary>
 判断是否更新协议值
 </summary>
 <param name="ctl">控件</param>
 <param name="PropertyValue">属性</param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileStyleProperty">
 <summary>
 控件样式属性
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileStyleProperty.#ctor(System.String,System.Object)">
 <summary>
 构造方法
 </summary>
 <param name="name">属性名称</param>
 <param name="value">属性值</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileStyleProperty.#ctor(System.String,System.Object,System.Object)">
 <summary>
 构造方法
 </summary>
 <param name="name">属性名称</param>
 <param name="value">属性值</param>
 <param name="defaultValue">属性默认值</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileStyleProperty.#ctor(System.String,System.Object,System.Object,Smobiler.Core.Controls.MobilePropertyExtend)">
 <summary>
 构造方法
 </summary>
 <param name="name">属性名称</param>
 <param name="value">属性值</param>
 <param name="defaultValue">属性默认值</param>
 <param name="propertyExtend">属性扩展</param>
</member>
<member name="T:Smobiler.Core.Controls.MobilePropertyBindAttribute">
 <summary>
 属性绑定特性
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobilePropertyBindAttribute.BindType">
 <summary>
 获取和设置绑定类型
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobilePropertyBindType">
 <summary>
 绑定类型
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobilePropertyBindType.Context">
 <summary>
 上下文
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobilePropertyBindType.FixValue">
 <summary>
 固定值
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobilePropertyBindType.SelectObject">
 <summary>
 选择关键字
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobilePropertyBindType.Language">
 <summary>
 语言
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobilePropertyBindType.Schema">
 <summary>
 数据字典
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ColorPropertyExtend">
 <summary>
 颜色属性扩展
 </summary>
 <seealso cref="T:Smobiler.Core.Controls.MobilePropertyExtend" />
</member>
<member name="M:Smobiler.Core.Controls.ColorPropertyExtend.RenderPropertyValue(Smobiler.Core.Controls.MobileControlBase,Smobiler.Core.Controls.MobileProperty)">
 <summary>
 返回协议值
 </summary>
 <param name="ctl">控件</param>
 <param name="PropertyValue">属性</param>
 <returns>System.Object.</returns>
</member>
<member name="T:Smobiler.Core.Controls.FontSizePropertyExtend">
 <summary>
 FontSize属性扩展
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.FontSizePropertyExtend.RenderPropertyValue(Smobiler.Core.Controls.MobileControlBase,Smobiler.Core.Controls.MobileProperty)">
 <summary>
 返回协议值
 </summary>
 <param name="ctl">控件</param>
 <param name="PropertyValue">属性</param>
 <returns>System.Object.</returns>
</member>
<member name="T:Smobiler.Core.Controls.RelativeSizeFloatPropertyExtend">
 <summary>
 等宽布局float类型扩展属性.
 </summary>
 <seealso cref="T:Smobiler.Core.Controls.MobilePropertyExtend" />
</member>
<member name="M:Smobiler.Core.Controls.RelativeSizeFloatPropertyExtend.RenderPropertyValue(Smobiler.Core.Controls.MobileControlBase,Smobiler.Core.Controls.MobileProperty)">
 <summary>
 返回协议值
 </summary>
 <param name="ctl">控件</param>
 <param name="PropertyValue">属性</param>
 <returns>System.Object.</returns>
</member>
<member name="T:Smobiler.Core.Controls.RelativeSizeIntPropertyExtend">
 <summary>
 等宽布局int类型扩展属性，四舍五入取值
 </summary>
 <seealso cref="T:Smobiler.Core.Controls.MobilePropertyExtend" />
</member>
<member name="M:Smobiler.Core.Controls.RelativeSizeIntPropertyExtend.RenderPropertyValue(Smobiler.Core.Controls.MobileControlBase,Smobiler.Core.Controls.MobileProperty)">
 <summary>
 返回协议值
 </summary>
 <param name="ctl">控件</param>
 <param name="PropertyValue">属性</param>
 <returns>System.Object.</returns>
</member>
<member name="T:Smobiler.Core.Controls.ResourcePropertyExtend">
 <summary>
 资源属性扩展
 </summary>
 <remarks>需要属性的控件实现接口IMobileResourceControl</remarks>
 <seealso cref="T:Smobiler.Core.Controls.MobilePropertyExtend" />
</member>
<member name="M:Smobiler.Core.Controls.ResourcePropertyExtend.RenderPropertyValue(Smobiler.Core.Controls.MobileControlBase,Smobiler.Core.Controls.MobileProperty)">
 <summary>
 返回协议值
 </summary>
 <param name="ctl">控件</param>
 <param name="PropertyValue">属性</param>
 <returns>System.Object.</returns>
</member>
<member name="T:Smobiler.Core.Controls.StringArrayPropertyExtend">
 <summary>
 字符串数组属性扩展
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.StringArrayPropertyExtend.RenderPropertyValue(Smobiler.Core.Controls.MobileControlBase,Smobiler.Core.Controls.MobileProperty)">
 <summary>
 返回协议值
 </summary>
 <param name="ctl">控件</param>
 <param name="PropertyValue">属性</param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.TextFontScalingPropertyExtend">
 <summary>
 设置中的TextFontScaling属性扩展
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.DataSourceManager">
 <summary>
 Class DataSourceManager. This class cannot be inherited.
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.DataSourceManager.GetDataSourceDataMember(System.Object,System.String)">
 <summary>
 Gets the data source data member.
 </summary>
 <param name="dataSource1">The data source1.</param>
 <param name="dataMember">The data member.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Smobiler.Core.Controls.DataSourceManager.GetDataSourceDataSource(System.Object,System.String)">
 <summary>
 Gets the data source data source.
 </summary>
 <param name="dataSource1">The data source1.</param>
 <param name="dataMember">The data member.</param>
 <returns>System.String.</returns>
</member>
<member name="M:Smobiler.Core.Controls.DataSourceManager.GetDataSource(System.Object,System.String)">
 <summary>
 Gets the data source.
 </summary>
 <param name="dataSource1">The data source1.</param>
 <param name="dataMember">The data member.</param>
 <returns>IEnumerable.</returns>
 <exception cref="T:System.Exception">
 ListSource Without DataMembers!
 or
 ListSource Missing DataMember " + dataMember + "!
 </exception>
</member>
<member name="T:Smobiler.Core.Controls.FileUploadingEventArgs">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ActionButton.Active">
 <summary>
 获取和设置一个值，该值指示子菜单是否展开
 </summary>
 <value>子菜单展开设置为true，否则为false，默认false</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButton.AutoInactive">
 <summary>
 获取和设置一个值，该值指示点击按钮后是否折叠菜单
 </summary>
 <value>点击按钮后折叠菜单设置为true，否则为false，默认true</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButton.ButtonSpacing">
 <summary>
 获取和设置按钮间隔宽度
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButton.TouchOpacity">
 <summary>
 获取和设置点击时透明度
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButton.MainButton">
 <summary>
 获取主按钮
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButton.OffsetX">
 <summary>
 获取和设置偏离屏幕右侧的位置
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButton.OffsetY">
 <summary>
 获取和设置偏离屏幕下侧的位置
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButton.ItemSize">
 <summary>
 获取和设置按钮元素大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButton.ImageSize">
 <summary>
 获取和设置按钮图像大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButton.Items">
 <summary>
 获取按钮元素集合
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileActionButton">
 <summary>
 动作按钮
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileActionButton.Enabled">
 <summary>
 获取和设置一个值，该值指示是否启用此控件
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileActionButton.Active">
 <summary>
 获取和设置一个值，该值指示子菜单是否展开
 </summary>
 <value>子菜单展开设置为true，否则为false，默认false</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileActionButton.AutoInactive">
 <summary>
 获取和设置一个值，该值指示点击按钮后是否折叠菜单
 </summary>
 <value>点击按钮后折叠菜单设置为true，否则为false，默认true</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileActionButton.ButtonSpacing">
 <summary>
 获取和设置按钮间隔宽度
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileActionButton.TouchOpacity">
 <summary>
 获取和设置点击时透明度
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileActionButton.MainButton">
 <summary>
 获取主按钮
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileActionButton.Items">
 <summary>
 获取按钮元素集合
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileActionButton.OffsetX">
 <summary>
 获取和设置偏离屏幕右侧的位置
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileActionButton.OffsetY">
 <summary>
 获取和设置偏离屏幕下侧的位置
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileActionButton.ItemSize">
 <summary>
 获取和设置按钮元素大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileActionButton.ImageSize">
 <summary>
 获取和设置按钮图像大小
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.ActionButtonItemCollection">
 <summary>
 动作按钮元素集合
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ActionButtonBase">
 <summary>
 动作按钮基类
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonBase.ButtonCorlor">
 <summary>
 获取和设置按钮颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonBase.TouchOpacity">
 <summary>
 获取和设置点击时透明度
 </summary>
 <value>between 1 - 100</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonBase.ResourceID">
 <summary>
 获取和设置按钮图片资源
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonBase.ResourcePath">
 <summary>
 获取和设置资源路径
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonBase.ImageType">
 <summary>
 获取和设置一个值，该值指示图片是否为图像或字体图标
 </summary>
 <value>如果</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonBase.IconColor">
 <summary>
 获取和设置字体图标颜色
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.ActionButtonImageType">
 <summary>
 动作按钮图像类型
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ActionButtonImageType.FontIcon">
 <summary>
 FontIcon
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ActionButtonImageType.Image">
 <summary>
 Image
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ActionButtonImageType.Text">
 <summary>
 Text
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ActionMainButton">
 <summary>
 动作主按钮
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ActionMainButton.ButtonCorlor">
 <summary>
 获取和设置按钮颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionMainButton.ResourceID">
 <summary>
 获取和设置按钮图片资源
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionMainButton.Degrees">
 <summary>
 获取和设置菜单展开式旋转角度。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.ActionButtonItem">
 <summary>
 动作按钮元素
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonItem.Text">
 <summary>
 获取和设置按钮文本
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonItem.TextHeight">
 <summary>
 获取和设置按钮文本高度
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonItem.TextSize">
 <summary>
 获取和设置按钮文本字体大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonItem.TextSpace">
 <summary>
 获取和设置按钮文本与按钮之间距离
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonItem.TextBackColor">
 <summary>
 获取和设置按钮文本背景色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ActionButtonItem.TextForeColor">
 <summary>
 获取和设置按钮文本前景色
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MessageBoxStatic">
 <summary>
 显示可包含文本、按钮（通知并指示用户）的消息框。
 </summary>
 <remarks>
 无法创建 MessageBox 类的新实例。要显示消息框，请调用静态（在 Visual Basic 中为 Shared）方法 MessageBox.Show。显示在消息框中的标题、消息、按钮由您传递给该方法的参数确定。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MessageBoxStatic.Show(System.String,System.String,Smobiler.Core.Controls.MessageBoxButtons,Smobiler.Core.Controls.MessageBoxHandler,System.Object)">
 <summary>
 显示具有指定文本、按钮的消息框。
 </summary>
 <param name="text">要在消息框中显示的文本。</param>
 <param name="buttons">可指定在消息框中显示哪些按钮。</param>
 <remarks>
 在消息框中最多可以有三个按钮。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MessageBoxStatic.Show(System.String,System.String,Smobiler.Core.Controls.MessageBoxHandler,System.Object)">
 <summary>
 显示具有指定文本的消息框。
 </summary>
 <param name="text">要在消息框中显示的文本。</param>
 <remarks>
 默认情况下，消息框显示一个 OK 按钮。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MessageBoxStatic.Show(System.String,System.String)">
 <summary>
 显示具有指定文本的消息框。
 </summary>
 <param name="text">要在消息框中显示的文本。</param>
 <remarks>
 默认情况下，消息框显示一个 OK 按钮。
 </remarks>
</member>
<member name="T:Smobiler.Core.Controls.MobileForm">
 <summary>
 窗体
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.MobileForm.ApiObjectDict">
 <summary>
 客户端接口处理字典
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.MobileForm.PluginObjectDict">
 <summary>
 客户端扩展处理字典
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.RegisterWeakReferenceResourceControl(System.String,Smobiler.Core.Controls.IMobileResourceDataControl)">
 <summary>
 这里是为了配合Image控件使用二进制数据，在HTTP中需要找到这个对应的控件，所以这里需要添加一个弱引用
 </summary>
 <param name="renderid"></param>
 <param name="ctl"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.RaiseComponentEvent(System.String,System.Object,System.String,System.Boolean,System.Boolean)">
 <summary>
 这里用于处理组件的主动发送事件
 这里主要使用moduleName，moduleName是在窗体加载Components的时候，就注册好的，详见方法RegisterComponentModule
 </summary>
 <param name="moduleName"></param>
 <param name="params"></param>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.Session">
 <summary>
 获取VT应用程序提供的当前 Session 对象。
 </summary>
 <value></value>
 <remarks>
 当用户在应用程序中从一MobileForm移动到另一MobileForm时，存储在 Session 对象中的变量不会被放弃
 建议用来存放相对终端的全局变量。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.Client">
 <summary>
 获取客户端变量
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.EnableMirrorPattern">
 <summary>
 获取和设置一个值，该值指示会话存在 Mirror 时，当前窗体是否启用手势图形解锁界面
 </summary>
 <value>默认为True</value>
 <returns></returns>
 <remarks>当设置为True时，必须设置Client.Pattern.Password中的密码值，才能会话修复时显示手势图形解锁界面。</remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.RelativeScreenSize">
 <summary>
 获取相对屏幕密度宽度
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.Statusbar">
 <summary>
 获取和设置窗体状态栏。
 </summary>
 <remarks>对状态栏的修改，仅在设计时、窗体第一次加载、窗体重新加载时生效</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.Orientation">
 <summary>
 获取和设置窗体横竖屏状态
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.BackgroundImage">
 <summary>
 获取和设置窗体背景图片
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.BackgroundImagePath">
 <summary>
 获取或设置窗体背景图片路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.BackgroundImageSizeMode">
 <summary>
 获取和设置窗体背景图片显示样式
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.ActionButton">
 <summary>
 获取动作按钮
 </summary>
 <remarks>仅在窗体Load前可修改</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.IOSBottomHidden">
 <summary>
 获取和设置一个值，该值指示是否隐藏IOS全面屏底部。
 </summary>
 <value>默认为False</value>
 <remarks>仅针对IOS全面屏</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.EnableRenderLoading">
 <summary>
 获取和设置一个值，该值指示是否开启渲染时的加载状态。
 </summary>
 <value>默认为True</value>
 <remarks>客户端开启Loading界面时，分为两种情况，一种是向服务端发出请求，但是请求没有结束时，会处于Loading状态，另外一种是界面渲染在没有完成时也会处于Loading状态，此属性可以关闭界面渲染的Loading，仅用于在界面上加载了过多的数据，防止出现体验上的卡顿（仅在界面第一次或重新加载时生效）</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.IsLoadedInternal">
 <summary>
 获取当前MobileForm是否已经载入。
 </summary>
 <value></value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.PreForm">
 <summary>
 获取或设置上一级的窗体
 </summary>
 <value></value>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.ActiveForm">
 <summary>
 获取此VT应用程序的当前活动窗体。
 </summary>
 <value>MobileForm，表示当前活动窗体，或者如果没有活动窗体，则为空引用（Visual Basic 中为 Nothing）。</value>
 <remarks>
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.JS">
 <summary>
 获取和设置Javascript脚本
 </summary>
 <remarks>仅在窗体第一次或重新加载时生效</remarks>
 <returns></returns>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.Activated">
 <summary>
 在使用代码激活或用户激活窗体时发生
 </summary>
 <remarks>
 </remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.Closed">
 <summary>
 在关闭窗体后发生。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.Closing">
 <summary>
 在关闭窗体时发生。
 </summary>
 <remarks>
 在窗体关闭时，Closing 事件发生。在窗体关闭后，将释放在该对象内创建的所有资源并处置该窗体。
 如果取消此事件，则该窗体保持打开状态。若要取消窗体的关闭操作，请将传递给事件处理程序的 CancelEventArgs 的 Cancel 属性设置为 true。
 </remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.Deactivate">
 <summary>
 在窗体失去焦点成为不活动窗体时发生。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.KeyDown">
 <summary>
 在客户端点击实体按键时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.ForeGround">
 <summary>
 在客户端切换回前台时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.BackGround">
 <summary>
 在客户端切换到后台时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.OrientationChanged">
 <summary>
 在客户端横竖屏切换时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.ClientDataLoaded">
 <summary>
 在载入客户端数据时发生。
 </summary>
 <remarks>如果LoadClientData方法中的handler声明了委托实例或匿名方法，那么这个事件不会被触发。</remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.ClientDataRemoved">
 <summary>
 在删除客户端数据时发生。
 </summary>
 <remarks>如果RemoveClientData方法中的handler声明了委托实例或匿名方法，那么这个事件不会被触发。</remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.ClientDataReaded">
 <summary>
 在获取客户端数据时发生
 </summary>
 <remarks>如果ReadClientData方法中的handler声明了委托实例或匿名方法，那么这个事件不会被触发。</remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileForm.ActionButtonPress">
 <summary>
 在ActionButton被点击时发生
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.OnLoad">
 <summary>
 引发 Load 事件。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.OnClosed">
 <summary>
 引发 Closed 事件。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.OnActivated">
 <summary>
 引发 Activated 事件。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.OnDeactivate">
 <summary>
 引发 Deactivate 事件。
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.OnPaintInternal(Smobiler.Core.Protocol.STMLStackMode)">
 <summary>
 引发 Paint 事件。并且重画Contronls。
 </summary>
 <param name="stackMode"></param>
 <remarks>
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.OnKeyDown(System.Int32)">
 <summary>
 触发BackPressed事件
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.OnForeGround">
 <summary>
 触发ForeGround事件
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobileForm._PixelRatio">
 <summary>
 客户端屏幕比例
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.SetPixelRatio(System.Single)">
 <summary>
 客户端屏幕比例更新
 </summary>
 <param name="ratio"></param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.PixelRatio">
 <summary>
 当前客户端屏幕的比例大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.ShowLoadingScreen">
 <summary>
 显示加载页面
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.ShowLoadingScreen(System.String)">
 <summary>
 显示加载页面
 </summary>
 <param name="message">显示加载信息</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.ShowLoadingScreen(System.String,System.Boolean)">
 <summary>
 显示加载页面 
 </summary>
 <param name="realtime">设置一个值，该值指示加载页面即时显示，还是在会话完成后显示</param>
 <param name="message">显示加载信息</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.CloseLoadingScreen">
 <summary>
 关闭加载页面
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.Show(Smobiler.Core.Controls.MobileForm,Smobiler.Core.Controls.FormRedirectCallBackEventHandler,System.Object)">
 <summary>
 跳转指定窗体
 </summary>
 <param name="form">跳转的窗体</param>
 <param name="callback">跳转窗体关闭后回调委托</param>
 <param name="args">可选参数</param>
 <remarks>获取跳转窗体关闭后的回调处理，请实现委托FormRedirectCallBackEventHandler</remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.Show(Smobiler.Core.Controls.MobileForm,System.Boolean,Smobiler.Core.Controls.FormRedirectCallBackEventHandler,System.Object)">
 <summary>
 跳转指定窗体
 </summary>
 <param name="form">跳转的窗体</param>
 <param name="moveClose">跳转的窗体是否可以左滑关闭，false不关闭，true关闭</param>
 <param name="callback">跳转窗体关闭后回调委托</param>
 <param name="args">可选参数</param>
 <remarks>获取跳转窗体关闭后的回调处理，请实现委托FormRedirectCallBackEventHandler</remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.ClearSession">
 <summary>
 清空当前API的缓存，但是这个应该在何时清理，目前是在如果新的界面显示，原来的界面就会ClearSession，是在OnDeactivate中
 但是也可以在OnClose中，关闭的时候才清空，因为在堆栈中如果存在，还是应该响应API的上传结果
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.ShowInternal(Smobiler.Core.Controls.FormRedirectCallBackEventHandler,System.Object)">
 <summary>
 窗体显示
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.Close">
 <summary>
 关闭当前窗体。
 </summary>
 <remarks>
 窗体关闭后，关闭在该对象内创建的所有资源并且处置该窗体。可以防止在运行时窗体关闭，方法是处理 Closing 事件，
 并设置作为参数传递给事件处理方法的 CancelEventArgs 的 Cancel 属性。如果要关闭的窗体是VT应用程序的启动窗体，则该VT应用程序结束。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.CloseInternal(System.String)">
 <summary>
 目前需要考虑可能由于堆栈的问题，导致关闭时造成的混乱
 </summary>
 <param name="pageName"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.Refresh(Smobiler.Core.Protocol.STMLStackMode)">
 <summary>
 窗体恢复
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.RefreshMirrorRPC">
 <summary>
 在客户端恢复时，如果处于激活的Stml时，需要重新发送
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.FindControl(System.String)">
 <summary>
 根据控件名称查询控件
 </summary>
 <param name="name"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.InteralFindControl(System.String)">
 <summary>
 内部根据名称查询当前控件
 </summary>
 <param name="RenderID"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.LoadClientData(System.String,System.String,Smobiler.Core.Controls.LoadClientDataCallBackHandler,System.Int32,System.Boolean)">
 <summary>
 添加或修改客户端数据
 </summary>
 <param name="key">键</param>
 <param name="value">值</param>
 <param name="timeout">超时时间，默认为0，为0时代表永不超时，大于0时，到达指定的超时时间后会自动触发handler，单位为秒</param>
 <param name="handler">在客户端保存数据完成后的回调</param>
 <param name="asyncawait">同步等待，是否在客户端未返回结果时，使客户端处于等待状态（会在客户端显示一个Loading的状态，用户不可操作客户端上的控件）</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.RemoveClientData(System.String,Smobiler.Core.Controls.RemoveClientDataCallBackHandler,System.Int32,System.Boolean)">
 <summary>
 删除客户端数据
 </summary>
 <param name="key">键</param>
 <param name="timeout">超时时间，默认为0，为0时代表永不超时，大于0时，到达指定的超时时间后会自动触发handler，单位为秒</param>
 <param name="handler">在客户端删除数据完成后的回调</param>
 <param name="asyncawait">同步等待，是否在客户端未返回结果时，使客户端处于等待状态（会在客户端显示一个Loading的状态，用户不可操作客户端上的控件）</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.ReadClientData(System.String,Smobiler.Core.Controls.ReadClientDataCallBackHandler,System.Int32,System.Boolean)">
 <summary>
 获取客户端数据
 </summary>
 <param name="key">键</param>
 <param name="timeout">超时时间，默认为0，为0时代表永不超时，大于0时，到达指定的超时时间后会自动触发handler，单位为秒</param>
 <param name="handler">在后客户端读取数据完成的回调，获取客户端返回的数据需要在handler中处理</param>
 <param name="asyncawait">同步等待，是否在客户端未返回结果时，使客户端处于等待状态（会在客户端显示一个Loading的状态，用户不可操作客户端上的控件）</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.RedirectUrl(System.String,System.Boolean)">
 <summary>
 跳转指定URL的网页
 </summary>
 <param name="url">网页地址</param>
 <param name="newTab">在Web模式下是否打开新的Tab标签</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.CallRPCInternal(System.String,System.String,Smobiler.Core.RPC.RPCResultHandler,Smobiler.Core.RPC.RPCParameter)">
 <summary>
 RPC仅面向Form注册（不面向Client），同时RPC在Form中的缓存仅为
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.OnPropertyChangedRenderCheck(Smobiler.Core.Controls.MobilePropertyChangedEventArgs)">
 <summary>
 这里主要是用于Base的上面需要判断ParentInternal，但是Form的ParentInternal是null，导致不发送Form属性修改的问题
 </summary>
 <param name="e"></param>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.Drawer">
 <summary>
 获取和设置侧边栏控件
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.DrawerName">
 <summary>
 获取和设置侧边栏控件名称
 </summary>
 <returns></returns>
 <remarks>仅在窗体第一次或重新载入时生效，如果设置了DrawerControl，那么设置此属性无效</remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.DrawerWidth">
 <summary>
 获取和设置侧边栏宽度
 </summary>
 <value>默认为0</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileForm.DrawerPosition">
 <summary>
 获取和设置侧边栏出现在屏幕上的位置
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.OpenDrawer">
 <summary>
 打开侧边栏
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.CloseDrawer">
 <summary>
 关闭侧边栏
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.ShowDialogView(Smobiler.Core.Controls.MobileUserControl,Smobiler.Core.Controls.DialogOptions,System.EventHandler)">
 <summary>
 弹出用户控件界面
 </summary>
 <param name="control">用户控件</param>
 <param name="options">弹出框设置</param>
 <param name="closedHandler">界面关闭后回调</param>
 <remarks>在不再使用弹出用户控件界面时，使用DestroyDialog方法销毁，否则会常驻客户端内存</remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.DestroyDialogView(Smobiler.Core.Controls.MobileUserControl)">
 <summary>
 销毁弹出用户控件界面
 </summary>
 <param name="control">用户控件</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileForm.ShowModalView(Smobiler.Core.Controls.MobileUserControl,Smobiler.Core.Controls.DialogOptions)">
 <summary>
 弹出用户控件界面
 </summary>
 <param name="control">用户控件</param>
 <param name="options">弹出框设置</param>
 <remarks>ShowModal一次仅能显示一个用户控件界面，并不能叠加显示，如果需要叠加显示，请使用ShowDialog方法</remarks>
</member>
<member name="T:Smobiler.Core.Controls.ToastLength">
 <summary>
 Toast存续期间
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ToastLength.SHORT">
 <summary>
 短期间
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ToastLength.LONG">
 <summary>
 长期间
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.FormOrientation">
 <summary>
 窗体横竖屏状态
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.FormOrientation.Unlock">
 <summary>
 自动旋转
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.FormOrientation.Portrait">
 <summary>
 竖屏
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.FormOrientation.Landscape">
 <summary>
 横屏
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.FormOrientation.LandscapeLeft">
 <summary>
 左横屏
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.FormOrientation.LandscapeRight">
 <summary>
 右横屏
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.DrawerPosition">
 <summary>
 侧边栏出现在屏幕上的位置
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.DrawerPosition.Left">
 <summary>
 从屏幕左边滑出
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.DrawerPosition.Right">
 <summary>
 从屏幕右边滑出
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.MobileMessageBox">
 <summary>
 显示可包含文本、按钮（通知并指示用户）的消息框。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileMessageBox.Position">
 <summary>
 获取和设置消息框显示位置。
 </summary>
 <returns></returns>
 <remarks>在Position设置为Bottom时，默认会添加一个取消的按钮，在用户点击取消按钮时，结果中的Index为-1，Result为ShowResult.None</remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileMessageBox.Show(System.String,System.String,System.String[],Smobiler.Core.Controls.MessageBoxHandler,System.Object)">
 <summary>
 显示具有指定文本、标题、按钮和默认按钮的消息框。
 </summary>
 <param name="text">要在消息框中显示的文本</param>
 <param name="caption">要在消息框的标题栏中显示的文本</param>
 <param name="buttons">可指定在消息框中显示哪些按钮</param>
 <param name="handler">消息回调</param>
 <param name="args">扩展数据</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileMessageBox.Show(System.String,System.String,Smobiler.Core.Controls.MessageBoxButtons,Smobiler.Core.Controls.MessageBoxHandler,System.Object)">
 <summary>
 显示具有指定文本、标题、按钮的消息框。
 </summary>
 <param name="text">要在消息框中显示的文本。</param>
 <param name="caption">要在消息框的标题栏中显示的文本。</param>
 <param name="buttons">可指定在消息框中显示哪些按钮。</param>
 <param name="handler">消息回调</param>
 <param name="args">扩展数据</param>
 <remarks>
 在消息框中最多可以有三个按钮。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileMessageBox.Show(System.String,Smobiler.Core.Controls.MessageBoxButtons,Smobiler.Core.Controls.MessageBoxHandler,System.Object)">
 <summary>
 显示具有指定文本和按钮的消息框。
 </summary>
 <param name="text">要在消息框中显示的文本。 </param>
 <param name="buttons">可指定在消息框中显示哪些按钮。 </param>
 <param name="handler">消息回调</param>
 <param name="args">扩展数据</param>
 <remarks>
 在消息框中最多可以有三个按钮。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileMessageBox.Show(System.String,Smobiler.Core.Controls.MessageBoxHandler,System.Object)">
 <summary>
 显示具有指定文本的消息框。
 </summary>
 <param name="text">要在消息框中显示的文本。</param>
 <param name="handler">消息回调</param>
 <param name="args">扩展数据</param>
 <remarks>
 默认情况下，消息框显示一个 OK 按钮。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileMessageBox.Show(System.String,System.String,Smobiler.Core.Controls.MessageBoxHandler,System.Object)">
 <summary>
 显示具有指定文本和标题的消息框。
 </summary>
 <param name="text">要在消息框中显示的文本。</param>
 <param name="caption">要在消息框的标题栏中显示的文本。</param>
 <param name="handler">消息回调</param>
 <param name="args">扩展数据</param>
 <remarks>
 默认情况下，消息框显示一个 OK 按钮。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileMessageBox.Show(System.String,System.String)">
 <summary>
 显示具有指定文本和标题的消息框。
 </summary>
 <param name="text">要在消息框中显示的文本。</param>
 <param name="caption">要在消息框的标题栏中显示的文本。</param>
 <remarks>
 默认情况下，消息框显示一个 OK 按钮。
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileMessageBox.Show(System.String)">
 <summary>
 显示具有指定文本的消息框。
 </summary>
 <param name="text">要在消息框中显示的文本。</param>
 <remarks>
 默认情况下，消息框显示一个 OK 按钮。
 </remarks>
</member>
<member name="T:Smobiler.Core.Controls.MobileMessageBoxPosition">
 <summary>
 消息框显示位置
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobileMessageBoxPosition.Default">
 <summary>
 默认显示位置
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobileMessageBoxPosition.Bottom">
 <summary>
 底部显示
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.MobileFormStatusbar">
 <summary>
 窗体状态栏
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileFormStatusbar.Empty">
 <summary>
 获取空的状态栏
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileFormStatusbar.#ctor(Smobiler.Core.Controls.MobileFormStatusbarStyle)">
 <summary>
 创建 <see cref="T:Smobiler.Core.Controls.MobileFormStatusbar"/> 实例
 </summary>
 <param name="barStyle"></param>
</member>
<member name="P:Smobiler.Core.Controls.MobileFormStatusbar.BackColor">
 <summary>
 获取或设置窗体状态栏背景色。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileFormStatusbar.Translucent">
 <summary>
 获取和设置一个值，该值指示是否采用沉浸式状态栏。
 </summary>
 <remarks>Android5.0以下不支持</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileFormStatusbar.BarStyle">
 <summary>
 获取或设置窗体状态栏样式。
 </summary>
 <value></value>
</member>
<member name="P:Smobiler.Core.Controls.MobileFormStatusbar.BarHidden">
 <summary>
 获取或设置一个值，该值指示是否隐藏状态栏。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.MobileFormStatusbarStyle">
 <summary>
 窗体状态栏样式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobileFormStatusbarStyle.Default">
 <summary>
 系统默认样式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobileFormStatusbarStyle.Light">
 <summary>
 浅色样式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.MobileFormStatusbarStyle.Dark">
 <summary>
 深色样式
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.MobileFormStatusbarConverter">
 <summary>
 为MobileFormStatusbar提供类型转换
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.Border">
 <summary>
 控件边距
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Border.#ctor(System.Single)">
 <summary>
 构造函数
 </summary>
 <param name="all">所有边距</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Border.#ctor(System.Single,System.Single,System.Single,System.Single)">
 <summary>
 构造函数
 </summary>
 <param name="left">左边距</param>
 <param name="top">上边距</param>
 <param name="right">右边距</param>
 <param name="bottom">下边距</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Border.All">
 <summary>
 获取或设置所有边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Border.Left">
 <summary>
 获取或设置左边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Border.Right">
 <summary>
 获取或设置右边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Border.Top">
 <summary>
 获取或设置上边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Border.Bottom">
 <summary>
 获取或设置下边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Border.op_Inequality(Smobiler.Core.Controls.Border,Smobiler.Core.Controls.Border)">
 <summary>
 Implements the operator &lt;&gt; operator.
 </summary>
 <param name="lhs">The LHS.</param>
 <param name="rhs">The RHS.</param>
 <returns>The result of the operator.</returns>
</member>
<member name="M:Smobiler.Core.Controls.Border.op_Equality(Smobiler.Core.Controls.Border,Smobiler.Core.Controls.Border)">
 <summary>
 Implements the operator = operator.
 </summary>
 <param name="lhs">The LHS.</param>
 <param name="rhs">The RHS.</param>
 <returns>The result of the operator.</returns>
</member>
<member name="T:Smobiler.Core.Controls.BorderConverter">
 <summary>
 Border 类型转换
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.Margin">
 <summary>
 控件边距
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.Margin.Empty">
 <summary>
 空边距
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.Margin.#ctor(System.Single)">
 <summary>
 构造函数
 </summary>
 <param name="all">所有边距</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Margin.#ctor(System.Single,System.Single,System.Single,System.Single)">
 <summary>
 构造函数
 </summary>
 <param name="left">左边距</param>
 <param name="top">上边距</param>
 <param name="right">右边距</param>
 <param name="bottom">下边距</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Margin.All">
 <summary>
 获取或设置所有边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Margin.Left">
 <summary>
 获取或设置左边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Margin.Right">
 <summary>
 获取或设置右边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Margin.Top">
 <summary>
 获取或设置上边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Margin.Bottom">
 <summary>
 获取或设置下边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Margin.ToString">
 <summary>
 转换为字符串形式
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.Margin.op_Inequality(Smobiler.Core.Controls.Margin,Smobiler.Core.Controls.Margin)">
 <summary>
 Implements the operator &lt;&gt; operator.
 </summary>
 <param name="lhs">The LHS.</param>
 <param name="rhs">The RHS.</param>
 <returns>The result of the operator.</returns>
</member>
<member name="M:Smobiler.Core.Controls.Margin.op_Equality(Smobiler.Core.Controls.Margin,Smobiler.Core.Controls.Margin)">
 <summary>
 Implements the operator = operator.
 </summary>
 <param name="lhs">The LHS.</param>
 <param name="rhs">The RHS.</param>
 <returns>The result of the operator.</returns>
</member>
<member name="T:Smobiler.Core.Controls.MarginConverter">
 <summary>
 为 Margin 提供类型转换
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.Padding">
 <summary>
 控件内边距
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Padding.#ctor(System.Single)">
 <summary>
 构造函数
 </summary>
 <param name="all">所有边距</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Padding.#ctor(System.Single,System.Single,System.Single,System.Single)">
 <summary>
 构造函数
 </summary>
 <param name="left">左边距</param>
 <param name="top">上边距</param>
 <param name="right">右边距</param>
 <param name="bottom">下边距</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Padding.All">
 <summary>
 获取或设置所有边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Padding.Left">
 <summary>
 获取或设置左边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Padding.Right">
 <summary>
 获取或设置右边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Padding.Top">
 <summary>
 获取或设置上边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Padding.Bottom">
 <summary>
 获取或设置下边距
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Padding.op_Inequality(Smobiler.Core.Controls.Padding,Smobiler.Core.Controls.Padding)">
 <summary>
 Implements the operator &lt;&gt; operator.
 </summary>
 <param name="lhs">The LHS.</param>
 <param name="rhs">The RHS.</param>
 <returns>The result of the operator.</returns>
</member>
<member name="M:Smobiler.Core.Controls.Padding.op_Equality(Smobiler.Core.Controls.Padding,Smobiler.Core.Controls.Padding)">
 <summary>
 Implements the operator = operator.
 </summary>
 <param name="lhs">The LHS.</param>
 <param name="rhs">The RHS.</param>
 <returns>The result of the operator.</returns>
</member>
<member name="T:Smobiler.Core.Controls.PaddingConverter">
 <summary>
 为 Padding 提供类型转换
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.IMobileViewCollectionOwner">
 <summary>
 IMobileViewCollectionOwner
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewCollectionOwner.ItemAdd(Smobiler.Core.Controls.MobileViewCollectionItem)">
 <summary>
 添加元素
 </summary>
 <param name="item">元素</param>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewCollectionOwner.ItemRemove(Smobiler.Core.Controls.MobileViewCollectionItem,System.Int32)">
 <summary>
 删除元素
 </summary>
 <param name="item">元素</param>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewCollectionOwner.ItemClear">
 <summary>
 清除元素
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewCollectionOwner.Refresh">
 <summary>
 刷新元素
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewCollectionOwner.ItemPropertyChanged(Smobiler.Core.Controls.MobileViewCollectionItem,Smobiler.Core.Controls.ShadowPropertyChangedArgs)">
 <summary>
 元素属性修改
 </summary>
 <param name="item">元素</param>
 <param name="e">属性</param>
</member>
<member name="T:Smobiler.Core.Controls.IMobileViewDictionaryOwner`2">
 <summary>
 IMobileViewDictionaryOwner
 </summary>
 <typeparam name="TKey">Key</typeparam>
 <typeparam name="TValue">Value</typeparam>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewDictionaryOwner`2.ItemAdd(`0,`1)">
 <summary>
 增加元素
 </summary>
 <param name="key">键</param>
 <param name="value">值</param>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewDictionaryOwner`2.ItemRemove(`0)">
 <summary>
 删除元素
 </summary>
 <param name="key">键</param>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewDictionaryOwner`2.ItemClear">
 <summary>
 清除元素
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewDictionaryOwner`2.ItemSet(`0,`1)">
 <summary>
 设置元素
 </summary>
 <param name="key">键</param>
 <param name="value">值</param>
</member>
<member name="T:Smobiler.Core.Controls.MobileViewCollection`1">
 <summary>
 元素集合基类
 </summary>
 <typeparam name="T">元素类型</typeparam>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollection`1.#ctor(Smobiler.Core.Controls.IMobileViewCollectionOwner)">
 <summary>
 构造函数
 </summary>
 <param name="owner">集合拥有者</param>
</member>
<member name="P:Smobiler.Core.Controls.MobileViewCollection`1.Owner">
 <summary>
 获取集合拥有者
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileViewCollection`1.Count">
 <summary>
 获取集合元素数
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileViewCollection`1.IsReadOnly">
 <summary>
 获取元素是否只读
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileViewCollection`1.Item(System.Int32)">
 <summary>
 获取和设置指定索引位置的元素
 </summary>
 <param name="index"></param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollection`1.Add(`0)">
 <summary>
 添加元素到集合中
 </summary>
 <param name="item">添加到集合中的元素</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollection`1.Clear">
 <summary>
 移除所有元素
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollection`1.CopyTo(`0[],System.Int32)">
 <summary>
 复制元素到指定的集合中
 </summary>
 <param name="array"></param>
 <param name="arrayIndex"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollection`1.RemoveAt(System.Int32)">
 <summary>
 移除指定索引的元素
 </summary>
 <param name="index"></param>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollection`1.Contains(`0)">
 <summary>
 是否包含指定的元素
 </summary>
 <param name="item">元素</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollection`1.GetEnumerator">
 <summary>
 获取枚举器
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollection`1.IndexOf(`0)">
 <summary>
 获取指定元素的索引
 </summary>
 <param name="item">元素</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollection`1.Remove(`0)">
 <summary>
 移除指定元素
 </summary>
 <param name="item">元素</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollection`1.Refresh">
 <summary>
 刷新元素
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.MobileViewCollectionBase`1">
 <summary>
 继承自CollectionBase的集合
 </summary>
 <typeparam name="T"></typeparam>
</member>
<member name="P:Smobiler.Core.Controls.MobileViewCollectionBase`1.Item(System.Int32)">
 <summary>
 获取指定索引集合元素
 </summary>
 <param name="index">索引</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollectionBase`1.Add(`0)">
 <summary>
 添加集合元素
 </summary>
 <param name="item">集合元素</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollectionBase`1.AddRange(`0[])">
 <summary>
 添加集合元素数组
 </summary>
 <param name="items">集合元素数组</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollectionBase`1.AddInternal(`0)">
 <summary>
 内部添加
 </summary>
 <param name="item"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollectionBase`1.Clear">
 <summary>
 清除元素集合
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollectionBase`1.Contains(`0)">
 <summary>
 判断是否存在给定集合元素
 </summary>
 <param name="item"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollectionBase`1.IndexOf(`0)">
 <summary>
 获取指定集合元素的索引
 </summary>
 <param name="item"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollectionBase`1.Remove(`0)">
 <summary>
 删除指定集合元素
 </summary>
 <param name="item"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollectionBase`1.RemoveAt(System.Int32)">
 <summary>
 删除指定索引位置的集合元素
 </summary>
 <param name="index"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollectionBase`1.Refresh">
 <summary>
 对数据进行刷新
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileViewCollectionBase`1.Owner">
 <summary>
 获取当前的组对应的Owner
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.MobileViewCollectionItem">
 <summary>
 集合元素
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileViewCollectionItem.Owner">
 <summary>
 获取元素所属
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileViewCollectionItem.Tag">
 <summary>
 获取和设置Tag
 </summary>
 <value>The tag.</value>
</member>
<member name="T:Smobiler.Core.Controls.MobileViewCollectionShadowItem">
 <summary>
 MobileViewCollectionShadowItem
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollectionShadowItem.GetShadowPropertyValue(System.String,System.Object)">
 <summary>
 Get Shadow PropertyValue
 </summary>
 <param name="propName"></param>
 <param name="defaultPropValue"></param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewCollectionShadowItem.SetShadowPropertyValue(System.String,System.Object)">
 <summary>
 Set Shadow PropertyValue
 </summary>
 <param name="propName"></param>
 <param name="propValue"></param>
</member>
<member name="T:Smobiler.Core.Controls.MobileShadowProperty">
 <summary>
 MobileShadowProperty
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileShadowProperty.#ctor(System.String,System.Object)">
 <summary>
 Constructor
 </summary>
 <param name="propName"></param>
 <param name="propValue"></param>
</member>
<member name="P:Smobiler.Core.Controls.MobileShadowProperty.PropertyName">
 <summary>
 Get PropertyName
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileShadowProperty.PropertyValue">
 <summary>
 Get PropertyValue
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.ShadowPropertyChangedArgs">
 <summary>
 ShadowPropertyChangedArgs
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.ShadowPropertyChangedArgs.#ctor(Smobiler.Core.Controls.MobileShadowProperty,System.Object)">
 <summary>
 Constructor
 </summary>
 <param name="shadownProperty"></param>
 <param name="preValue"></param>
</member>
<member name="P:Smobiler.Core.Controls.ShadowPropertyChangedArgs.ShadowProperty">
 <summary>
 Get ShadowProperty
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ShadowPropertyChangedArgs.PreValue">
 <summary>
 Get PreValue
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.MobileViewDictionary`2">
 <summary>
 字典元素
 </summary>
 <typeparam name="TKey">Key</typeparam>
 <typeparam name="TValue">Value</typeparam>
</member>
<member name="T:Smobiler.Core.Controls.MobileViewTemplateItem">
 <summary>
 模板类
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileViewTemplateItem.Control">
 <summary>
 获取模板控件实例
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewTemplateItem.DataUpdate(System.Object,System.String)">
 <summary>
 更新数据
 </summary>
 <param name="dataSource">数据源</param>
 <param name="dataMember">数据源名称</param>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewTemplateItem.Render(Smobiler.Core.Controls.MobileControlBase,Smobiler.Core.Protocol.STMLRenderEntity)">
 <summary>
 这里处理mRowControl的Update
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewTemplateItem.CallRPC(Smobiler.Core.Controls.MobileControlBase,System.String,System.String,Smobiler.Core.RPC.RPCResultHandler,Smobiler.Core.RPC.RPCParameter)">
 <summary>
 这里处理mRowControl的CallRPC
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewTemplateItem.CreateRenderData(System.String,System.String,System.String,Smobiler.Core.Controls.MobileUserControl,Smobiler.Core.Controls.MobileContainerControl)">
 <summary>
 用于创建TemplateItem在dataBlob中的数据
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewTemplateItem.CreateListRenderData(System.String,Smobiler.Core.Controls.MobileForm,Smobiler.Core.Controls.MobileControl,Smobiler.Core.Controls.MobileControl,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
 <summary>
 用于创建TemplateItem在dataBlob中的数据
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewTemplateItem.Create``1(System.Object,Smobiler.Core.Controls.MobileUserControl,Smobiler.Core.Controls.MobileLayoutControl,System.Object[],System.Action{``0,System.Object},System.Object[])">
 <summary>
 这里templatectl必须是MobileUserControl，原因是由于原始控件，必须复制，并复制模板控件的属性，而MobileUserControl已经设置好了，不需要再处理。
 </summary>
 <param name="data"></param>
 <param name="templatectl"></param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewTemplateItem.TemplateControlCreate(Smobiler.Core.Controls.MobileUserControl,Smobiler.Core.Controls.MobileViewTemplateItem,Smobiler.Core.Controls.MobileLayoutControl,System.Object[])">
 <summary>
 创建模板控件实例
 </summary>
 <param name="templatectl">模板控件实例</param>
 <param name="templateItem">模板控件项</param>
 <param name="parent">父控件</param>
 <param name="params">模板控件构建函数参数</param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.DataSourceUpdateEventHandler">
 <summary>
 一个委托，它表示更新数据源时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.DataSourceUpdateEventArgs"/></param>
</member>
<member name="T:Smobiler.Core.Controls.DataSourceUpdateEventArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.Controls.DataSourceUpdateEventHandler"/> 绑定提供数据
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.DataSourceUpdateEventArgs.#ctor(Smobiler.Core.Controls.MobileViewCollectionItem,Smobiler.Core.Controls.MobileBindableControl)">
 <summary>
 创建 <see cref="T:Smobiler.Core.Controls.DataSourceUpdateEventArgs"/> 实例
 </summary>
 <param name="templateItem">模板项</param>
 <param name="bindableControl">更新控件</param>
</member>
<member name="P:Smobiler.Core.Controls.DataSourceUpdateEventArgs.TemplateItem">
 <summary>
 获取模板项
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.DataSourceUpdateEventArgs.BindDisplayValue">
 <summary>
 获取更新的值
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.DataSourceUpdateEventArgs.BindableControl">
 <summary>
 获取更新的控件
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.BarcodeResultArgs">
 <summary>
 条码数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BarcodeResultArgs.Value">
 <summary>
 获取条码值
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarcodeScanner">
 <summary>
 条码扫描组件
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.BarcodeScanner.BarcodeScanned">
 <summary>
 在客户端返回条码数据时发生
 </summary>
 <remarks>在用户取消扫描时也会发生，如果GetBarcode方法中的handler声明了委托实例或匿名方法，那么这个事件不会被触发</remarks>
</member>
<member name="P:Smobiler.Core.Controls.BarcodeScanner.TimeOut">
 <summary>
 获取或设置客户端获取条码的超时时间[毫秒]
 </summary>
 <value>默认值60秒[60000毫秒]，0代表永不超时</value>
 <returns></returns>
 <remarks>在超时时间到达后，会自动触发事件或回调函数</remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarcodeScanner.GetBarcode(System.Object)">
 <summary>
 获取条码
 </summary>
 <param name="args">可选参数，在事件中通过e.Args获取这些参数</param>
 <remarks>在事件BarcodeScanned中获取条码数据</remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarcodeScanner.GetBarcode(Smobiler.Core.Controls.BarcodeScannerCallBackHandler,System.Object)">
 <summary>
 使用回调获取条码
 </summary>
 <param name="handler">委托实例或匿名方法</param>
 <param name="args">可选参数，在委托实例或匿名方法中通过BarcodeData.Args获取这些参数</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarcodeScanner.GetBarcodeAsync(System.Object)">
 <summary>
 同步获取条码，同步获取会在客户端出现等待界面，直到事件处理完成，才允许客户端操作
 </summary>
 <param name="args">可选参数，在事件中通过BarcodeData.Args获取这些参数</param>
 <remarks>在事件BarcodeScanned中获取条码数据</remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarcodeScanner.GetBarcodeAsync(Smobiler.Core.Controls.BarcodeScannerCallBackHandler,System.Object)">
 <summary>
 同步使用回调获取条码，同步获取会在客户端出现等待界面，直到委托实例或匿名方法处理完成，才允许客户端操作
 </summary>
 <param name="handler">委托实例或匿名方法</param>
 <param name="args">可选参数，在委托实例或匿名方法中通过BarcodeData.Args获取这些参数</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarcodeScanner.GetBarcodeInternal(Smobiler.Core.Controls.BarcodeScannerCallBackHandler,System.Boolean,System.Object)">
 <summary>
 调用相机识别条形
 </summary>
 <param name="handler">回调实例</param>
 <param name="asyncawait">可选参数，是否同步等待，默认为False不同步等待，True会同步等待条码结果返回</param>
 <param name="args">可选参数，向回调实例中传递</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BinaryResultArgs">
 <summary>
 二进制数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BinaryResultArgs.Data">
 <summary>
 获取或设置二进制数据
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BinaryResultArgs.Length">
 <summary>
 获取或设置数据长度
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BinaryResultArgs.ResourceCount">
 <summary>
 获取资源数量
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.BinaryResultArgs.DefaultPath">
 <summary>
 获取默认路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BinaryResultArgs.Create(Smobiler.Core.Controls.ResourceType,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object)">
 <summary>
 创建
 </summary>
 <param name="btype"></param>
 <param name="sessionid"></param>
 <param name="rets"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BinaryResultArgs.SaveFile">
 <summary>
 保存文件
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BinaryResultArgs.SaveFile(System.String)">
 <summary>
 保存文件
 </summary>
 <param name="resourceid">资源名</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BinaryResultArgs.SaveFile(System.String,System.String)">
 <summary>
 保存文件
 </summary>
 <param name="resourceid">资源名</param>
 <param name="resourcepath">资源路径</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BinaryResultArgs.SaveFile(Smobiler.Core.Controls.ResourceType)">
 <summary>
 保存文件
 </summary>
 <param name="resType">资源类型</param>
 <remarks>资源类型代表了不同的UploadPath对应的目录</remarks>
</member>
<member name="M:Smobiler.Core.Controls.BinaryResultArgs.SaveFile(System.String,Smobiler.Core.Controls.ResourceType)">
 <summary>
 保存文件
 </summary>
 <param name="resourceid">资源名称</param>
 <param name="resType">资源类型</param>
 <remarks>>资源类型代表了不同的UploadPath对应的目录</remarks>
</member>
<member name="M:Smobiler.Core.Controls.BinaryResultArgs.TrySaveFile(System.String,System.String)">
 <summary>
 尝试保存文件，如果未保存成功，那么返回False，如果保存成功，那么返回True
 </summary>
 <param name="resourceid">文件名，不赋值的情况下，默认为从客户端上传的文件名</param>
 <param name="resourcepath">保存路径，不赋值的情况下，默认为当前系统中的默认路径</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BinaryResultArgs.SaveFileStatic(System.Byte[],System.String,System.String)">
 <summary>
 保存文件
 </summary>
 <param name="data">文件数据</param>
 <param name="resourceid">文件名</param>
 <param name="resourcepath">保存路径</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.Camera">
 <summary>
 相机控件
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.Camera.ClientImageCaptured">
 <summary>
 在客户端返回手机资源路径时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.Camera.ImageCaptured">
 <summary>
 在客户端返回相机数据时发生。
 </summary>
 <remarks>如果GetPhotoOnline方法中的handler声明了委托实例或匿名方法，那么这个事件不会被触发</remarks>
</member>
<member name="E:Smobiler.Core.Controls.Camera.OfflineImageCaptured">
 <summary>
 在客户端返回离线资源时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Camera.TimeOut">
 <summary>
 获取或设置客户端获取图像的超时时间[毫秒]
 </summary>
 <value>默认值60秒[60000毫秒]，0代表永不超时</value>
 <returns></returns>
 <remarks>在超时时间到达后，会自动触发事件或回调函数</remarks>
</member>
<member name="P:Smobiler.Core.Controls.Camera.Mode">
 <summary>
 获取或设置相机组件获取图像的模式
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Camera.CompressedResolution">
 <summary>
 获取和设置压缩分辨率
 </summary>
 <value></value>
 <returns></returns>
 <remarks>
 压缩分辨率是指，在QualityMode设置为Custom或Compressed时，压缩上传时如果图片最大分辨率大于CompressedResolution设置的值，将大小压缩到CompressedResolution设置的以下，如果图片最大分辨率小于等于CompressedResolution设置的值，那么不进行压缩。
 压缩分辨率并不是指当前压缩后实际的分辨率，而是按比例（整数类型）进行压缩。实际压缩后的分辨率会比CompressedResolution设置的值要小。
 图片最大分辨率是指：一个图片分辨率由两组数字组成，前者为图片宽度，后者为图片高度，那么图片最大分辨率是指图片宽度与图片高度比较后的最大值。
 设置为0代表压缩上传时根据系统默认设置压缩。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.Camera.CompressedQuality">
 <summary>
 获取和设置压缩质量
 </summary>
 <value>int类型，1到100之间</value>
 <remarks>数字越大，图片质量越好，图片大小越大</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Camera.QualityMode">
 <summary>
 获取或设置相机组件图像质量
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Camera.VideoCompressedQuality">
 <summary>
 获取或设置相机组件视频质量
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Camera.VideoDuration">
 <summary>
 获取和设置视频拍摄时长（秒）
 </summary>
 <value>如果设置为0，则不限制长度，默认值为15秒</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Camera.ContinuousNumber">
 <summary>
 获取和设置连续拍照的最大张数
 </summary>
 <value>如果设置为0，则不限制张数，默认值为3</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Camera.AllowEdit">
 <summary>
 获取和设置一个值，该值指示是否允许编辑图片
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Camera.AlbumCount">
 <summary>
 获取和设置在CameraMode为Alubum时，上传的数量
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.Camera.GetPhoto(System.Object)">
 <summary>
 调用相机或相册获取图像
 </summary>
 <param name="args">可选参数，在事件中通过BinaryData.Args获取这些参数</param>
 <remarks>在事件ImageCaptured中获取音频数据</remarks>
</member>
<member name="M:Smobiler.Core.Controls.Camera.GetPhoto(Smobiler.Core.Controls.CameraOnlineCallBackHandler,System.Object)">
 <summary>
 使用回调获取调用相机或相册的图像
 </summary>
 <param name="handler">委托实例或匿名方法</param>
 <param name="args">可选参数，在委托实例或匿名方法中通过BinaryData.Args获取这些参数</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Camera.GetClientPhotoPath(System.Object)">
 <summary>
 调用相机或相册获取客户端图像
 </summary>
 <param name="args">可选参数，在事件中通过e.Resources获取这些参数</param>
 <remarks>在事件ClientImageCaptured中获取音频数据</remarks>
</member>
<member name="M:Smobiler.Core.Controls.Camera.GetClientPhotoPath(Smobiler.Core.Controls.ClientResourceCallBackHandler,System.Object)">
 <summary>
 使用回调获取调用相机或相册的客户端图像
 </summary>
 <param name="handler">委托实例或匿名方法</param>
 <param name="args">可选参数，在委托实例或匿名方法中通过e.Resources获取这些参数</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Camera.GetPhotoOffline(System.String,System.Object)">
 <summary>
 通过离线上传方式调用相机或相册获取图像
 </summary>
 <param name="resourceID">可选参数，离线资源名称</param>
 <param name="args">可选参数，在事件中通过APIResources.Args获取这些参数</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Camera.GetPhotoOffline(Smobiler.Core.Controls.CameraOfflineCallBackHandler,System.String,System.Object)">
 <summary>
 通过离线上传方式使用回调获取调用相机或相册的图像
 </summary>
 <param name="handler">委托实例或匿名方法</param>
 <param name="resourceID">可选参数，离线资源名称</param>
 <param name="args">可选参数，在委托实例或匿名方法中通过APIResources.Args获取这些参数</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Camera.GetPhotoInternal(System.Delegate,System.Object,Smobiler.Core.Controls.BinarySaveModes,System.String)">
 <summary>
 调用相机或相册获取图像
 </summary>
 <param name="handler">回调实例</param>
 <param name="args">可选参数，向回调实例中传递</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Camera.ProcessAPICallBack(System.Object,Smobiler.Core.RPC.RPCResultArgs)">
 <summary>
 
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.CameraMode">
 <summary>
 相机组件获取图像的模式
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.CameraMode.Camera">
 <summary>
 直接打开相机
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.CameraMode.CameraAndAlbum">
 <summary>
 打开一个选择列表，用于选择相机或相册
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.CameraMode.AlbumSingle">
 <summary>
 直接打开相册，仅上传一张图片
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.CameraMode.Album">
 <summary>
 直接打开相册，并上传多张图片
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.CameraMode.CameraContinuous">
 <summary>
 相机连拍
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.CameraMode.CameraVideo">
 <summary>
 相机拍摄视频
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.CameraMode.AlbumVideo">
 <summary>
 相册上传视频
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ImageQualityMode">
 <summary>
 相机组件图像质量模式
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ImageQualityMode.Custom">
 <summary>
 由用户选择
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ImageQualityMode.Compressed">
 <summary>
 压缩上传
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ImageQualityMode.Original">
 <summary>
 原图上传
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.VideoCompressedQuality">
 <summary>
 相机组件视频质量
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.VideoCompressedQuality.LowQuality">
 <summary>
 低质量
 </summary>
 <remarks>ios:LowQuality, android:原始尺寸/4,如果大于640x480，选择640x480</remarks>
</member>
<member name="F:Smobiler.Core.Controls.VideoCompressedQuality.MediumQuality">
 <summary>
 中质量
 </summary>
 <remarks>ios:MediumQuality, android: 原始尺寸/2</remarks>
</member>
<member name="F:Smobiler.Core.Controls.VideoCompressedQuality.HighestQuality">
 <summary>
 高质量
 </summary>
 <remarks>ios:HighestQuality, android: 原始尺寸</remarks>
</member>
<member name="F:Smobiler.Core.Controls.VideoCompressedQuality.Size640_480">
 <summary>
 640x480
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.VideoCompressedQuality.Size960_540">
 <summary>
 960x540
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.VideoCompressedQuality.Size1280_720">
 <summary>
 1280x720
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.VideoCompressedQuality.Size1920_1080">
 <summary>
 1920x1080
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.GetClientResourceHandler">
 <summary>
 一个委托，它表示在获取客户端资源后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 ClientResourceGetResultArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.RemoveClientResourceHandler">
 <summary>
 一个委托，它表示在删除客户端资源后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e"></param>
 <remarks>包含事件数据的 ClientResourceArgs</remarks>
</member>
<member name="T:Smobiler.Core.Controls.LoadClientResourceHandler">
 <summary>
 一个委托，它表示在载入客户端资源后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 ClientResourceArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ClientResourceLoadResultArgs">
 <summary>
 为 LoadClientResourceHandler 提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ClientResourceLoadResultArgs.Count">
 <summary>
 载入总数量
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ClientResourceLoadResultArgs.ResourceID">
 <summary>
 当前载入资源名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ClientResourceLoadResultArgs.ResourcePath">
 <summary>
 当前载入资源路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ClientResourceRemoveResultArgs">
 <summary>
 为RemoveClientResourceHandler提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ClientResourceRemoveResultArgs.Count">
 <summary>
 删除的资源数量
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ClientResourceGetResultArgs">
 <summary>
 为GetClientResourceHandler提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ClientResourceGetResultArgs.Resouces">
 <summary>
 获取资源列表
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ClientResourceGetResultArgs.Count">
 <summary>
 获取资源数量
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ClientResourceGetResultArgs.ResourceData">
 <summary>
 资源数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ClientResourceGetResultArgs.ResourceData.ResourceID">
 <summary>
 资源名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ClientResourceGetResultArgs.ResourceData.ResourceSize">
 <summary>
 资源大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ClientResourceGetResultArgs.ResourceData.ResrouceDate">
 <summary>
 资源创建时间
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.GpsCallBackHandler">
 <summary>
 一个委托，它表示客户端返回GPS时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.GPSResultArgs">GPSResultArgs</see></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarcodeScannerCallBackHandler">
 <summary>
 一个委托，它表示客户端返回条码时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.BarcodeResultArgs">BarcodeResultArgs</see></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.CameraOfflineCallBackHandler">
 <summary>
 一个委托，它表示客户端返回离线资源时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.ResourcesResultArgs">ResourcesResultArgs</see></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.CameraOnlineCallBackHandler">
 <summary>
 一个委托，它表示客户端返回图像数据时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.BinaryResultArgs">BinaryResultArgs</see></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ClientResourceCallBackHandler">
 <summary>
 一个委托，它表示客户端返回客户端资源时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.ClientResourceResultArgs">ClientResourceResultArgs</see></param>
</member>
<member name="T:Smobiler.Core.Controls.BinaryResultCallBackHandler">
 <summary>
 一个委托，它表示客户端返回二进制数据时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.BinaryResultArgs">BinaryResultArgs</see></param>
</member>
<member name="T:Smobiler.Core.Controls.AudioRecorderOnlineCallBackHandler">
 <summary>
 一个委托，它表示客户端返回录音数据时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.BinaryResultArgs">BinaryResultArgs</see></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.AudioRecorderOfflineCallBackHandler">
 <summary>
 一个委托，它表示客户端离线返回录音数据时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.ResourcesResultArgs">ResourcesResultArgs</see></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.LoadClientDataCallBackHandler">
 <summary>
 一个委托，它表示客户端完成数据载入时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.ClientDataResultHandlerArgs">ClientDataResultHandlerArgs</see></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.RemoveClientDataCallBackHandler">
 <summary>
 一个委托，它表示客户端完成数据移除时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.ClientDataResultHandlerArgs">ClientDataResultHandlerArgs</see></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ReadClientDataCallBackHandler">
 <summary>
 一个委托，它表示客户端返回读取保存在客户端上的数据时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.ClientDataResultHandlerArgs">ClientDataResultHandlerArgs</see></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ClientDataResultHandlerArgs">
 <summary>
 为 ClientDataCallBackHandler 提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ClientDataResultHandlerArgs.Key">
 <summary>
 客户端数据键
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ClientDataResultHandlerArgs.Value">
 <summary>
 客户端数据值
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.GPS">
 <summary>
 定位组件
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.GPS.GotLocation">
 <summary>
 在客户端返回坐标位置时发生。
 </summary>
 <remarks>如果GetGps方法中的handler声明了委托实例或匿名方法，那么这个事件不会被触发</remarks>
</member>
<member name="P:Smobiler.Core.Controls.GPS.TimeOut">
 <summary>
 获取或设置客户端获取GPS的超时时间[毫秒]
 </summary>
 <value>默认值60秒[60000毫秒]，0代表永不超时</value>
 <returns></returns>
 <remarks>在超时时间到达后，会自动触发事件或回调函数</remarks>
</member>
<member name="P:Smobiler.Core.Controls.GPS.AmapKey">
 <summary>
 获取和设置高德开放平台Key
 </summary>
 <returns></returns>
 <remarks>由于目前在GPS坐标位置中使用了高德提供的位置描述，所以需要用户在高德开放平台中，申请应用的Web服务功能。</remarks>
</member>
<member name="P:Smobiler.Core.Controls.GPS.GPSSource">
 <summary>
 获取和设置GPS来源
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GPS.RequestLocation">
 <summary>
 获取和设置一个值，该值指示是否请求地理位置信息。
 </summary>
 <value>需要请求位置信息，设置为true，否则false</value>
 <remarks>请求地址位置信息需要连接网络，网络请求的超时时间为60秒</remarks>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.GPS.GetGps(System.Object)">
 <summary>
 获取GPS位置
 </summary>
 <param name="args">可选参数，在事件中通过GPSData.Args获取这些参数</param>
 <remarks>在事件GotLocation中获取GPS位置</remarks>
</member>
<member name="M:Smobiler.Core.Controls.GPS.GetGps(Smobiler.Core.Controls.GpsCallBackHandler,System.Object)">
 <summary>
 使用回调获取GPS位置
 </summary>
 <param name="handler">委托实例或匿名方法</param>
 <param name="args">可选参数，在委托实例或匿名方法中通过GPSData.Args获取这些参数</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.GPS.GetGpsAsyn(System.Object)">
 <summary>
 同步获取GPS位置
 </summary>
 <param name="args">可选参数，在事件中通过GPSData.Args获取这些参数</param>
 <remarks>在事件GotLocation中获取GPS位置</remarks>
</member>
<member name="M:Smobiler.Core.Controls.GPS.GetGpsAsyn(Smobiler.Core.Controls.GpsCallBackHandler,System.Object)">
 <summary>
 同步使用回调获取GPS位置，同步获取会在客户端出现等待界面，直到委托实例或匿名方法处理完成，才允许客户端操作
 </summary>
 <param name="handler">委托实例或匿名方法</param>
 <param name="args">可选参数，在委托实例或匿名方法中通过GPSData.Args获取这些参数</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.GPS.GetGpsInternal(Smobiler.Core.Controls.GpsCallBackHandler,System.Boolean,System.Object)">
 <summary>
 获取GPS数据
 </summary>
 <param name="handler">回调实例</param>
 <param name="asyncawait">可选参数，是否同步等待，默认为False不同步等待，True会同步等待条码结果返回</param>
 <param name="args">可选参数，向回调实例中传递</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.GPS.PlaceSearch(System.String,System.String,System.String,Smobiler.Core.Controls.AmapPlaceSearchResultHandler,System.Int32)">
 <summary>
 地点搜索
 </summary>
 <param name="sessionId">客户端会话编号</param>
 <param name="amapKey">高德开放平台Key</param>
 <param name="keyWord">关键字</param>
 <param name="handler">结果回调</param>
 <param name="resultCount">返回的结果数量，默认为20</param>
 <remarks>此功能使用高德提供的服役，所以需要用户在高德开放平台中，申请应用的Web服务功能。</remarks>
</member>
<member name="M:Smobiler.Core.Controls.GPS.PlaceSearch(System.String,System.String,System.String,System.Drawing.PointF,Smobiler.Core.Controls.AmapPlaceSearchResultHandler,System.Int32)">
 <summary>
 地点搜索
 </summary>
 <param name="sessionId">客户端会话编号</param>
 <param name="amapKey">高德开放平台Key</param>
 <param name="keyWord">关键字</param>
 <param name="loc">起始坐标点(x: Longitude经度,y: Latitude纬度)</param>
 <param name="handler">结果回调</param>
 <param name="resultCount">返回的结果数量，默认为20</param>
 <remarks>此功能使用高德提供的服役，所以需要用户在高德开放平台中，申请应用的Web服务功能。</remarks>
</member>
<member name="M:Smobiler.Core.Controls.GPS.StartLocationUpdate(System.String,Smobiler.Core.Controls.GpsLocationUpdateOptions,Smobiler.Core.Controls.GpsCallBackHandler)">
 <summary>
 开启位置更新
 </summary>
 <param name="sessionId">会话编号</param>
 <param name="options">位置更新选项</param>
 <param name="handler">位置更新回调</param>
</member>
<member name="M:Smobiler.Core.Controls.GPS.StopLocationUpdate(System.String,Smobiler.Core.ResultHandler)">
 <summary>
 关闭位置更新
 </summary>
 <param name="sessionId">会话编号</param>
 <param name="handler">结果回调</param>
</member>
<member name="T:Smobiler.Core.Controls.GPSSource">
 <summary>
 GPS来源
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.GPSSource.Default">
 <summary>
 默认
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.GPSSource.Amap">
 <summary>
 高德
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.AmapPlaceSearchResultHandler">
 <summary>
 一个委托，它表示在调用高德接口获取地点搜索结果时调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 AmapPlaceSearchResultArgs</param>
</member>
<member name="T:Smobiler.Core.Controls.AmapPlaceSearchResultArgs">
 <summary>
 为AmapPlaceSearchResultHandler提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.AmapPlaceSearchResultArgs.Data">
 <summary>
 获取位置实体集合
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.AmapPlaceEntry">
 <summary>
 高德位置实体
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.AmapPlaceEntry.#ctor(System.String,System.String,System.Drawing.PointF)">
 <summary>
 创建 AmapPlaceEntry 的一个实例
 </summary>
 <param name="name">位置描述</param>
 <param name="address">位置地址</param>
 <param name="loc">位置坐标点</param>
</member>
<member name="P:Smobiler.Core.Controls.AmapPlaceEntry.Name">
 <summary>
 获取位置描述
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.AmapPlaceEntry.Address">
 <summary>
 获取位置地址
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.AmapPlaceEntry.Location">
 <summary>
 获取位置坐标点
 </summary>
 <returns></returns>
 <remarks>x: Longitude经度,y: Latitude纬度</remarks> 
</member>
<member name="T:Smobiler.Core.Controls.GpsLocationUpdateOptions">
 <summary>
 GPS位置更新设置
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.GpsLocationUpdateOptions.RequestLocation">
 <summary>
 获取和设置一个值，该值指示是否获取位置描述
 </summary>
 <value>默认false</value>
 <remarks>获取位置描述必须设置AmapKey（高德开放平台Key）</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GpsLocationUpdateOptions.AmapKey">
 <summary>
 获取和设置高德开放平台Key
 </summary>
 <returns></returns>
 <remarks>由于目前在GPS坐标位置中使用了高德提供的位置描述，所以需要用户在高德开放平台中，申请应用的Web服务功能。</remarks>
</member>
<member name="P:Smobiler.Core.Controls.GpsLocationUpdateOptions.MinInterval">
 <summary>
 获取和设置最小间隔时间（单位秒）
 </summary>
 <value>默认5秒</value>
 <remarks>最小间隔时间是在此时间内的位置变化只发送最后一次位置信息</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GpsLocationUpdateOptions.MaxInterval">
 <summary>
 获取和设置最大间隔时间（单位秒）
 </summary>
 <value>默认60秒</value>
 <remarks>最大间隔时间是指如果在最后一次发送位置信息后，致意最大间隔时间时位置没有变化，那么会重新获取当前的位置并发送一次</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GpsLocationUpdateOptions.DistanceFilter">
 <summary>
 获取和设置距离间隔（单位米）
 </summary>
 <value>默认100米</value>
 <remarks>距离间隔是指在达到指定的位置变化距离后才会认为位置发生了改变</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GpsLocationUpdateOptions.EnableHighAccuracy">
 <summary>
 获取和设置一个值，该值指示是否启动精确定位
 </summary>
 <value>默为false</value>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.GPSResultArgs">
 <summary>
 GPS数据（WGS84地球坐标系）
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.GPSResultArgs.#ctor">
 <summary>
 构造函数
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.GPSResultArgs.#ctor(System.Double,System.Double,System.String)">
 <summary>
 构造函数
 </summary>
 <param name="longitude">经度</param>
 <param name="latitude">纬度</param>
 <param name="location">位置描述</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.GPSResultArgs.Latitude">
 <summary>
 获取纬度
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.GPSResultArgs.Longitude">
 <summary>
 获取经度
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.GPSResultArgs.Location">
 <summary>
 获取位置信息
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.GPSResultArgs.ToGCJ02">
 <summary>
 转换为GCJ02坐标系
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.GPSResultArgs.ToBD09">
 <summary>
 转换为BD09坐标系
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.ResourceResultArgs">
 <summary>
 API资源数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ResourceResultArgs.ResourceID">
 <summary>
 获取资源编号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ResourcesResultArgs">
 <summary>
 资源数据
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ResourcesResultArgs.ResourceIDs">
 <summary>
 获取资源编号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ClientResourceResultArgs">
 <summary>
 为ClientResourceCallBack提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ClientResourceResultArgs.Resources">
 <summary>
 获取资源字典。key=[资源名称] value=[资源路径]
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.Timer">
 <summary>
 计时器组件
 </summary>
 <remarks>由客户端触发，仅在客户端前台或存活状态下可用</remarks>
</member>
<member name="E:Smobiler.Core.Controls.Timer.Tick">
 <summary>
 当指定的计时器间隔已过去而且计时器处于启用状态时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Timer.Interval">
 <summary>
 获取或设置触发Tick事件的间隔时间（以秒为单位）
 </summary>
 <value>该值不能小于 1</value>
 <returns></returns>
 <remarks>
 在Timer运行期间，修改此属性值，必须在Timer重新Start时才生效。
 由于计时器组件由客户端触发，间隔时间并不能保证精度。误差时间不能保证。但是计时器组件能保证在网络不通畅的情况下的持续触发Tick事件。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.Timer.Enabled">
 <summary>
 获取一个值，该值指示计时器是否正在运行
 </summary>
 <value>如果计时器当前处于启用状态，则为 true；否则为 false。默认值为 false。</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Timer.Start">
 <summary>
 启动计时器
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Timer.Stop">
 <summary>
 停止计时器
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.VoiceRecorder">
 <summary>
 录音组件
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.VoiceRecorder.ClientRecordedAudio">
 <summary>
 在客户端返回手机资源路径时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.VoiceRecorder.RecordedAudio">
 <summary>
 在客户端返回音频数据时发生。
 </summary>
 <remarks>如果GetRecorder方法中的handler声明了委托实例或匿名方法，那么这个事件不会被触发</remarks>
</member>
<member name="E:Smobiler.Core.Controls.VoiceRecorder.OfflineRecorderdAudio">
 <summary>
 在客户端返回离线资源时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.VoiceRecorder.TimeOut">
 <summary>
 获取或设置客户端获取音频的超时时间[毫秒]
 </summary>
 <value>默认值60秒[60000毫秒]，0代表永不超时</value>
 <returns></returns>
 <remarks>在超时时间到达后，会自动触发事件或回调函数</remarks>
</member>
<member name="M:Smobiler.Core.Controls.VoiceRecorder.GetRecorderAudio(System.Object)">
 <summary>
 使用事件获取音频
 </summary>
 <param name="args">可选参数，在事件中通过BinaryData.Args获取这些参数</param>
 <remarks>在事件RecordedAudio中获取音频数据</remarks>
</member>
<member name="M:Smobiler.Core.Controls.VoiceRecorder.GetRecorderAudio(Smobiler.Core.Controls.AudioRecorderOnlineCallBackHandler,System.Object)">
 <summary>
 使用回调获取音频
 </summary>
 <param name="handler">委托实例或匿名方法</param>
 <param name="args">可选参数，在委托实例或匿名方法中通过BinaryData.Args获取这些参数</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.VoiceRecorder.GetClientRecorderAudio(System.Object)">
 <summary>
 使用事件获取客户端音频
 </summary>
 <param name="args">可选参数，在事件中通过e.Resources获取这些参数</param>
 <remarks>在事件ClientRecordedAudio中获取音频数据</remarks>
</member>
<member name="M:Smobiler.Core.Controls.VoiceRecorder.GetClientRecorderAudio(Smobiler.Core.Controls.ClientResourceCallBackHandler,System.Object)">
 <summary>
 使用回调获取客户端音频
 </summary>
 <param name="handler">委托实例或匿名方法</param>
 <param name="args">可选参数，在委托实例或匿名方法中通过e.Resources获取这些参数</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.VoiceRecorder.GetRecorderAudioOffline(System.String,System.Object)">
 <summary>
 通过离线上传方式使用事件获取音频
 </summary>
 <param name="args">可选参数，在事件中通过APIResources.Args获取这些参数</param>
 <remarks>在事件RecordedAudio中获取音频数据</remarks>
</member>
<member name="M:Smobiler.Core.Controls.VoiceRecorder.GetRecorderAudioOffline(Smobiler.Core.Controls.AudioRecorderOfflineCallBackHandler,System.String,System.Object)">
 <summary>
 通过离线上传方式使用回调获取音频
 </summary>
 <param name="handler">委托实例或匿名方法</param>
 <param name="args">可选参数，在委托实例或匿名方法中通过APIResources.Args获取这些参数</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.VoiceRecorder.GeRecorderInternal(System.Delegate,System.Object,Smobiler.Core.Controls.BinarySaveModes,System.String)">
 <summary>
 获取音频
 </summary>
 <param name="handler">回调实例</param>
 <param name="args">可选参数，向回调实例中传递</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarCodeView">
 <summary>
 条码控件
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.BarCodeView.Value">
 <summary>
 获取和设置条码文本。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.BarCodeView.CodeColor">
 <summary>
 获取和设置条码前景色。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.BarCodeView.BarcodeType">
 <summary>
 获取和设置条码类型。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.BarcodeType">
 <summary>
 条码类型
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.BarcodeType.Code128">
 <summary>
 Code128
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.BarcodeType.QRCode">
 <summary>
 QRCode
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.Button">
 <summary>
 按钮控件
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.Button.Press">
 <summary>
 在按钮点击时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.Button.LongPress">
 <summary>
 在按钮长按时发生。
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.Button.#ctor">
 <summary>
 实体化一个Button对象。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.Button.Text">
 <summary>
 获取或设置与此控件关联的文本。
 </summary>
 <value>与该控件关联的文本。</value>
 <remarks>
 每个派生类以不同的方式使用控件的 Text 属性。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.Button.ForeColor">
 <summary>
 获取和设置控件的前景色，用于显示文本。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Button.HorizontalAlignment">
 <summary>
 获取或设置控件水平方向
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Button.Enabled">
 <summary>
 获取或设置一个值，该值指示是否已启用该控件。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Button.Underline">
 <summary>
 获取或设置文本下划线
 </summary>
 <value></value>
 <returns></returns>
 <remarks>LineThrough和Underline仅能支持一个，并且优先支持Underline</remarks>
</member>
<member name="P:Smobiler.Core.Controls.Button.LineThrough">
 <summary>
 获取或设置文本中划线
 </summary>
 <value></value>
 <returns></returns>
 <remarks>LineThrough和Underline仅能支持一个，并且优先支持Underline</remarks>
</member>
<member name="M:Smobiler.Core.Controls.Button.OnClick">
 <summary>
 触发Click事件
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Button.OnControlEventRaisedInternal(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 按钮事件处理
 </summary>
 <param name="eventName"></param>
 <param name="eventargs"></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.Calendar">
 <summary>
 日历控件
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.Calendar.DateChanged">
 <summary>
 在选择日期时发生
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Calendar.DayForeColor">
 <summary>
 获取和设置显示月份的日期字体颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Calendar.WeekForeColor">
 <summary>
 获取和设置星期行字体颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Calendar.SelectDateForeColor">
 <summary>
 获取和设置选择日期字体颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Calendar.SelectDateBackColor">
 <summary>
 获取和设置选择日期背景颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Calendar.TodayForeColor">
 <summary>
 获取和设置当前日期字体颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Calendar.DisabledDayForeColor">
 <summary>
 获取和设置不在显示月份的日期字体颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Calendar.SelectDate">
 <summary>
 获取或设置选择日期
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Calendar.OnControlEventRaisedInternal(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 控件事件处理
 </summary>
 <param name="eventName"></param>
 <param name="eventargs"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Calendar.OnDatePicker">
 <summary>
 触发DatePick事件
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.AxisBase">
 <summary>
 轴线基类
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.AxisBase.DrawAxisLine">
 <summary>
 获取和设置是否在轴线连接画线
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.AxisBase.DrawGridLines">
 <summary>
 获取和设置是否根据轴线画表格线
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.AxisBase.DrawLabels">
 <summary>
 获取和设置是否显示轴线上的文本
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.AxisBase.GridColor">
 <summary>
 获取和设置表格颜色
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.AxisBase.GridLineWidth">
 <summary>
 获取和设置表格线宽度
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.AxisBase.AxisLineColor">
 <summary>
 获取和设置轴线颜色
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.AxisBase.AxisLineWidth">
 <summary>
 获取和设置轴线宽度
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.XAxis">
 <summary>
 X轴线，在Line, Bar, RadarChart中存在
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.XAxis.Position">
 <summary>
 获取和设置X轴位置
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.XAxis.LabelRotationAngle">
 <summary>
 获取和设置X轴文本角度
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.XAxisPosition">
 <summary>
 X轴线位置
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.XAxisPosition.TOP">
 <summary>
 上
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.XAxisPosition.BOTTOM">
 <summary>
 下
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.XAxisPosition.BOTH_SIDED">
 <summary>
 两边都存在
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.XAxisPosition.TOP_INSIDE">
 <summary>
 内部上
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.XAxisPosition.BOTTOM_INSIDE">
 <summary>
 内部下
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.YAxis">
 <summary>
 Y轴线
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.YAxis.mAxisDependency">
 <summary>
 这个属性不用下发
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.YAxis.#ctor(Smobiler.Core.Controls.AxisDependency)">
 <summary>
 构造方法
 </summary>
 <param name="position">Y轴位置</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.YAxis.AxisDependency">
 <summary>
 获取Y轴位置
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.YAxis.AxisMaxValue">
 <summary>
 获取和设置轴线最大值
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.YAxis.AxisMinValue">
 <summary>
 获取和设置轴线最小值
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.YAxis.StartAtZero">
 <summary>
 获取和设置轴线是否从0开始
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.AxisDependency">
 <summary>
 轴位置
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.Chart`3">
 <summary>
 图表基类
 </summary>
 <typeparam name="T2">图表数据元素</typeparam>
 <typeparam name="T1">图表数据集</typeparam>
 <typeparam name="T">图表数据</typeparam>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.EmptyDataText">
 <summary>
 获取和设置图表数据为空时显示的文本
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.XAxisValues">
 <summary>
 获取和设置X轴坐标系
 </summary>
 <value></value>
 <returns></returns>
 <remarks>
 Chart控件允许手工指定X轴坐标系，在设计器中，一行代表一个坐标值。
 由于在生成YAxisValue时，需要指定当前YAxisValue所属的X轴的索引，所以在手工指定XAxisValues时，需要注意以下情况：
 1.ChartSeries中YAxisValue所属X轴的索引根据XAxisValues中添加的顺序，依次指定。
 2.ChartSeries中YAxisValueCollection的数量必须等于XAxisValues中的数量，否则可能造成显示时的数据混乱。
 3.如果数据中不存在XValueMember的数据，那么取XAxisValues中的数据，如果XAxisValues也不存在数据，那么默认一个X轴为null
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.YValueFontSize">
 <summary>
 获取和设置Y轴文本大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.DataSource">
 <summary>
 获取或设置表格数据源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.SeriesMember">
 <summary>
 获取和设置数据集源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.YValueMember">
 <summary>
 获取和设置Y轴数据源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.XValueMember">
 <summary>
 获取和设置X轴数据源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.Legend">
 <summary>
 获取图例
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.Data">
 <summary>
 获取和设置图表数据
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.DefaultColors">
 <summary>
 获取和设置在数据绑定时的默认颜色
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.DataMember">
 <summary>
 获取或设置数据值字段
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Chart`3.RenderChart(Smobiler.Core.Controls.IChartElement,System.String)">
 <summary>
 RenderChart
 </summary>
 <param name="charitem"></param>
 <param name="chartitemname"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Chart`3.DataBind">
 <summary>
 数据绑定
 </summary>
 <remarks>
 数据绑定时，只需要给定YAxisValueMember即可
 不强制要求给出SeriesMember和XAxisLabelMember
 如果不给出SeriesMember，那么默认只有一个
 如果不给出XAxisLabelMember，那么不显示X轴数据
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.Chart`3.CreateYAxisClass.XAxisValue_">
 <summary>
 用来补充在生成CreateYAxisClass时，XAxisValue未填充的问题
 </summary>
 <value></value>
 <remarks>SmobilerPub#Issue 267</remarks>
</member>
<member name="M:Smobiler.Core.Controls.Chart`3.Clear">
 <summary>
 清除数据
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ChartComponentBase">
 <summary>
 图表组件基类
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartComponentBase.Enabled">
 <summary>
 获取和设置是否启用
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartComponentBase.XOffset">
 <summary>
 获取和设置X轴方向的容差
 </summary>
 <value>默认值：5</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartComponentBase.YOffset">
 <summary>
 获取和设置Y轴方向的容差
 </summary>
 <value>默认值：5</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartComponentBase.TextSize">
 <summary>
  获取和设置字体大小
 </summary>
 <value>默认值：10</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartComponentBase.TextColor">
 <summary>
 获取和设置字体颜色
 </summary>
 <value>默认值：黑色</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ChartElement">
 <summary>
 图表元素基类
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartElement.ElementID">
 <summary>
 获取元素ID
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartElement.Parent">
 <summary>
 获取元素所属元素
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartElement.Render">
 <summary>
 获取和设置是否需要发送向客户端
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartElement.ElementName(System.String)">
 <summary>
 获取指定的元素ID对应的元素名称
 </summary>
 <param name="key"></param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElement.SetParent(Smobiler.Core.Controls.IChartElement)">
 <summary>
 设置元素所属元素
 </summary>
 <param name="parent"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElement.CreateRenderData">
 <summary>
 Chart的所有数据组合都需要通过此方法进行
 </summary>
 <returns></returns>
 <remarks>
 需要组合的数据全部在StmlChangedProperties中在类中指定，如果StmlChangedProperties的值是IChartElement，再向下递归
 一般是ChartData包含若干ChartSeries, ChartSeries中包含若干ChartYAxisValue
 </remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElement.RegisterStmlProperty(System.String,System.Object,System.Boolean)">
 <summary>
 注册属性及值
 </summary>
 <param name="propName">属性名</param>
 <param name="defValue">默认值</param>
 <param name="register">是否注册到属性变动事件中（就是是否在属性变动的时候，向客户端下发协议），如果需要下发的协议，register也要为True</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElement.SetStmlValueDirect(System.String,System.Object)">
 <summary>
 不判断类型，不触发改变事件，直接修改属性值，慎用
 </summary>
 <param name="propName"></param>
 <param name="value"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElement.RenderChartElement(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 创建元素发送字典
 </summary>
 <param name="action"></param>
 <param name="senders"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElement.RenderChartElementAfterAddName(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
 <summary>
 在创建元素发送字典添加名称后需要添加数据请重写此方法
 </summary>
 <param name="action"></param>
 <param name="senders"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElement.RenderState">
 <summary>
 获取发送状态
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ChartElementCollection`1">
 <summary>
 图表元素集合
 </summary>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartElementCollection`1.Item(System.Int32)">
 <summary>
 获取或设置指定索引处的元素。
 </summary>
 <param name="index">要获得或设置的元素从零开始的索引。</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElementCollection`1.Add(`0)">
 <summary>
 将对象添加到图表元素集合的结尾处。
 </summary>
 <param name="item">要添加到图表元素集合的末尾处的对象。</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElementCollection`1.AddRange(`0[])">
 <summary>
 将指定集合的元素添加到图表元素集合的末尾。
 </summary>
 <param name="items">一个集合，其元素应被添加到图表元素集合的末尾。</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElementCollection`1.Clear">
 <summary>
 从图表元素集合中移除所有元素。
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElementCollection`1.Contains(`0)">
 <summary>
 确定某元素是否在图表元素集合中。
 </summary>
 <param name="item">要在图表元素集合中查找的对象</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElementCollection`1.RemoveAt(System.Int32)">
 <summary>
 移除图表元素集合的指定索引处的元素。
 </summary>
 <param name="index">要移除的元素的从零开始的索引。</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartElementCollection`1.Remove(`0)">
 <summary>
 从图表元素集合中移除特定对象的第一个匹配项。
 </summary>
 <param name="item">要从图表元素集合中移除的对象。</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartElementCollection`1.Count">
 <summary>
 获取图表元素集合中实际包含的元素数。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartElementCollection`1.IndexOf(System.Object)">
 <summary>
 搜索指定的对象，并返回整个图表元素集合中第一个匹配项的从零开始的索引。
 </summary>
 <param name="item">要在图表元素集合中查找的对象。</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ChartElementItem">
 <summary>
 带索引的图表元素
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartElementItem.Index">
 <summary>
 获取当前元素索引
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ChartData`2">
 <summary>
 图表数据基类
 </summary>
 <typeparam name="T1"></typeparam>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.#ctor">
 <summary>
 构造函数
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.#ctor(System.Collections.Generic.List{System.String})">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.#ctor(System.Collections.Generic.List{System.String},Smobiler.Core.Controls.ChartSeriesCollection{`0,`1})">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <param name="series">数据集</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartData`2.Series">
 <summary>
 获取数据集合
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartData`2.SeriesCount">
 <summary>
 获取数据集合大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartData`2.XAxisCount">
 <summary>
 获取X轴数量
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.GetSeries(System.Int32)">
 <summary>
 获取指定索引的数据集
 </summary>
 <param name="seriesIndex"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.AddSeries(`1)">
 <summary>
 添加数据集
 </summary>
 <param name="d">数据集</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.RemoveSeries(`1)">
 <summary>
 删除指定数据集
 </summary>
 <param name="d">数据集</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.RemoveSeries(System.Int32)">
 <summary>
 删除指定索引的数据集
 </summary>
 <param name="di">数据集索引</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.AddYAxisValue(`0,System.Int32)">
 <summary>
 添加指定索引的数据集的元素
 </summary>
 <param name="e">元素</param>
 <param name="seriesIndex">数据集索引</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.RemoveYAxisValue(`0,System.Int32)">
 <summary>
 删除指定索引的数据集的元素
 </summary>
 <param name="e">元素</param>
 <param name="seriesIndex">数据集索引</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.RemoveYAxisValue(System.Int32,System.Int32)">
 <summary>
 删除指定索引的数据集的指定索引的元素
 </summary>
 <param name="eIndex">元素索引</param>
 <param name="seriesIndex">数据集索引</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.GetYAxisValue(System.Int32,System.Int32)">
 <summary>
 获取指定索引的数据集的指定索引的Y轴数据
 </summary>
 <param name="eIndex">元素索引</param>
 <param name="seriesIndex">数据集索引</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.GetXAxisValue(System.Int32)">
 <summary>
 获取指定索引的X轴数据
 </summary>
 <param name="eIndex">元素索引</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.AddXAxisLabel(System.String)">
 <summary>
 添加X轴坐标
 </summary>
 <param name="xVal">X轴坐标</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.RemoveXAxisLabel(System.Int32)">
 <summary>
 删除指定索引的X轴坐标
 </summary>
 <param name="index">X轴坐标</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartData`2.ClearValues">
 <summary>
 清空数据
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ChartSeries`1">
 <summary>
 数据集基类
 </summary>
 <typeparam name="T">ChartYAxisValue</typeparam>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartSeries`1.#ctor(Smobiler.Core.Controls.ChartYAxisValueCollection{`0},System.String)">
 <summary>
 构造函数
 </summary>
 <param name="yVals">数据元素集合</param>
 <param name="label">标签</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartSeries`1.YVals">
 <summary>
 获取和设置数据元素集合
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartSeries`1.YValueFontSize">
 <summary>
 获取和设置Y轴文本大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ChartSeries`1.Label">
 <summary>
 获取和设置 Series 的标签文本
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartSeries`1.Color">
 <summary>
 获取和设置 Series 的颜色
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartSeries`1.Colors">
 <summary>
 获取和设置 Series 的颜色
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartSeries`1.Contains(Smobiler.Core.Controls.ChartYAxisValue)">
 <summary>
 判断是否包含指定的 ChartYAxisValue
 </summary>
 <param name="e">ChartYAxisValue 对象</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartSeries`1.Clear">
 <summary>
 清除所有的数据
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartSeries`1.AddColor(System.Drawing.Color)">
 <summary>
 添加指定颜色
 </summary>
 <param name="color">颜色</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartSeries`1.AddYAxisValue(Smobiler.Core.Controls.ChartYAxisValue)">
 <summary>
 添加 ChartYAxisValue
 </summary>
 <param name="e">ChartYAxisValue 对象</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartSeries`1.RemoveYAxisValue(Smobiler.Core.Controls.ChartYAxisValue)">
 <summary>
 删除 ChartYAxisValue
 </summary>
 <param name="e">ChartYAxisValue 对象</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartSeries`1.RemoveYAxisValue(System.Int32)">
 <summary>
 删除指定索引的 ChartYAxisValue
 </summary>
 <param name="eIndex">索引</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartSeries`1.GetYAxisValue(System.Int32)">
 <summary>
 获取指定索引的 ChartYAxisValue
 </summary>
 <param name="eIndex">索引</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ChartSeriesCollection`2">
 <summary>
 数据集集合
 </summary>
 <typeparam name="T1"></typeparam>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ChartYAxisValue">
 <summary>
 图表数据元素
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartYAxisValue.#ctor(System.Double)">
 <summary>
 构造函数
 </summary>
 <param name="val">值</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartYAxisValue.#ctor(System.Double,System.Int32)">
 <summary>
 构造函数
 </summary>
 <param name="val">值</param>
 <param name="index">索引</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartYAxisValue.#ctor(System.Double,System.Int32,System.Object)">
 <summary>
 构造函数
 </summary>
 <param name="val">值</param>
 <param name="index">索引</param>
 <param name="data">数据</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartYAxisValue.Val">
 <summary>
 获取和设置值
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ChartYAxisValue.Data">
 <summary>
 获取和设置数据
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ChartYAxisValue.Copy">
 <summary>
 复制当前数据元素
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ChartYAxisValueCollection`1">
 <summary>
 图表数据元素集合
 </summary>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.IChart">
 <summary>
 图表接口
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.IChart.DataBind">
 <summary>
 图表数据绑定
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.IChart.YValueFontSize">
 <summary>
 获取和设置Y轴文本大小
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.Legend">
 <summary>
 图例
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Legend.Position">
 <summary>
 获取和设置图例位置
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Legend.Size">
 <summary>
 获取和设置图例大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Legend.XEntrySpace">
 <summary>
 获取和设置图例X轴间隔空间
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Legend.YEntrySpace">
 <summary>
 获取和设置图例Y轴间隔空间
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.LegendPosition">
 <summary>
 图例位置
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendPosition.RIGHT_OF_CHART">
 <summary>
 图表右侧
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendPosition.RIGHT_OF_CHART_CENTER">
 <summary>
 图表右侧居中
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendPosition.RIGHT_OF_CHART_INSIDE">
 <summary>
 图表右侧靠边
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendPosition.LEFT_OF_CHART">
 <summary>
 图表左侧
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendPosition.LEFT_OF_CHART_CENTER">
 <summary>
 图表左侧居中
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendPosition.LEFT_OF_CHART_INSIDE">
 <summary>
 图表左侧靠边
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendPosition.BELOW_CHART_LEFT">
 <summary>
 图表下方左侧
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendPosition.BELOW_CHART_RIGHT">
 <summary>
 图表下方右侧
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendPosition.BELOW_CHART_CENTER">
 <summary>
 图表下方居中
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendPosition.PIECHART_CENTER">
 <summary>
 饼图居中
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.LegendForm">
 <summary>
 图例
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.LegendDirection">
 <summary>
 图例方向
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendDirection.LEFT_TO_RIGHT">
 <summary>
 从左向右
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.LegendDirection.RIGHT_TO_LEFT">
 <summary>
 从右向左
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BubbleChart">
 <summary>
 气泡图表
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.BubbleChart.ValueSelected">
 <summary>
 在图表值选择时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BubbleChart.SizeMember">
 <summary>
 获取和设置气泡大小数据源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BubbleChartValueSelectedEventHandler">
 <summary>
 一个委托，它表示在图表值选择时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 BubbleChartValueSelectedEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BubbleChartValueSelectedEventArgs">
 <summary>
 为事件BubbleChartValueSelected提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BubbleChartValueSelectedEventArgs.Series">
 <summary>
 获取事件BubbleSeries
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BubbleChartValueSelectedEventArgs.YValue">
 <summary>
 获取事件BubbleYAxisValue
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BubbleChartValueSelectedEventArgs.XValue">
 <summary>
 获取事件XValue
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.BubbleData">
 <summary>
 气泡图数据
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BubbleData.#ctor">
 <summary>
 构造函数
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BubbleData.#ctor(System.Collections.Generic.List{System.String})">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BubbleData.#ctor(System.Collections.Generic.List{System.String},Smobiler.Core.Controls.BubbleSeriesCollection)">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <param name="sets">数据集</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BubbleSeries">
 <summary>
 气泡图数据集
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BubbleSeries.#ctor(Smobiler.Core.Controls.ChartYAxisValueCollection{Smobiler.Core.Controls.BubbleYAxisValue},System.String)">
 <summary>
 构造函数
 </summary>
 <param name="yVals">数据元素集合</param>
 <param name="label">标签</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BubbleSeriesCollection">
 <summary>
 气泡图数据集集合
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BubbleYAxisValue">
 <summary>
 气泡图数据元素
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BubbleYAxisValue.#ctor(System.Double,System.Single)">
 <summary>
 构造函数
 </summary>
 <param name="val">值</param>
 <param name="size">气泡大小</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BubbleYAxisValue.#ctor(System.Double,System.Single,System.Int32)">
 <summary>
 构造函数
 </summary>
 <param name="val">值</param>
 <param name="size">气泡大小</param>
 <param name="index">索引</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BubbleYAxisValue.#ctor(System.Double,System.Single,System.Int32,System.Object)">
 <summary>
 构造函数
 </summary>
 <param name="val">值</param>
 <param name="size">气泡大小</param>
 <param name="index">索引</param>
 <param name="data">数据</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BubbleYAxisValue.Size">
 <summary>
 获取和设置气泡大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.CandleStickChart">
 <summary>
 K线图
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.CandleStickChart.ValueSelected">
 <summary>
 在图表值选择时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CandleStickChart.ValueHighMember">
 <summary>
 获取和设置最高值数据源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CandleStickChart.ValueLowMember">
 <summary>
 获取和设置最低值数据源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CandleStickChart.ValueOpenMember">
 <summary>
 获取和设置开市值数据源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CandleStickChart.ValueCloseMember">
 <summary>
 获取和设置收市值数据源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.CandleStickChartValueSelectedEventHandler">
 <summary>
 一个委托，它表示在图表值选择时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 BubbleChartValueSelectedEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.CandleStickChartValueSelectedEventArgs">
 <summary>
 为事件CandleStickChartValueSelected提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CandleStickChartValueSelectedEventArgs.Series">
 <summary>
 获取事件CandleStickSeries
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CandleStickChartValueSelectedEventArgs.YValue">
 <summary>
 获取事件CandleStickYAxisValue
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CandleStickChartValueSelectedEventArgs.XValue">
 <summary>
 获取事件XValue
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.CandleStickData">
 <summary>
 K线图数据
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.CandleStickData.#ctor">
 <summary>
 构造函数
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.CandleStickData.#ctor(System.Collections.Generic.List{System.String})">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.CandleStickData.#ctor(System.Collections.Generic.List{System.String},Smobiler.Core.Controls.CandleStickSeriesCollection)">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <param name="sets">数据集</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.CandleStickSeries">
 <summary>
 K线图数据集
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.CandleStickSeriesCollection">
 <summary>
 K线图数据集集合
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.CandleStickYAxisValue">
 <summary>
 K线图Y轴值
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.CandleStickYAxisValue.#ctor(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 构造函数
 </summary>
 <param name="valueHigh">最高值</param>
 <param name="valueLow">最低值</param>
 <param name="valueOpen">开市值</param>
 <param name="valueClose">收市值</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.CandleStickYAxisValue.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32)">
 <summary>
 构建函数
 </summary>
 <param name="valueHigh">最高值</param>
 <param name="valueLow">最低值</param>
 <param name="valueOpen">开市值</param>
 <param name="valueClose">收市值</param>
 <param name="index">索引</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.CandleStickYAxisValue.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Object)">
 <summary>
 获取函数
 </summary>
 <param name="valueHigh">最高值</param>
 <param name="valueLow">最低值</param>
 <param name="valueOpen">开市值</param>
 <param name="valueClose">收市值</param>
 <param name="index">索引</param>
 <param name="data">附加数据</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CandleStickYAxisValue.ValueHigh">
 <summary>
 获取最高值
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CandleStickYAxisValue.ValueLow">
 <summary>
 获取最低值
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CandleStickYAxisValue.ValueOpen">
 <summary>
 获取开市值
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CandleStickYAxisValue.ValueClose">
 <summary>
 获取收市值
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarLineChartBase`3">
 <summary>
 BarLineChart基类
 </summary>
 <typeparam name="T2">Entry</typeparam>
 <typeparam name="T1">BarLineScatterCandleDataSet</typeparam>
 <typeparam name="T">BarLineScatterCandleData</typeparam>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BarLineChartBase`3.XAxis">
 <summary>
 获取X轴
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarLineScatterCandleData`2">
 <summary>
 BarLineChart数据基类
 </summary>
 <typeparam name="T1">ChartYAxisValue</typeparam>
 <typeparam name="T">BarLineScatterCandleSeries(Of ChartYAxisValue)</typeparam>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarLineScatterCandleData`2.#ctor">
 <summary>
 构造函数
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarLineScatterCandleData`2.#ctor(System.Collections.Generic.List{System.String})">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarLineScatterCandleData`2.#ctor(System.Collections.Generic.List{System.String},Smobiler.Core.Controls.ChartSeriesCollection{`0,`1})">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <param name="sets">数据集</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarLineScatterCandleSeries`1">
 <summary>
 Bar/Line数据集基类
 </summary>
 <typeparam name="T">ChartYAxisValue</typeparam>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarLineScatterCandleSeries`1.#ctor(Smobiler.Core.Controls.ChartYAxisValueCollection{`0},System.String)">
 <summary>
 构造函数
 </summary>
 <param name="yVals">数据元素集合</param>
 <param name="label">标签</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.LineRadarSeries`1">
 <summary>
 折线图数据集
 </summary>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.LineRadarSeries`1.#ctor(Smobiler.Core.Controls.ChartYAxisValueCollection{`0},System.String)">
 <summary>
 构造函数
 </summary>
 <param name="yVals">数据元素集合</param>
 <param name="label">标签</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.LineScatterCandleRadarSeries`1">
 <summary>
 Line/Radar数据集
 </summary>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.LineScatterCandleRadarSeries`1.#ctor(Smobiler.Core.Controls.ChartYAxisValueCollection{`0},System.String)">
 <summary>
 构造函数
 </summary>
 <param name="yVals">数据元素集合</param>
 <param name="label">标签</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarChart">
 <summary>
 柱状图表
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.BarChart.ValueSelected">
 <summary>
 在图表值选择时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarChartValueSelectedEventHandler">
 <summary>
 一个委托，它表示在图表值选择时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 BarChartValueSelectedEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarChartValueSelectedEventArgs">
 <summary>
 为BarChartValueSelected事件提供数据。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BarChartValueSelectedEventArgs.Series">
 <summary>
 获取事件的BarSeries
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BarChartValueSelectedEventArgs.YValue">
 <summary>
 获取事件的BarYAxisValue
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.BarChartValueSelectedEventArgs.XValue">
 <summary>
 获取事件XValue
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.BarData">
 <summary>
 柱图数据
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarData.#ctor">
 <summary>
 构造函数
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarData.#ctor(System.Collections.Generic.List{System.String})">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.BarData.#ctor(System.Collections.Generic.List{System.String},Smobiler.Core.Controls.BarSeriesCollection)">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <param name="sets">数据集</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarSeries">
 <summary>
 柱状图数据集
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarSeriesCollection">
 <summary>
 柱状图数据集集合
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.BarYAxisValue">
 <summary>
 柱状图数据元素
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.LineChart">
 <summary>
 线状图表
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.LineChart.ValueSelected">
 <summary>
 在图表值选择时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.LineChartValueSelectedEventHandler">
 <summary>
 一个委托，它表示在图表值选择时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 LineChartValueSelectedEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.LineChartValueSelectedEventArgs">
 <summary>
 为LineChartValueSelected事件提供数据。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.LineChartValueSelectedEventArgs.Series">
 <summary>
 获取事件LineSeries
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.LineChartValueSelectedEventArgs.YValue">
 <summary>
 获取事件ChartYAxisValue
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.LineChartValueSelectedEventArgs.XValue">
 <summary>
 获取事件XValue
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.LineData">
 <summary>
 折线图数据
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.LineData.#ctor">
 <summary>
 构造函数
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.LineData.#ctor(System.Collections.Generic.List{System.String})">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.LineData.#ctor(System.Collections.Generic.List{System.String},Smobiler.Core.Controls.LineSeriesCollection)">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <param name="sets">数据集</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.LineSeries">
 <summary>
 折线图数据集
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.LineSeries.#ctor(Smobiler.Core.Controls.ChartYAxisValueCollection{Smobiler.Core.Controls.ChartYAxisValue},System.String)">
 <summary>
 构造函数
 </summary>
 <param name="yVals">数据元素集合</param>
 <param name="label">标签</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.LineSeries.DrawFilled">
 <summary>
 获取和设置一个值，该值指示是否用DrawFilledColor指定的颜色填充数据区
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.LineSeries.DrawCubic">
 <summary>
 获取和设置一个值，该值指示是否显示为曲线
 </summary>
 <value></value>
 <returns></returns>
 <remarks>当为True时，显示为曲线，当为False时，显示为折线</remarks>
</member>
<member name="P:Smobiler.Core.Controls.LineSeries.DrawFilledColor">
 <summary>
 获取和设置填充数据区颜色
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.LineSeriesCollection">
 <summary>
 线图数据集集合
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.PieRadarChartBase`3">
 <summary>
 PieRadarChart基类
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.PieChart">
 <summary>
 饼状图表
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.PieChart.ValueSelected">
 <summary>
 在图表值选择时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.PieChart.UsePercentValues">
 <summary>
 获取和设置一个值，该值指示是否显示百分比
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.PieChart.DrawCenterText">
 <summary>
 获取和设置一个值，该值指示是否显示中心文本
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.PieChart.DrawSliceText">
 <summary>
 获取和设置一个值，该值指示是否显示扇面文本
 </summary>
 <value></value>
 <returns></returns>
 <remarks>仅在扇面最小比例超过10%时生效</remarks>
</member>
<member name="P:Smobiler.Core.Controls.PieChart.CenterText">
 <summary>
 获取和设置中心文本
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.PieChartValueSelectedEventHandler">
 <summary>
 一个委托，它表示在图表值选择时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 PieChartValueSelectedEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.PieChartValueSelectedEventArgs">
 <summary>
 为PieChartValueSelected事件提供数据。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.PieChartValueSelectedEventArgs.Series">
 <summary>
 获取事件Series
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.PieChartValueSelectedEventArgs.YValue">
 <summary>
 获取事件YValue
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.PieChartValueSelectedEventArgs.XValue">
 <summary>
 获取事件XValue
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.PieData">
 <summary>
 饼图数据
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.PieData.#ctor">
 <summary>
 构造函数
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.PieData.#ctor(System.Collections.Generic.List{System.String})">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.PieData.#ctor(System.Collections.Generic.List{System.String},Smobiler.Core.Controls.PieSeries)">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <param name="dataSet">数据</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.PieSeries">
 <summary>
 饼图数据集
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.PieSeries.#ctor(Smobiler.Core.Controls.ChartYAxisValueCollection{Smobiler.Core.Controls.ChartYAxisValue},System.String)">
 <summary>
 构造函数
 </summary>
 <param name="yVals">数据元素集合</param>
 <param name="label">标签</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.PieSeries.SliceSpace">
 <summary>
 获取和设置扇叶间隔空间大小，默认为0，最小0，最大45
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.PieSeries.SelectionShift">
 <summary>
 选择扇叶距离图表中心区的距离，默认为18
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.PieSeriesCollection">
 <summary>
 饼图数据集集合
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.RadarChart">
 <summary>
 雷达图
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.RadarChart.ValueSelected">
 <summary>
 在图表值选择时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.RadarChartValueSelectedEventHandler">
 <summary>
 一个委托，它表示在图表值选择时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 BubbleChartValueSelectedEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.RadarChartValueSelectedEventArgs">
 <summary>
 为事件RadarChartValueSelected提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.RadarChartValueSelectedEventArgs.Series">
 <summary>
 获取事件RadarSeries
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.RadarChartValueSelectedEventArgs.YValue">
 <summary>
 获取事件ChartYAxisValue
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.RadarChartValueSelectedEventArgs.XValue">
 <summary>
 获取事件XValue
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.RadarData">
 <summary>
 雷达图数据
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.RadarData.#ctor">
 <summary>
 构造函数
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.RadarData.#ctor(System.Collections.Generic.List{System.String})">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.RadarData.#ctor(System.Collections.Generic.List{System.String},Smobiler.Core.Controls.RadarSeriesCollection)">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <param name="sets">数据集</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.RadarSeries">
 <summary>
 雷达图数据集
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.RadarSeriesCollection">
 <summary>
 雷达图数据集集合
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ScatterChart">
 <summary>
 散点图
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.ScatterChart.ValueSelected">
 <summary>
 在图表值选择时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ScatterChart.SeriesShapMember">
 <summary>
 获取和设置数据集形状源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ScatterChart.ScatterShape">
 <summary>
 散点图形状
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ScatterChart.ScatterShape.SQUARE">
 <summary>
 正方形
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ScatterChart.ScatterShape.CIRCLE">
 <summary>
 圆形
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ScatterChart.ScatterShape.TRIANGLE">
 <summary>
 三角形
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ScatterChart.ScatterShape.CROSS">
 <summary>
 交叉
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.ScatterChart.ScatterShape.X">
 <summary>
 横线
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ScatterChartValueSelectedEventHandler">
 <summary>
 一个委托，它表示在图表值选择时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 ScatterChartValueSelectedEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ScatterChartValueSelectedEventArgs">
 <summary>
 为ScatterChartValueSelected事件提供数据。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ScatterChartValueSelectedEventArgs.Series">
 <summary>
 获取事件Series
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ScatterChartValueSelectedEventArgs.YValue">
 <summary>
 获取事件YValue
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ScatterChartValueSelectedEventArgs.XValue">
 <summary>
 获取事件XValue
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.ScatterData">
 <summary>
 散点图数据
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ScatterData.#ctor">
 <summary>
 构造函数
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ScatterData.#ctor(System.Collections.Generic.List{System.String})">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.ScatterData.#ctor(System.Collections.Generic.List{System.String},Smobiler.Core.Controls.ScatterSeriesCollection)">
 <summary>
 构造函数
 </summary>
 <param name="xVals">X轴坐标集合</param>
 <param name="sets">数据集</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ScatterSeries">
 <summary>
 散点图数据集
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ScatterSeries.Shape">
 <summary>
 获取数据集形状
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ScatterSeries.ShapeSize">
 <summary>
 获取数据集形状大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ScatterSeriesCollection">
 <summary>
 散点图数据集集合
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.CheckBox">
 <summary>
 复选框控件
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.CheckBox.TintColor">
 <summary>
 获取和设置样式颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.CheckBox.Style">
 <summary>
 获取和设置显示样式
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.CheckBoxStyle">
 <summary>
 CheckBox样式
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.MobileCheckdControlBase">
 <summary>
 选择项控件
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.MobileCheckdControlBase.CheckedChanged">
 <summary>
 在选择改变时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileCheckdControlBase.#ctor">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileCheckdControlBase.Checked">
 <summary>
 获取或设置选择状态
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileCheckdControlBase.Enabled">
 <summary>
 获取或设置一个值，该值指示是否已启用该控件。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileCheckdControlBase.OnControlEventRaisedInternal(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 控件事件处理
 </summary>
 <param name="eventName"></param>
 <param name="eventargs"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileCheckdControlBase.OnChecked">
 <summary>
 触发CheckChanged事件
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileCheckdControlBase.BindDisplayValue">
 <summary>
 获取和设置绑定显示值
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MobileCheckdControlBase.DisplayFormat">
 <summary>
 获取和设置显示模式
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.Switch">
 <summary>
 开关控件
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Switch.#ctor">
 <summary>
 实例化一个Switch对象
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Switch.CircleColor">
 <summary>
 获取和设置圆点颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Switch.CheckedColor">
 <summary>
 获取和设置Checked为true的颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Switch.UnCheckedColor">
 <summary>
 获取和设置Checked为false的颜色
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.ComboBox">
 <summary>
 下拉列表控件
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.ComboBox.ItemSelected">
 <summary>
 在列表元素选择后发生。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ComboBox.FontSize">
 <summary>
 获取或设置控件字体大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ComboBox.ForeColor">
 <summary>
 获取或设置控件的前景色，用于显示文本。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ComboBox.Text">
 <summary>
 获取或设置控件文本
 </summary>
 <value>与该控件关联的文本</value>
 <remarks>
 每个派生类以不同的方式使用控件的 Text 属性。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.ComboBox.Items">
 <summary>
 获取和设置元素集合。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ComboBox.ItemFontSize">
 <summary>
 获取或设置元素字体大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ComboBox.ItemForeColor">
 <summary>
 获取或设置元素前景色。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ComboBox.ReadOnly">
 <summary>
 获取或设置文本框是否只读
 </summary>
 <value>如果文本框只读，则为 true；否则为 false。默认为 false。</value>
</member>
<member name="P:Smobiler.Core.Controls.ComboBox.HorizontalAlignment">
 <summary>
 获取或设置控件水平方向
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.DatePicker">
 <summary>
 日期选择控件
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.DatePicker.ValueChanged">
 <summary>
 在日期/时间选择时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.DatePicker.ForeColor">
 <summary>
 获取或设置控件的前景色，用于显示文本。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.DatePicker.Value">
 <summary>
 获取和设置当前日期/时间
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.DatePicker.Mode">
 <summary>
 获取和设置日期/时间模式
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.DatePicker.FontSize">
 <summary>
 获取和设置控件字体大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.DatePicker.HorizontalAlignment">
 <summary>
 获取或设置控件水平方向
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.DatePicker.MaxDate">
 <summary>
 获取和设置可以选择的最大日期
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.DatePicker.MinDate">
 <summary>
 获取和设置可以选择的最小日期
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.DatePicker.MaximumDateTime">
 <summary>
 获取最小日期值。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.DatePicker.MinimumDateTime">
 <summary>
 获取最大日期值
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.DatePicker.BindDisplayValue">
 <summary>
 获取默认绑定值。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.DatePicker.Enabled">
 <summary>
 获取或设置一个值，该值指示是否已启用该控件。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.DatePicker.OnControlEventRaisedInternal(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 控件事件处理
 </summary>
 <param name="eventName"></param>
 <param name="eventargs"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.DatePicker.OnDatePicker">
 <summary>
 触发DatePick事件
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.DatePicker.Show(System.String,Smobiler.Core.Controls.DatePickrSelectedEventHandler)">
 <summary>
 显示选择时间/日期的界面
 </summary>
 <param name="handler">回调</param>
 <param name="sessionId">会话编号</param>
</member>
<member name="M:Smobiler.Core.Controls.DatePicker.Show(System.String,Smobiler.Core.Controls.DatePickerMode,Smobiler.Core.Controls.DatePickrSelectedEventHandler)">
 <summary>
 显示选择时间/日期的界面
 </summary>
 <param name="handler">回调</param>
 <param name="sessionId">会话编号</param>
 <param name="mode">日期/时间模式</param>
</member>
<member name="M:Smobiler.Core.Controls.DatePicker.Show(System.String,Smobiler.Core.Controls.DatePickerMode,System.DateTime,Smobiler.Core.Controls.DatePickrSelectedEventHandler)">
 <summary>
 显示选择时间/日期的界面
 </summary>
 <param name="handler">回调</param>
 <param name="sessionId">会话编号</param>
 <param name="mode">日期/时间模式</param>
 <param name="value">当前日期/时间</param>
</member>
<member name="M:Smobiler.Core.Controls.DatePicker.Show(System.String,Smobiler.Core.Controls.DatePickerMode,System.DateTime,System.DateTime,System.DateTime,Smobiler.Core.Controls.DatePickrSelectedEventHandler)">
 <summary>
 显示选择时间/日期的界面
 </summary>
 <param name="handler">回调</param>
 <param name="sessionId">会话编号</param>
 <param name="mode">日期/时间模式</param>
 <param name="value">当前日期/时间</param>
 <param name="minDate">可以选择最小日期</param>
 <param name="maxDate">可以选择最大日期</param>
</member>
<member name="T:Smobiler.Core.Controls.DatePickrSelectedEventHandler">
 <summary>
 一个委托，它代表DatePicker选择完成后需要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.DatePickrSelectedEventArgs"/> </param>
</member>
<member name="T:Smobiler.Core.Controls.DatePickrSelectedEventArgs">
 <summary>
 为DatePickrShow提供事件
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.DatePickrSelectedEventArgs.#ctor(Smobiler.Core.Controls.DatePickerMode,System.DateTime)">
 <summary>
 构造方法
 </summary>
 <param name="mode">日期/时间模式</param>
 <param name="currentDate">当前日期/时间</param>
</member>
<member name="M:Smobiler.Core.Controls.DatePickrSelectedEventArgs.#ctor(Smobiler.Core.Controls.DatePickerMode,System.DateTime,System.DateTime,System.DateTime)">
 <summary>
 构造方法
 </summary>
 <param name="mode">日期/时间模式</param>
 <param name="currentDate">当前日期/时间</param>
 <param name="minDate">可以选择最小日期</param>
 <param name="maxDate">可以选择最大日期</param>
</member>
<member name="P:Smobiler.Core.Controls.DatePickrSelectedEventArgs.Mode">
 <summary>
 获取日期/时间模式
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.DatePickrSelectedEventArgs.Value">
 <summary>
 获取当前日期/时间
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.DatePickrSelectedEventArgs.MinDate">
 <summary>
 获取可以选择最小日期
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.DatePickrSelectedEventArgs.MaxDate">
 <summary>
 获取可以选择最大日期
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.GridView">
 <summary>
 表格控件
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.GridView.Refresh">
 <summary>
 在用户下拉刷新时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.GridView.ReachEnd">
 <summary>
 在上划到底部时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.GridView.PositionChanged">
 <summary>
 在位置变化时发生。
 </summary>
 <remarks>只支持竖向滚动</remarks>
</member>
<member name="E:Smobiler.Core.Controls.GridView.CellBinding">
 <summary>
 在单元绑定时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.GridView.CellBind">
 <summary>
 在单元绑定后发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.GridView.DataSourceUpdate">
 <summary>
 在更新数据源时发生。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.GridView.Horizontal">
 <summary>
 获取和设置一个值，该值指示是否水平滑动
 </summary>
 <value>水平滑动设置为 <c>true</c>，否则为 <c>flase</c></value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.ColumnNum">
 <summary>
 获取和设置表格控件显示的列数
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.ShowGridLine">
 <summary>
 获取和设置一个值，该值指示是否显示单元格之间的分隔线
 </summary>
 <value>如果显示，设置为true，否则，设置为false</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.GridLineColor">
 <summary>
 获取和设置单元格之间的分隔线颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.DataSource">
 <summary>
 获取或设置表格数据源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.GridView.DataMember">
 <summary>
 获取或设置数据源名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.GridView.BindMode">
 <summary>
 获取和设置绑定模式
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.TemplateControlName">
 <summary>
 获取和设置模板控件名称
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.TemplateControl">
 <summary>
 获取和设置模板控件
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.HeaderControlName">
 <summary>
 获取和设置页眉控件布局
 </summary>
 <returns></returns>
 <remarks>仅在窗体第一次或重新载入时生效，如果设置了HeaderControl，那么设置此属性无效</remarks>
</member>
<member name="P:Smobiler.Core.Controls.GridView.HeaderControl">
 <summary>
 获取和设置页眉控件
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.FooterControlName">
 <summary>
 获取和设置页脚控件布局
 </summary>
 <returns></returns>
 <remarks>仅在窗体第一次或重新载入时生效，如果设置了FooterControl，那么设置此属性无效</remarks>
</member>
<member name="P:Smobiler.Core.Controls.GridView.FooterControl">
 <summary>
 获取和设置页脚控件
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.Cells">
 <summary>
 获取单元格集合
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.RaiseRefresh">
 <summary>
 获取和设置是否可触发下拉刷新事件。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.RaiseReachEnd">
 <summary>
 获取和设置是否可触发上划底部事件。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.RaisePositionChanged">
 <summary>
 获取和设置是否触发滚动时位置变化事件。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.ScrollEnabled">
 <summary>
 获取和设置一个值，该值指示是否启用容器滚动。
 </summary>
 <returns></returns>
 <remarks>5.0版本后支持</remarks>
</member>
<member name="P:Smobiler.Core.Controls.GridView.PageSize">
 <summary>
 获取或设置一个值，该值指示当前控件的数据页大小，当前绑定数据大于PageSize设定的值时，第一次只会显示PageSize设定值的数据量，会根据PageSize加载剩余数据量
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.GridView.PageSizeLoadText">
 <summary>
 获取和设置数据页加载文本
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.PageSizeLoadCompleteText">
 <summary>
 获取和设置数据页加载完成文本
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.PageSizeTextSize">
 <summary>
 获取和设置数据页加载文本大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.PageSizeTextColor">
 <summary>
 获取和设置数据页加载文本颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.PageSizeBackColor">
 <summary>
 获取和设置数据页加载文本背景颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.PageSizeTextHeight">
 <summary>
 获取和设置数据页面加载文本高度
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridView.PageSizeLoadMode">
 <summary>
 获取和设置分页加载模式
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.GridView.NewCell">
 <summary>
 添加新单元格
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.GridView.NewCell(System.Object[])">
 <summary>
 添加新单元格
 </summary>
 <param name="params">模板参数</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.GridView.NewCell(System.Object,System.String,System.Object[])">
 <summary>
 添加新单元格
 </summary>
 <param name="dataSource">数据源</param>
 <param name="dataMember">数据源名称</param>
 <param name="params">模板参数</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.GridView.UpdateCell(Smobiler.Core.Controls.GridViewCell,System.Object,System.String)">
 <summary>
 更新单元格。
 </summary>
 <param name="cell">单元格</param>
 <param name="dataSource">数据源</param>
 <param name="dataMember">数据源名称</param>
</member>
<member name="M:Smobiler.Core.Controls.GridView.DataBind(System.Object[])">
 <summary>
 数据绑定
 </summary>
 <param name="params"></param>
</member>
<member name="M:Smobiler.Core.Controls.GridView.ScrollTo(System.Single)">
 <summary>
 滚动到指定位置
 </summary>
 <param name="position">位置</param>
</member>
<member name="T:Smobiler.Core.Controls.GridViewTemplateBindEventHandler">
 <summary>
 一个委托，它表示模板控件绑定过程要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.GridViewTemplateBindEventArgs"/></param>
</member>
<member name="T:Smobiler.Core.Controls.GridViewTemplateBindEventArgs">
 <summary>
 为 GridViewTemplateBind 绑定提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.GridViewTemplateBindEventArgs.Cell">
 <summary>
 获取绑定行
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.GridViewTemplateBindEventArgs.Data">
 <summary>
 获取绑定数据
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.GridViewCell">
 <summary>
 表格单元
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.GridViewCellCollection">
 <summary>
 表格单元集合
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.GridViewCellCollection.#ctor(Smobiler.Core.Controls.IMobileViewCollectionOwner)">
 <summary>
 构造函数
 </summary>
 <param name="owner">IMobileViewCollectionOwner</param>
</member>
<member name="T:Smobiler.Core.Controls.FontIcon">
 <summary>
 字体图标。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.FontIcon.ResourceID">
 <summary>
 获取和设置资源名称。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.FontIcon.ForeColor">
 <summary>
 获取和设置控件的前景色，用于显示文本。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.FontIcon.FontName">
 <summary>
 获取和设置字体名称。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.FontIcon.BindDisplayValue">
 <summary>
 获取和设置默认绑定值。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.FontIconName">
 <summary>
 字体图标名称
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.FontIconName.FontAwesome">
 <summary>
 FontAwesome
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.Image">
 <summary>
 图像控件
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Image.SizeMode">
 <summary>
 获取和设置图片显示模式。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Image.ResourceMode">
 <summary>
 获取或设置获取资源模式
 </summary>
 <value>默认为File，代表直接从文件读取，如果设置为Customize，代表可以从自定义的接口中获取图片的二进制数据</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Image.ResourceID">
 <summary>
 获取或设置图像资源名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Image.ResourcePath">
 <summary>
 获取或设置图像资源路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Image.ResourceData">
 <summary>
 获取和设置图像资源数据
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Image.ResourceContentType">
 <summary>
 获取和设置图像资源数据类型
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Image.Zooming">
 <summary>
 获取或设置一个值，该值指示是否支持绽放图片。
 </summary>
 <value>如果支持绽放图片，设置为true，否则为false</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Image.ZoomingTitle">
 <summary>
 获取和设置缩放界面标题
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Image.ZoomingResourceID">
 <summary>
 获取或设置缩放界面图像资源名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Image.ZoomingResourceData">
 <summary>
 获取和设置缩放界面图像资源数据
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.Image.Refresh">
 <summary>
 重新加载资源。
 </summary>
 <remarks>用于在ResourceID不改变的情况下，通过其他方式替换了ResourceID对应的资源文件后调用。</remarks>
</member>
<member name="P:Smobiler.Core.Controls.Image.BindDisplayValue">
 <summary>
 获取和设置默认绑定值。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.ZoomImage">
 <summary>
 缩放图像控件
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ZoomImage.ResourceMode">
 <summary>
 获取或设置获取资源模式
 </summary>
 <value>默认为File，代表直接从文件读取，如果设置为Customize，代表可以从自定义的接口中获取图片的二进制数据</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ZoomImage.ResourceID">
 <summary>
 获取或设置图像资源名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ZoomImage.ResourcePath">
 <summary>
 获取或设置图像资源路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ZoomImage.ResourceData">
 <summary>
 获取和设置图像资源数据
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ZoomImage.ResourceContentType">
 <summary>
 获取和设置图像资源数据类型
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ZoomImage.MinZoomScale">
 <summary>
 图片缩放最小比例
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ZoomImage.MaxZoomScale">
 <summary>
 图片缩放最大比例
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ZoomImage.ZoomScale">
 <summary>
 图片缩放初始比例
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.ZoomImage.Refresh">
 <summary>
 重新加载资源。
 </summary>
 <remarks>用于在ResourceID不改变的情况下，通过其他方式替换了ResourceID对应的资源文件后调用。</remarks>
</member>
<member name="P:Smobiler.Core.Controls.ZoomImage.BindDisplayValue">
 <summary>
 获取和设置默认绑定值。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.Line">
 <summary>
 线条控件
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.Line.Orientation">
 <summary>
 获取或设置线条方向
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.OrientationAlignment">
 <summary>
 方向
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.OrientationAlignment.Horizontal">
 <summary>
 水平
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.OrientationAlignment.Vertical">
 <summary>
 垂直
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ListView">
 <summary>
 列表控件。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.ListView.Refresh">
 <summary>
 在用户下拉刷新时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.ListView.ReachEnd">
 <summary>
 在上划到底部时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.ListView.PositionChanged">
 <summary>
 在位置变化时发生。
 </summary>
 <remarks>只支持竖向滚动</remarks>
</member>
<member name="E:Smobiler.Core.Controls.ListView.RowBinding">
 <summary>
 在行绑定时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.ListView.RowBind">
 <summary>
 在行绑定后发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.ListView.DataSourceUpdate">
 <summary>
 在更新数据源时发生。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ListView.Horizontal">
 <summary>
 获取和设置一个值，该值指示是否水平滑动
 </summary>
 <value>水平滑动设置为 <c>true</c>，否则为 <c>flase</c></value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.Rows">
 <summary>
 获取ListViewRowCollection
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.DataSource">
 <summary>
 获取或设置表格数据源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ListView.DataMember">
 <summary>
 获取或设置数据源名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ListView.BindMode">
 <summary>
 获取和设置绑定模式
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.TemplateControlName">
 <summary>
 获取和设置模板控件名称
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.TemplateControl">
 <summary>
 获取和设置模板控件。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.HeaderControlName">
 <summary>
 获取和设置页眉控件布局
 </summary>
 <returns></returns>
 <remarks>仅在窗体第一次或重新载入时生效，如果设置了HeaderControl，那么设置此属性无效</remarks>
</member>
<member name="P:Smobiler.Core.Controls.ListView.HeaderControl">
 <summary>
 获取和设置页眉控件
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.FooterControlName">
 <summary>
 获取和设置页脚控件布局
 </summary>
 <returns></returns>
 <remarks>仅在窗体第一次或重新载入时生效，如果设置了FooterControl，那么设置此属性无效</remarks>
</member>
<member name="P:Smobiler.Core.Controls.ListView.FooterControl">
 <summary>
 获取和设置页脚控件
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.ShowSplitLine">
 <summary>
 获取和设置一个值，该值指示是否显示单元格之间的分隔线
 </summary>
 <value>如果显示，设置为true，否则，设置为false</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.SplitLineColor">
 <summary>
 获取和设置单元格之间的分隔线颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.RaiseRefresh">
 <summary>
 获取和设置是否可触发下拉刷新事件。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.RaiseReachEnd">
 <summary>
 获取和设置是否可触发上划底部事件。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.RaisePositionChanged">
 <summary>
 获取和设置是否触发滚动时位置变化事件。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.ScrollEnabled">
 <summary>
 获取和设置一个值，该值指示是否启用容器滚动。
 </summary>
 <returns></returns>
 <remarks>5.0版本后支持</remarks>
</member>
<member name="P:Smobiler.Core.Controls.ListView.PageSize">
 <summary>
 获取或设置一个值，该值指示当前控件的数据页大小，当前绑定数据大于PageSize设定的值时，第一次只会显示PageSize设定值的数据量，会根据PageSize加载剩余数据量
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.ListView.PageSizeLoadText">
 <summary>
 获取和设置数据页加载文本
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.PageSizeLoadCompleteText">
 <summary>
 获取和设置数据页加载完成文本
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.PageSizeLoadMode">
 <summary>
 获取和设置PageSize加载模式
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.PageSizeTextSize">
 <summary>
 获取和设置数据页加载文本大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.PageSizeTextColor">
 <summary>
 获取和设置数据页加载文本颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.PageSizeBackColor">
 <summary>
 获取和设置数据页加载文本背景颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListView.PageSizeTextHeight">
 <summary>
 获取和设置数据页面加载文本高度
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.ListView.NewRow">
 <summary>
 添加行。
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.ListView.NewRow(System.Object[])">
 <summary>
 添加行。
 </summary>
 <param name="params">模板参数</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.ListView.NewRow(System.Object,System.String,System.Object[])">
 <summary>
 添加行。
 </summary>
 <param name="dataSource">数据源</param>
 <param name="dataMember">数据源名称</param>
 <param name="params">模板参数</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.ListView.UpdateRow(Smobiler.Core.Controls.ListViewRow,System.Object,System.String)">
 <summary>
 更新行。
 </summary>
 <param name="row">列表行</param>
 <param name="dataSource">数据源</param>
 <param name="dataMember">数据源名称</param>
</member>
<member name="M:Smobiler.Core.Controls.ListView.ScrollToIndex(System.Int32)">
 <summary>
 滚动到指定行
 </summary>
 <param name="index">行索引</param>
</member>
<member name="M:Smobiler.Core.Controls.ListView.ScrollTo(System.Single)">
 <summary>
 滚动到指定位置
 </summary>
 <param name="position">位置</param>
</member>
<member name="M:Smobiler.Core.Controls.ListView.DataBind(System.Object[])">
 <summary>
 数据绑定。
 </summary>
 <param name="params"></param>
</member>
<member name="T:Smobiler.Core.Controls.ListViewTemplateBindEventHandler">
 <summary>
 一个委托，它表示模板控件绑定过程要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.ListViewTemplateBindEventArgs"/></param>
</member>
<member name="T:Smobiler.Core.Controls.ListViewTemplateBindEventArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.Controls.ListViewTemplateBindEventHandler"/> 绑定提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ListViewTemplateBindEventArgs.Row">
 <summary>
 获取绑定行
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListViewTemplateBindEventArgs.Data">
 <summary>
 获取绑定数据
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.PageSizeLoadMode">
 <summary>
 分页数据加载模式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.PageSizeLoadMode.Button">
 <summary>
 底部使用Button来加载分页数据
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.PageSizeLoadMode.Scroll">
 <summary>
 使用向上滚动来加载新分页数据
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.PageSizeLoadMode.ScrollNoBottom">
 <summary>
 使用向上滚动来加载新分页数据，加载完成后不显示底部
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ListViewRow">
 <summary>
 列表控件行。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ListViewRow.SectionID">
 <summary>
 获取和设置区域编号
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ListViewRowCollection">
 <summary>
 列表控件行集合
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.ListViewSection">
 <summary>
 列表区域
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.ListViewSection.#ctor(System.String)">
 <summary>
 获取 <see cref="T:Smobiler.Core.Controls.ListViewSection"/> 实例对象
 </summary>
 <param name="sectionId">列表区域编号</param>
</member>
<member name="P:Smobiler.Core.Controls.ListViewSection.SectionID">
 <summary>
 获取列表区域编号
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ListViewSection.HasCreateRenderData">
 <summary>
 获取一个值，该值指示是否已经CreateRender了
 </summary>
 <returns></returns>
 <remarks>主要用来在SectionListView添加Row的时候，判断是不是需要发送Header数据</remarks>
</member>
<member name="T:Smobiler.Core.Controls.ListViewSectionCollection">
 <summary>
 列表区域集合
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ListViewSectionCollection.Item(System.String)">
 <summary>
 获取和设置指定区域名称的元素
 </summary>
 <param name="sectionId"></param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.SectionListView">
 <summary>
 区域列表
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.SectionListView.Rows">
 <summary>
 获取列表行集合
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SectionListView.Sections">
 <summary>
 获取列表区域集合
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SectionListView.SectionControlName">
 <summary>
 获取和设置区域控件布局
 </summary>
 <returns></returns>
 <remarks>仅在窗体第一次或重新载入时生效，如果设置了SectionControl，那么设置此属性无效</remarks>
</member>
<member name="P:Smobiler.Core.Controls.SectionListView.SectionControl">
 <summary>
 获取和设置页眉区域控件
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SectionListView.SectionMember">
 <summary>
 获取或设置区域数据源名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.SectionListView.SectionPicker">
 <summary>
 获取和设置一个值，该值指示是否显示区域选择器
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SectionListView.PickerScroll">
 <summary>
 获取和设置一个值，该值指示区域选择器是否自上往下排列
 </summary>
 <value>设置为true，自上往下排列并对超过区域可滚动，设置为false，区域选择器平分，默认为false</value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SectionListView.PickerBackColor">
 <summary>
 获取和设置选择器背景色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SectionListView.PickerForeColor">
 <summary>
 获取和设置选择器前景色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SectionListView.PickerFontSize">
 <summary>
 获取和设置选择器字体大小
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.SectionListView.NewRow">
 <summary>
 添加行
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.SectionListView.NewRow(System.Object[])">
 <summary>
 添加行
 </summary>
 <param name="params">模板参数</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.SectionListView.NewRow(System.Object,System.String,System.Object[])">
 <summary>
 添加行
 </summary>
 <param name="dataSource">数据源</param>
 <param name="dataMember">数据源名称</param>
 <param name="params">模板参数</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.SectionListView.NewRow(System.String)">
 <summary>
 添加列表行。
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.SectionListView.NewRow(System.String,System.Object[])">
 <summary>
 添加列表行。
 </summary>
 <param name="params">模板参数</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.SectionListView.NewRow(System.String,System.Object,System.String,System.Object[])">
 <summary>
 添加列表行。
 </summary>
 <param name="sectionId">列表区域编号</param>
 <param name="dataSource">数据源</param>
 <param name="dataMember">数据源名称</param>
 <param name="params">模板参数</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.SectionListView.NewSection(System.String)">
 <summary>
 添加列表区域
 </summary>
 <param name="sectionId">列表区域编号</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.SectionListView.NewSection(System.String,System.Object[])">
 <summary>
 添加列表区域
 </summary>
 <param name="sectionId">列表区域编号</param>
 <param name="params">模板参数</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.SectionListView.ScrollToIndex(System.Int32)">
 <summary>
 不支持的方法
 </summary>
 <param name="index">索引</param>
</member>
<member name="T:Smobiler.Core.Controls.SectionListViewRow">
 <summary>
 区域列表行
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.SectionListViewRow.SectionID">
 <summary>
 获取和设置区域编号
 </summary>
 <returns></returns>
 <remarks>在被添加到一个区域中时，只能设置一次区域编号</remarks>
</member>
<member name="T:Smobiler.Core.Controls.SectionListViewRowCollection">
 <summary>
 列表区域集合
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.MapTagView">
 <summary>
 地理位置标签
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.MapTagView.Press">
 <summary>
 在点击地理位置标签时发生。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MapTagView.Description">
 <summary>
 获取和设置地理位置标签描述
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MapTagView.Longitude">
 <summary>
 获取和设置地理位置经度
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.MapTagView.Latitude">
 <summary>
 获取和设置地理位置标签纬度
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.IMobileViewObjectCollectionOwner">
 <summary>
 IMobileViewObjectCollectionOwner
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewObjectCollectionOwner.ItemAdd(System.Object)">
 <summary>
 添加元素
 </summary>
 <param name="item">元素</param>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewObjectCollectionOwner.ItemRemove(System.Object,System.Int32)">
 <summary>
 删除元素
 </summary>
 <param name="item">元素</param>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewObjectCollectionOwner.ItemClear">
 <summary>
 清除元素
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewObjectCollectionOwner.Refresh">
 <summary>
 刷新元素
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.IMobileViewObjectCollectionOwner.ItemValueChanged(System.Object,System.Object)">
 <summary>
 元素属性修改
 </summary>
 <param name="item">元素</param>
 <param name="oldItem">原元素</param>
</member>
<member name="T:Smobiler.Core.Controls.MobileViewObjectCollectionBase`1">
 <summary>
 单对象集合
 </summary>
 <typeparam name="T">对象类型</typeparam>
</member>
<member name="P:Smobiler.Core.Controls.MobileViewObjectCollectionBase`1.Item(System.Int32)">
 <summary>
 获取根据指定索引的字符串
 </summary>
 <param name="index">索引</param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewObjectCollectionBase`1.Add(`0)">
 <summary>
 添加字符串
 </summary>
 <param name="item">字符串</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewObjectCollectionBase`1.AddRange(System.Collections.IEnumerable)">
 <summary>
 添加字符串集合
 </summary>
 <param name="items">字符串集合</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewObjectCollectionBase`1.Clear">
 <summary>
 清空字符串列表
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewObjectCollectionBase`1.Contains(`0)">
 <summary>
 获取是否包含指定字符串
 </summary>
 <param name="item">字符串</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewObjectCollectionBase`1.IndexOf(`0)">
 <summary>
 获取指定字符串的索引
 </summary>
 <param name="item">字符串</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewObjectCollectionBase`1.Remove(`0)">
 <summary>
 删除指定编号的字符串
 </summary>
 <param name="value">索引</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.MobileViewObjectCollectionBase`1.RemoveAt(System.Int32)">
 <summary>
 删除指定索引的字符串
 </summary>
 <param name="index">索引</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.MobileViewStringCollection">
 <summary>
 字符串列表类
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.PageView">
 <summary>
 页面控件
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.PageView.PageIndexChanged">
 <summary>
 在页面索引改变时触发。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.PageView.PageBinding">
 <summary>
 在页绑定时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.PageView.PageBind">
 <summary>
 在页绑定后发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.PageView.DataSourceUpdate">
 <summary>
 在更新数据源时发生。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.PageView.Vertical">
 <summary>
 获取和设置一个值，该值指示页面是否垂直滚动。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PageView.AutoPlay">
 <summary>
 获取和设置一个值，该值指示是否自动轮播页面。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PageView.PageIndex">
 <summary>
 获取当前页面索引。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PageView.IsLoop">
 <summary>
 获取和设置一个值，该值指示是否循环轮播页面。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PageView.Interval">
 <summary>
 获取或设置自动轮播间隔时间（以秒为单位）
 </summary>
 <value>该值不能小于 1，默认值3</value>
 <returns></returns>
 <remarks>
 在Timer运行期间，修改此属性值，必须在Timer重新Start时才生效。
 由于计时器组件由客户端触发，间隔时间并不能保证精度。误差时间不能保证。但是计时器组件能保证在网络不通畅的情况下的持续触发Tick事件。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.PageView.Locked">
 <summary>
 获取和设置一个值，该值指示是否锁定页面并且切换页面。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PageView.ShowIndicator">
 <summary>
 获取和设置一个值，该值指示是否显示界面的圆点。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PageView.DataSource">
 <summary>
 获取或设置表格数据源
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.PageView.DataMember">
 <summary>
 获取或设置数据源名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.PageView.BindMode">
 <summary>
 获取和设置绑定模式
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PageView.TemplateControlName">
 <summary>
 获取和设置页面模板控件名称。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PageView.TemplateControl">
 <summary>
 获取和设置页面模板控件。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PageView.Pages">
 <summary>
 获取页面集合。
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.PageView.GotoPage(System.Int32)">
 <summary>
 跳转到指定索引位置的页面
 </summary>
 <param name="pageIndex">页面索引</param>
</member>
<member name="M:Smobiler.Core.Controls.PageView.NewPage">
 <summary>
 添加页面。
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.PageView.NewPage(System.Object[])">
 <summary>
 添加页面。
 </summary>
 <param name="params">模板页构建函数参数</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.PageView.NewPage(System.Object,System.String,System.Object[])">
 <summary>
 添加页面。
 </summary>
 <param name="dataSource">数据源</param>
 <param name="dataMember">数据源名称</param>
 <param name="params">模板页构建函数参数</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.PageView.UpdatePage(Smobiler.Core.Controls.PageViewItem,System.Object,System.String)">
 <summary>
 更新页面。
 </summary>
 <param name="page">页面</param>
 <param name="dataSource">数据源</param>
 <param name="dataMember">数据源名称</param>
</member>
<member name="M:Smobiler.Core.Controls.PageView.DataBind(System.Object[])">
 <summary>
 数据绑定。
 </summary>
 <param name="params">模板页构建函数参数</param>
</member>
<member name="T:Smobiler.Core.Controls.PageViewTemplateBindEventHandler">
 <summary>
 一个委托，它表示模板控件绑定过程要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.PageViewTemplateBindEventArgs"/></param>
</member>
<member name="T:Smobiler.Core.Controls.PageViewTemplateBindEventArgs">
 <summary>
 为 PageViewTemplateBind 绑定提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.PageViewTemplateBindEventArgs.Page">
 <summary>
 获取绑定行
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.PageViewTemplateBindEventArgs.Data">
 <summary>
 获取绑定数据
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.PageViewItem">
 <summary>
 页面控件元素。
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.PageViewItemCollection">
 <summary>
 页面控件元素集合。
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.Panel">
 <summary>
 Panel 类
 </summary>
 <seealso cref="T:Smobiler.Core.Controls.MobileContainerControl" />
</member>
<member name="E:Smobiler.Core.Controls.Panel.Press">
 <summary>
 在触摸操作激活时触发。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.Panel.LongPress">
 <summary>
 在触摸持续一段时间后发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.Panel.Refresh">
 <summary>
 在下拉刷新时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.Panel.ReachEnd">
 <summary>
 在滚动到底部时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.Panel.PositionChanged">
 <summary>
 在位置变化时发生。
 </summary>
 <remarks>只支持竖向滚动</remarks>
</member>
<member name="P:Smobiler.Core.Controls.Panel.Scrollable">
 <summary>
 获取和设置一个值，该值指示在子控件超出容器范围时，容器是否可滚动。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Panel.RaiseRefresh">
 <summary>
 获取和设置一个值，该值指示是否在Panel可滚动时，当从顶部向下划动时，是否触发Refresh事件
 </summary>
 <returns></returns>
 <remarks>必须设置为Scrollable为True</remarks>
</member>
<member name="P:Smobiler.Core.Controls.Panel.RaiseReachEnd">
 <summary>
 获取和设置一个值，该值指示是否在Panel可滚动时，当滚动到底部时，触发ReachEnd事件
 </summary>
 <returns></returns>
 <remarks>必须设置为Scrollable为True</remarks>
</member>
<member name="P:Smobiler.Core.Controls.Panel.RaisePositionChanged">
 <summary>
 获取和设置是否触发滚动时位置变化事件。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Panel.Horizontal">
 <summary>
 获取和设置一个值，该值指示是否水平滑动
 </summary>
 <value>水平滑动设置为 <c>true</c>，否则为 <c>flase</c></value>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Panel.KeyboardScrollHidden">
 <summary>
 获取和设置一个值，该值指示用户拖拽滚动视图的时候，是否要隐藏软键盘。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Panel.ScrollEnabled">
 <summary>
 获取和设置一个值，该值指示在Scrollable为true时，是否启用容器滚动。
 </summary>
 <returns></returns>
 <remarks>5.0版本后支持</remarks>
</member>
<member name="P:Smobiler.Core.Controls.Panel.ShowHorizontalScrollBar">
 <summary>
 获取和设置一个值，该值指示是否显示水平滚动条。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Panel.ShowVerticalScrollBar">
 <summary>
 获取和设置一个值，该值指示是否显示垂直滚动条。
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.Panel.ScrollToTop(System.Boolean)">
 <summary>
 滚动到ScrollablePanel的顶部
 </summary>
 <param name="animation">是否显示动画效果</param>
 <remarks>仅在Panel的属性Scrollable设置为True生效，可选参数，默认为True</remarks>
</member>
<member name="M:Smobiler.Core.Controls.Panel.ScrollToBottom(System.Boolean)">
 <summary>
 滚动到ScrollablePanel的底部
 </summary>
 <param name="animation">是否显示动画效果，可选参数，默认为True</param>
 <remarks>仅在Panel的属性Scrollable设置为True生效</remarks>
</member>
<member name="M:Smobiler.Core.Controls.Panel.ScrollTo(System.Single,System.Boolean)">
 <summary>
 滚动到指定位置
 </summary>
 <param name="pos">当前位置</param>
 <param name="animation">是否显示动画效果</param>
</member>
<member name="M:Smobiler.Core.Controls.Panel.ScrollTo(System.Single,System.Single,System.Boolean)">
 <summary>
 滚动到指定位置
 </summary>
 <param name="x">X坐标</param>
 <param name="y">Y坐标</param>
 <param name="animation">是否显示动画效果</param>
</member>
<member name="P:Smobiler.Core.Controls.Panel.Touchable">
 <summary>
 获取和设置一个值，该值指示当前控件是否可点击。
 </summary>
 <returns></returns>
 <remarks>Scrollable和Touchable不能同时设置为true，运行时不支持修改</remarks>
</member>
<member name="P:Smobiler.Core.Controls.Panel.TouchDisabled">
 <summary>
 获取和设置一个值，该值指示是否禁止响应点击。
 </summary>
 <value>默认为false，设置为false禁止响应点击，设置为true可以响应点击</value>
 <remarks>该值仅在Touchable属性为true时生效</remarks>
 <returns>运行时可修改此属性</returns>
</member>
<member name="P:Smobiler.Core.Controls.Panel.TouchOpacity">
 <summary>
 获取和设置触摸操作激活时的透明度度
 </summary>
 <value>介于0到100之间</value>
 <remarks>该值仅在Touchable属性为true时生效</remarks>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.Panel.OnClick">
 <summary>
 触发Click事件
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.Panel.OnControlEventRaisedInternal(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
 <summary>
 按钮事件处理
 </summary>
 <param name="eventName"></param>
 <param name="eventargs"></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.ScrollPositionChangedEventHandler">
 <summary>
 一个委托，它表示滚动位置化时的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.ScrollPositionChangedEventArgs"/></param>
</member>
<member name="T:Smobiler.Core.Controls.ScrollPositionChangedEventArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.Controls.ScrollPositionChangedEventHandler"/> 绑定提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.ScrollPositionChangedEventArgs.Position">
 <summary>
 获取当前滚动位置
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.ScrollPositionChangedEventArgs.PositionType">
 <summary>
 获取滚动类型
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.ScrollPositionType">
 <summary>
 位置滚动类型
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ScrollPositionType.DragBegin">
 <summary>
 开始滚动
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ScrollPositionType.DragEnd">
 <summary>
 结束滚动
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.ScrollPositionType.MomentumEnd">
 <summary>
 划动结束
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.Picker">
 <summary>
 元素选择控件
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.Picker.SelectedIndexChanged">
 <summary>
 当选择索引改变时触发。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.Picker.ForeColor">
 <summary>
 获取和设置元素前景色。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Picker.SelectedForeColor">
 <summary>
 获取和设置选中元素前景色。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Picker.FontSize">
 <summary>
 获取或设置控件字体大小
 </summary>
 <value>默认值6</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Picker.Items">
 <summary>
 获取和设置Picker元素。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Picker.SelectedIndex">
 <summary>
 获取和设置Picker选择元素索引。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Picker.SelectedItem">
 <summary>
 获取Picker选择元素
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.Progress">
 <summary>
 进度条控件
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Progress.Value">
 <summary>
 获取和设置进度值，该值为Float类型，必须在0和1之间
 </summary>
 <value></value>
 <returns></returns>
 <remarks>在小于0时，自动设置为0，在大于1时，自动设置为1</remarks>
</member>
<member name="P:Smobiler.Core.Controls.Progress.TrackColor">
 <summary>
 获取和设置进度条颜色。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Progress.ValueColor">
 <summary>
 获取和设置进度颜色。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Progress.BindDisplayValue">
 <summary>
 获取和设置默认绑定值。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.SegmentedControl">
 <summary>
 单元控件
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.SegmentedControl.SelectedIndexChanged">
 <summary>
 在单元选择改变时触发。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.Items">
 <summary>
 获取和设置单元格集合
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.SelectedIndex">
 <summary>
 获取和设置选择单元索引
 </summary>
 <returns></returns>
 <value>-1和Items的长度区间</value>
 <remarks>取消选择设置为-1</remarks>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.SelectedItem">
 <summary>
 获取选择单元
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.Enabled">
 <summary>
 获取或设置一个值，该值指示是否已启用该控件。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.SelectedFontSize">
 <summary>
 获取和设置节点选择字体大小。
 </summary>
 <value>The size of the selected font.</value>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.SelectedColor">
 <summary>
 获取和设置节点选择前景颜色。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.SelectedBackColor">
 <summary>
 获取和设置节点选择背景颜色。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.UnSelectedFontSize">
 <summary>
 获取和设置节点未选择字体大小。
 </summary>
 <value>The size of the selected font.</value>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.UnSelectedColor">
 <summary>
 获取和设置节点未选择前景颜色。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.UnSelectedBackColor">
 <summary>
 获取和设置节点未选择背景颜色。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.SegmentedBorderRadius">
 <summary>
 获取和设置节点角度。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SegmentedControl.Portrait">
 <summary>
 获取和设置一个值，该值指示是否竖向排列
 </summary>
 <value>true 竖向排列，false 横向排列，默认false</value>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.Slider">
 <summary>
 滚动条控件
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.Slider.ValueChanged">
 <summary>
 在滚动条值改变时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Slider.Enabled">
 <summary>
 获取或设置一个值，该值指示是否已启用该控件。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Slider.MinValue">
 <summary>
 获取和设置滚动条最小值。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Slider.MaxValue">
 <summary>
 获取和设置滚动条最大值。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Slider.Value">
 <summary>
 获取和设置滚动条值。
 </summary>
 <value></value>
 <returns></returns>
 <remarks>暂不支持在创建后修改Value的值</remarks>
</member>
<member name="P:Smobiler.Core.Controls.Slider.Step">
 <summary>
 获取和设置滚动条移动最小值。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Slider.TrackColor">
 <summary>
 获取和设置滚动条颜色。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Slider.ValueColor">
 <summary>
 获取和设置进度颜色。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Slider.HandleColor">
 <summary>
 获取和设置滑块颜色。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.Spinner">
 <summary>
 下拉列表控件
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.Spinner.ItemSelected">
 <summary>
 在列表元素选择后发生。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.Spinner.FontSize">
 <summary>
 获取或设置控件字体大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Spinner.ForeColor">
 <summary>
 获取或设置控件的前景色，用于显示文本。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Spinner.Text">
 <summary>
 获取或设置控件文本
 </summary>
 <value>与该控件关联的文本</value>
 <remarks>
 每个派生类以不同的方式使用控件的 Text 属性。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.Spinner.Items">
 <summary>
 获取和设置Picker元素。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Spinner.ItemFontSize">
 <summary>
 获取或设置元素字体大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Spinner.ItemForeColor">
 <summary>
 获取或设置元素前景色。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Spinner.ReadOnly">
 <summary>
 获取或设置文本框是否只读
 </summary>
 <value>如果文本框只读，则为 true；否则为 false。默认为 false。</value>
</member>
<member name="P:Smobiler.Core.Controls.Spinner.HorizontalAlignment">
 <summary>
 获取或设置控件水平方向
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.SpinnerItemSelectedEventArgs">
 <summary>
 为Spinner ItemSelected事件提供数据
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.SwipeView">
 <summary>
 侧滑控件
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.SwipeView.ActionNotification">
 <summary>
 侧滑控件动作通知时触发。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.SwipeView.RightControlName">
 <summary>
 获取和设置右侧滑控件名称
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SwipeView.RightControl">
 <summary>
 获取和设置右侧滑控件
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SwipeView.LeftControlName">
 <summary>
 获取和设置左侧滑控件名称
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SwipeView.LeftControl">
 <summary>
 获取和设置左侧滑控件
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.SwipeView.MinSwipeDistance">
 <summary>
 获取和设置触发滑动的最小移动距离
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.SwipeView.Close">
 <summary>
 关闭侧滑控件
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.SwipeView.OpenLeft">
 <summary>
 打开左侧滑控件
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.SwipeView.OpenRight">
 <summary>
 打开右侧滑控件
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.SwipeViewActionNotificationEventHandler">
 <summary>
 一个委托，它表示在侧滑控件动作通知时要调用的方式
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 e</param>
</member>
<member name="T:Smobiler.Core.Controls.SwipeViewActionNotificationEventArgs">
 <summary>
 包含客户端侧滑控件动作通知时的事件数据
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.SwipeViewActionNotificationEventArgs.Action">
 <summary>
 获取侧滑控件动作
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.SwipeViewAction">
 <summary>
 侧滑控件动作
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.SwipeViewAction.LeftOpen">
 <summary>
 左开
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.SwipeViewAction.LeftClose">
 <summary>
 左关
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.SwipeViewAction.RightOpen">
 <summary>
 右开
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.SwipeViewAction.RightClose">
 <summary>
 右关
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.TabPageViewTitleStyle">
 <summary>
 TabPageView显示样式
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.TabPageViewTitleStyle.Empty">
 <summary>
 获取一个空的TabPageViewTitleIndicatorStyle
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.TabPageViewTitleStyle.#ctor(System.Drawing.Color)">
 <summary>
 实例化一个TabPageViewTitleIndicatorStyle对象
 </summary>
 <param name="backColor"></param>
</member>
<member name="M:Smobiler.Core.Controls.TabPageViewTitleStyle.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
 <summary>
 实例化一个TabPageViewTitleIndicatorStyle对象
 </summary>
 <param name="backColor">背景色</param>
 <param name="foreColor">背景色</param>
 <param name="selectedColor">选择时前景色</param>
</member>
<member name="M:Smobiler.Core.Controls.TabPageViewTitleStyle.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single)">
 <summary>
 实例化一个TabPageViewTitleIndicatorStyle对象
 </summary>
 <param name="backColor">背景色</param>
 <param name="foreColor">背景色</param>
 <param name="selectedColor">选择时前景色</param>
 <param name="fontSize">字体大小</param>
</member>
<member name="M:Smobiler.Core.Controls.TabPageViewTitleStyle.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.Color,System.Int32)">
 <summary>
 实例化一个TabPageViewTitleIndicatorStyle对象
 </summary>
 <param name="backColor">背景色</param>
 <param name="foreColor">背景色</param>
 <param name="selectedColor">选择时前景色</param>
 <param name="fontSize">字体大小</param>
 <param name="borderColor">边框颜色</param>
 <param name="borderSize">边框大小</param>
</member>
<member name="P:Smobiler.Core.Controls.TabPageViewTitleStyle.BackColor">
 <summary>
 获取背景色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.TabPageViewTitleStyle.SelectedForeColor">
 <summary>
 获取选择时前景色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.TabPageViewTitleStyle.ForeColor">
 <summary>
 获取前景色，用于显示文本。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.TabPageViewTitleStyle.BorderColor">
 <summary>
 获取边框颜色
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.TabPageViewTitleStyle.BorderSize">
 <summary>
 获取边框大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.TabPageViewTitleStyle.FontSize">
 <summary>
 获取字体大小
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.TabPageViewTitleIndicatorStyleConverter">
 <summary>
 为TabPageViewTitleIndicatorStyle提供样式转换
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.TabPageControl">
 <summary>
 TabPageView元素控件
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.TabPageView">
 <summary>
 单元页面控件
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.TabPageView.PageIndexChanged">
 <summary>
 在页面索引改变时触发。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.TabPageView.PageIndex">
 <summary>
 获取显示Page页索引
 </summary>
 <returns></returns>
 <remarks>设置页索引使用GotoPage方法</remarks>
</member>
<member name="P:Smobiler.Core.Controls.TabPageView.PageCount">
 <summary>
 获取和设置Page总页数
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.TabPageView.PageIndicator">
 <summary>
 获取和设置显示标识样式
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.TabPageView.ScrollEnabled">
 <summary>
 获取和设置是否允许滚动
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.TabPageView.Animation">
 <summary>
 获取和设置一个值，该值指示是否使用轮播动画。
 </summary>
 <value>默认值为true，不需要显示动画设置为false</value>
 <returns></returns>
 <remarks>轮播动画是指在页面切换时，会显示一个滚动的动画，但是如果页面过多时，跳转界面会显示过多的动画效果，可设置此属性为false关闭动画效果，客户端内核版本>=4.9此属性生效</remarks>
</member>
<member name="P:Smobiler.Core.Controls.TabPageView.Titles">
 <summary>
 获取和设置标题集合
 </summary>
 <returns></returns>
 <remarks>仅在PageIndicator为Title时有效</remarks>
</member>
<member name="P:Smobiler.Core.Controls.TabPageView.TitleWidth">
 <summary>
 获取和设置标题宽度
 </summary>
 <value>默认值为0，代表根据Titles撑满，如果设置值，Titles总宽度小于等于当前控件的宽度时平分并撑满，超过当前控件宽度时就可滑动</value>
 <returns></returns>
 <remarks>仅在PageIndicator为Title时有效</remarks>
</member>
<member name="P:Smobiler.Core.Controls.TabPageView.TitleStyle">
 <summary>
 获取和设置标题样式
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.TabPageView.GotoPage(System.Int32)">
 <summary>
 跳转到指定索引位置的页面
 </summary>
 <param name="pageIndex">页面索引</param>
</member>
<member name="T:Smobiler.Core.Controls.TabPageIndicator">
 <summary>
 TabPage显示标识
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.TabPageIndicator.None">
 <summary>
 无显示标识
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.TabPageIndicator.Dot">
 <summary>
 点状显示标识
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Controls.TabPageIndicator.Title">
 <summary>
 标题显示标识
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.TabPageViewTab">
 <summary>
 TabPageViewTab
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.TabPageViewTab.#ctor">
 <summary>
 实例化一个TabPageViewTab对象
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.TabPageViewTab.#ctor(System.String)">
 <summary>
 实例化一个TabPageViewTab对象
 </summary>
 <param name="txt">文本</param>
</member>
<member name="M:Smobiler.Core.Controls.TabPageViewTab.#ctor(System.String,System.String)">
 <summary>
 实例化一个TabPageViewTab对象
 </summary>
 <param name="txt">文本</param>
 <param name="resId">资源编号</param>
</member>
<member name="M:Smobiler.Core.Controls.TabPageViewTab.#ctor(System.String,System.String,System.String)">
 <summary>
 实例化一个TabPageViewTab对象
 </summary>
 <param name="txt">文本</param>
 <param name="resId">资源编号</param>
 <param name="selectedResId">选择资源编号</param>
</member>
<member name="P:Smobiler.Core.Controls.TabPageViewTab.Text">
 <summary>
 获取和设置Tab文本
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.TabPageViewTab.ResourceID">
 <summary>
 获取和设置Tab资源编号
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.TabPageViewTab.SelectedResourceID">
 <summary>
 获取和设置Tab选择资源编号
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.TabPageViewTabCollection">
 <summary>
 TabPageViewTab集合
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.TabPageViewTabCollection.#ctor">
 <summary>
 实例化一个TabPageViewTabCollection对象
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.TabPageViewTabCollection.#ctor(Smobiler.Core.Controls.IMobileViewCollectionOwner)">
 <summary>
 实例化一个TabPageViewTabCollection对象
 </summary>
 <param name="owner">拥有者</param>
</member>
<member name="T:Smobiler.Core.Controls.Label">
 <summary>
 文本标签控件
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Label.Text">
 <summary>
 获取或设置控件文本
 </summary>
 <value>与该控件关联的文本</value>
 <remarks>
 每个派生类以不同的方式使用控件的 Text 属性。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.Label.VerticalAlignment">
 <summary>
 获取和设置文本垂直方向。
 </summary>
 <remarks>已知问题：IOS中在设置垂直居中时，会自适应控件大小，导致文字大小变化。</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Label.Selectable">
 <summary>
 获取或设置一个值，该值指示是否可以长按选择文本。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.Label.NumberOfLines">
 <summary>
 获取和设置一个值，该值指示显示的行数。
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Label.LineHeight">
 <summary>
 获取和设置一个值，该值指示行高。
 </summary>
 <remarks>设置为0，使用默认行高</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.Label.Underline">
 <summary>
 获取或设置文本下划线
 </summary>
 <value></value>
 <returns></returns>
 <remarks>LineThrough和Underline仅能支持一个，并且优先支持Underline</remarks>
</member>
<member name="P:Smobiler.Core.Controls.Label.LineThrough">
 <summary>
 获取或设置文本中划线
 </summary>
 <value></value>
 <returns></returns>
 <remarks>LineThrough和Underline仅能支持一个，并且优先支持Underline</remarks>
</member>
<member name="T:Smobiler.Core.Controls.MobileTextControl">
 <summary>
 文本控件
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.MobileTextControl.FontSize">
 <summary>
 获取或设置控件字体大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileTextControl.ForeColor">
 <summary>
 获取或设置控件的前景色，用于显示文本。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileTextControl.Bold">
 <summary>
 获取或设置文本粗体
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileTextControl.Italic">
 <summary>
 获取或设置文本斜体
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileTextControl.HorizontalAlignment">
 <summary>
 获取或设置控件水平方向
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.MobileTextControl.BindDisplayValue">
 <summary>
 获取和设置绑定控件默认绑定值。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.TextBox">
 <summary>
 文本框控件
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.TextBox.TextChanged">
 <summary>
 在Text属性改变时发生。
 </summary>
 <remarks>在代码中修改或由用户触发改变Text属性时都会触发这个事件</remarks>
</member>
<member name="E:Smobiler.Core.Controls.TextBox.TouchEnter">
 <summary>
 在触摸进入控件时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.TextBox.TouchLeave">
 <summary>
 在触摸进入控件时发生。
 </summary>
</member>
<member name="E:Smobiler.Core.Controls.TextBox.SubmitEditing">
 <summary>
 在软键盘确认/提交按钮点击时发生
 </summary>
 <remarks>单行可用</remarks>
</member>
<member name="P:Smobiler.Core.Controls.TextBox.Text">
 <summary>
 获取或设置控件文本
 </summary>
 <value>与该控件关联的文本</value>
 <remarks>
 每个派生类以不同的方式使用控件的 Text 属性。
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.TextBox.MaxLength">
 <summary>
 获取或设置文本框中最多允许的字符数。
 </summary>
 <value>文本框中最多允许的字符数。默认值为 0，表示未设置该属性。</value>
 <remarks>
 使用 MaxLength 属性限定可以在 TextBox 控件中输入的字符数。当设置的值小于0时，将自动设置为0
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.TextBox.SecurityMode">
 <summary>
 获取或设置一个值，该值指示是否密文显示。
 </summary>
 <value></value>
 <remarks>KeyboardType如果设置为PhonePad和EmailAddress时，SecurityMode属性无效</remarks>
</member>
<member name="P:Smobiler.Core.Controls.TextBox.ReadOnly">
 <summary>
 获取或设置文本框是否只读
 </summary>
 <value>如果文本框只读，则为 true；否则为 false。默认为 false。</value>
</member>
<member name="P:Smobiler.Core.Controls.TextBox.WaterMarkText">
 <summary>
 获取或设置文本框水印
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.TextBox.WaterMarkTextColor">
 <summary>
 获取或设置文本框水印颜色
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.TextBox.Multiline">
 <summary>
 获取或设置是否多行显示
 </summary>
 <value>如果多行显示，则为true，否则为false</value>
 <returns></returns>
 <remarks>
 Multiline只在KeyboardType为"Default", "EmailAddress"可用
 Android在KeyboardType为"Numeric", "PhonePad"模式下不能多行
 </remarks>
</member>
<member name="P:Smobiler.Core.Controls.TextBox.KeyboardType">
 <summary>
 获取或设置键盘模式
 </summary>
 <value></value>
 <returns>
 KeyboardType如果设置为PhonePad和EmailAddress时，SecurityMode属性无效
 PhonePad和EmailAddress是为输入电话号码和邮箱地址而优化的类型，不支持密文模式
 </returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.TextBox.ReturnKeyType">
 <summary>
 获取和设置确定返回键的外观
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.TextBox.SelectOnFocus">
 <summary>
 获取和设置一个值，该值指示当获得焦点的时候，文字是否会被选中
 </summary>
 <value>true当获取焦点时，文字会被选中，否则false，默认false</value>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Controls.TextBox.Focus(System.Boolean)">
 <summary>
 使控件获取焦点。
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.TextBox.Blur">
 <summary>
 使控件失去焦点。
 </summary>
</member>
<member name="T:Smobiler.Core.Controls.WebView">
 <summary>
 网页控件
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.Controls.WebView.OnMessage">
 <summary>
 在WebView控件返回消息时发生。
 </summary>
 <remarks>从浏览器中发送消息到此事件中，需要调用window.postMessage(data)</remarks>
</member>
<member name="E:Smobiler.Core.Controls.WebView.OnLoad">
 <summary>
 在WebView加载完成时发生。
 </summary>
</member>
<member name="P:Smobiler.Core.Controls.WebView.Url">
 <summary>
 获取和设置网页地址
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Controls.WebView.MixedContentMode">
 <summary>
 获取和设置混合内容模式
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.WebView.ScalesPageToFit">
 <summary>
 获取和设置一个值，该值指示是否要把网页缩放到适应视图的大小，以及是否允许用户改变缩放比例
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.WebView.GeoLocationEnabled">
 <summary>
 获取和设置一个值，该值指示是否允许浏览器获取位置信息
 </summary>
 <value>默认为true，设置为flase浏览器不获取位置信息</value>
 <remarks></remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Controls.WebView.Headers">
 <summary>
 获取和设置Web头
 </summary>
 <returns></returns>
 <remarks>添加或删除头请重新赋值，不支持直接通过字典添加</remarks>
</member>
<member name="M:Smobiler.Core.Controls.WebView.Refresh">
 <summary>
 重新载入页面
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.WebView.GoBack">
 <summary>
 后退
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.WebView.GoForward">
 <summary>
 前进
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.WebView.StopLoading">
 <summary>
 停止刷新
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.WebView.ClearCookies(Smobiler.Core.ResultHandler)">
 <summary>
 清理浏览器Cookie
 </summary>
 <param name="handler"></param>
</member>
<member name="M:Smobiler.Core.Controls.WebView.PostMessage(System.String)">
 <summary>
 向浏览器发送消息
 </summary>
 <param name="msg">消息内容</param>
 <remarks>
 需要在当前浏览器界面上的js中注册message事件，在function的msg为当前PostMessage的参数。
 window.document.addEventListener('message', function (msg) {})
 </remarks>
</member>
<member name="T:Smobiler.Core.Controls.WebViewMessageEventHandler">
 <summary>
 一个委托，它表示在WebView控件返回消息时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 WebViewMessageEventHandler</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.WebViewMessageEventArgs">
 <summary>
 为 WebViewMessageEvent 提供数据。
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Controls.WebViewMessageEventArgs.#ctor(System.String)">
 <summary>
 初始化一个 WebViewMessageEventArgs 实例
 </summary>
 <param name="msg"></param>
</member>
<member name="P:Smobiler.Core.Controls.WebViewMessageEventArgs.Message">
 <summary>
 消息
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.WebViewOnLoadEventHandler">
 <summary>
 一个委托，它表示在WebView控件加载完成时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 WebViewOnLoadEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Controls.WebViewOnLoadEventArgs">
 <summary>
 为 WebViewOnLoadEvent 提供数据。
 </summary>
</member>
<member name="M:Smobiler.Core.Controls.WebViewOnLoadEventArgs.#ctor(System.String)">
 <summary>
 初始化一个 WebViewOnLoadEventArgs 实例
 </summary>
 <param name="url">加载地址</param>
</member>
<member name="P:Smobiler.Core.Controls.WebViewOnLoadEventArgs.Url">
 <summary>
 获取WebView当前加载地址。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Controls.WebViewMixedContentMode">
 <summary>
 WebView混合内容模式
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.WebViewMixedContentMode.Never">
 <summary>
 WebView不允许一个安全的站点（https）去加载非安全的站点内容（http）
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.WebViewMixedContentMode.Always">
 <summary>
 WebView允许在一个安全的站点（Https）里加载非安全的站点内容（Http）
 </summary>
</member>
<member name="F:Smobiler.Core.Controls.WebViewMixedContentMode.Compatibility">
 <summary>
 当涉及到混合式内容时，WebView会尝试去兼容最新Web浏览器的风格。一些不安全的内容（Http）能被加载到一个安全的站点上（Https），而其他类型的内容将会被阻塞。
 </summary>
</member>
<member name="T:Smobiler.Core.Web.MimeExtensionHelper">
 <summary>
 MIME扩展
 </summary>
</member>
<member name="M:Smobiler.Core.Web.MimeExtensionHelper.GetMimeType(System.String)">
 <summary>
 根据文件获取扩展类型
 </summary>
 <param name="filename"></param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Web.AbstractCustomizeResourceGetExtendHandler">
 <summary>
 资源请求自定义实现
 </summary>
 <remarks>用于图像控件选择为Customize的类型，需要返回二进制数组</remarks>
</member>
<member name="M:Smobiler.Core.Web.AbstractCustomizeResourceGetExtendHandler.Excute(Smobiler.Core.Web.ExtendHandlerArgs)">
 <summary>
 执行
 </summary>
 <param name="e">扩展数据</param>
 <returns>扩展数据</returns>
</member>
<member name="M:Smobiler.Core.Web.AbstractCustomizeResourceGetExtendHandler.ResourceGet(Smobiler.Core.Web.ExtendHandlerResourceGetArgs)">
 <summary>
 资源获取
 </summary>
 <param name="e">扩展数据</param>
 <returns>扩展数据</returns>
</member>
<member name="T:Smobiler.Core.Web.AbstractOfflineResourceUploadExtendHandler">
 <summary>
 离线资源上传自定义实现
 </summary>
 <remarks>需要实现对BinaryData的操作，如果不注册此类，那么文件保存到默认的图像路径</remarks>
</member>
<member name="M:Smobiler.Core.Web.AbstractOfflineResourceUploadExtendHandler.Excute(Smobiler.Core.Web.ExtendHandlerArgs)">
 <summary>
 执行离线资源上传
 </summary>
 <param name="e">扩展数据</param>
 <returns>扩展数据</returns>
</member>
<member name="M:Smobiler.Core.Web.AbstractOfflineResourceUploadExtendHandler.ResourceUpload(Smobiler.Core.Web.ExtendHandlerResourcePostArgs)">
 <summary>
 离线资源上传
 </summary>
 <param name="e">扩展数据</param>
</member>
<member name="T:Smobiler.Core.Web.ExtendHandlerArgs">
 <summary>
 为接口扩展提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Web.ExtendHandlerArgs.SessionID">
 <summary>
 会话编号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Web.ExtendHandlerStatusArgs">
 <summary>
 为接口扩展提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Web.ExtendHandlerStatusArgs.Status">
 <summary>
 获取和设置接口扩展类型
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Web.ExtendHandlerResourceArgs">
 <summary>
 为资源扩展接口提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Web.ExtendHandlerResourceArgs.ResourceID">
 <summary>
 获取和设置资源编号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Web.ExtendHandlerResourceArgs.ResourcePath">
 <summary>
 获取和设置资源路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Web.ExtendHandlerResourceArgs.ResourceMode">
 <summary>
 获取和设置资源模式
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Web.ExtendHandlerResourceArgs.Data">
 <summary>
 获取和设置资源数据
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Web.ExtendHandlerResourceGetArgs">
 <summary>
 为资源请求扩展接口提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Web.ExtendHandlerResourceGetArgs.LastModifyDate">
 <summary>
 获取和设置资源最后修改时间
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Web.ExtendHandlerResourceGetArgs.ContentType">
 <summary>
 获取和设置资源MIME类型
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.ExtendHandlerResourceGetArgs.ETag">
 <summary>
 获取和设置资源数据标签
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Web.ExtendHandlerResourceGetArgs.CacheMaxAge">
 <summary>
 获取和设置资源最大周期
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Web.ExtendHandlerResourceGetArgs.CacheExpires">
 <summary>
 获取和设置资源过期时间
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Web.ExtendHandlerResourcePostArgs">
 <summary>
 为资源上传扩展接口提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Web.ExtendHandlerType">
 <summary>
 扩展类型
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Web.ExtendHandlerType.ResourceGet">
 <summary>
 资源获取扩展
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Web.ExtendHandlerType.ResourcePost">
 <summary>
 资源离线上传扩展
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Web.ExtendHandlerStatus">
 <summary>
 接口扩展类型
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Web.ExtendHandlerStatus.OK">
 <summary>
 资源获取成功
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Web.ExtendHandlerStatus.ResourceNotModify">
 <summary>
 资源未修改
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Web.ExtendHandlerStatus.ResourceNotExist">
 <summary>
 资源不存在
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Web.ExtendHandlerStatus.InternalError">
 <summary>
 内部错误
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Web.IExtendHandler">
 <summary>
 HTTP用户扩展接口
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Web.IExtendHandler.Excute(Smobiler.Core.Web.ExtendHandlerArgs)">
 <summary>
 执行HTTP用户扩展
 </summary>
 <param name="e">用户扩展参数（根据不同的扩展类型获取）</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Web.HttpLogHandler.LogDevelopClients">
 <summary>
 用于是否强制某一个客户端产生Log记录
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Web.HttpHandlerData">
 <summary>
 HTTP请求数据
 </summary>
</member>
<member name="M:Smobiler.Core.Web.HttpHandlerData.#ctor(System.String,System.String)">
 <summary>
 获取函数
 </summary>
 <param name="sessionid">会话编号</param>
 <param name="cmd">会话指令</param>
</member>
<member name="P:Smobiler.Core.Web.HttpHandlerData.SessionID">
 <summary>
 获取会话编号
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpHandlerData.Command">
 <summary>
 获取会话指令
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.Web.HttpHandlerData.Log(System.String,System.String)">
 <summary>
 LOG
 </summary>
 <param name="pre">前缀</param>
 <param name="txt">文本</param>
</member>
<member name="T:Smobiler.Core.Web.IMobileHttpResourceEntity">
 <summary>
 HTTP资源实体接口
 </summary>
</member>
<member name="M:Smobiler.Core.Web.IMobileHttpResourceEntity.GetHttpResourceEntity(Smobiler.Core.Web.HttpResourceMessage)">
 <summary>
 获取HTTP资源实体
 </summary>
 <param name="message">HTTP资源消息</param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Web.HttpResourceMessage">
 <summary>
 HTTP资源消息
 </summary>
</member>
<member name="M:Smobiler.Core.Web.HttpResourceMessage.#ctor(System.String,System.String,Smobiler.Core.Controls.ResourceMode)">
 <summary>
 创建 <see cref="T:Smobiler.Core.Web.HttpResourceMessage"/> 实体
 </summary>
 <param name="rId">资源编号</param>
 <param name="rPath">资源路径</param>
 <param name="rMode">资源类型</param>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceMessage.ResourceID">
 <summary>
 获取资源编号
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceMessage.ResourcePath">
 <summary>
 获取资源路径
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceMessage.ResourceMode">
 <summary>
 获取资源类型
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Web.HttpResourceEntity">
 <summary>
 HTTP资源实体
 </summary>
</member>
<member name="M:Smobiler.Core.Web.HttpResourceEntity.#ctor">
 <summary>
 创建 <see cref="T:Smobiler.Core.Web.HttpResourceEntity"/> 实例
 </summary>
</member>
<member name="M:Smobiler.Core.Web.HttpResourceEntity.#ctor(Smobiler.Core.Web.HttpResourceData)">
 <summary>
 创建 <see cref="T:Smobiler.Core.Web.HttpResourceEntity"/> 实例
 </summary>
 <param name="rdata">资源数据</param>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceEntity.ResourceKey">
 <summary>
 资源标识
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceEntity.HttpContentType">
 <summary>
 资源类型
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceEntity.HttpContentDisposition">
 <summary>
 获取和设置一个值，该值指示是否添加Disposition
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceEntity.HttpAttachmentFileName">
 <summary>
 获取和设置资源附件名称
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceEntity.ResourceData">
 <summary>
 获取和设置资源数据
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceEntity.ResourceInfo">
 <summary>
 获取和设置资源信息
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceEntity.ResourceMode">
 <summary>
 获取资源类型
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Web.HttpFileResourceEntity">
 <summary>
 文件资源实体
 </summary>
</member>
<member name="M:Smobiler.Core.Web.HttpFileResourceEntity.#ctor(System.String,System.String)">
 <summary>
 创建 <see cref="T:Smobiler.Core.Web.HttpFileResourceEntity"/> 实例
 </summary>
 <param name="rid">资源名称</param>
 <param name="rpath">资源路径</param>
</member>
<member name="M:Smobiler.Core.Web.HttpFileResourceEntity.InitialResourceInfo">
 <summary>
 初始化资源信息
 </summary>
</member>
<member name="M:Smobiler.Core.Web.HttpFileResourceEntity.SetResourceInfo(System.IO.FileInfo)">
 <summary>
 设置资源文件信息
 </summary>
 <param name="info"></param>
</member>
<member name="P:Smobiler.Core.Web.HttpFileResourceEntity.ResourceID">
 <summary>
 获取资源编号
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpFileResourceEntity.ResourcePath">
 <summary>
 获取资源路径
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpFileResourceEntity.FullPath">
 <summary>
 获取资源完整路径
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpFileResourceEntity.ResourceKey">
 <summary>
 获取资源标识
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpFileResourceEntity.ResourceInfo">
 <summary>
 获取和设置资源信息
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpFileResourceEntity.HttpContentDisposition">
 <summary>
 获取和设置一个值，该值指示是否设置Disposition
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpFileResourceEntity.ResourceMode">
 <summary>
 获取资源模式
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Web.HttpCostomizeResourceEntity">
 <summary>
 自定义资源实例
 </summary>
</member>
<member name="M:Smobiler.Core.Web.HttpCostomizeResourceEntity.#ctor(System.String,Smobiler.Core.Web.HttpResourceData)">
 <summary>
 构造函数
 </summary>
 <param name="rkey">资源标识</param>
 <param name="rdata">资源数据</param>
</member>
<member name="P:Smobiler.Core.Web.HttpCostomizeResourceEntity.ResourceKey">
 <summary>
 获取资源标识
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpCostomizeResourceEntity.ResourceMode">
 <summary>
 获取资源数据
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Web.HttpDataResourceEntity">
 <summary>
 数据资源实体
 </summary>
</member>
<member name="M:Smobiler.Core.Web.HttpDataResourceEntity.#ctor(System.String,Smobiler.Core.Web.HttpResourceData)">
 <summary>
 获取 <see cref="T:Smobiler.Core.Web.HttpDataResourceEntity"/> 实体
 </summary>
 <param name="rkey"></param>
 <param name="rdata"></param>
</member>
<member name="P:Smobiler.Core.Web.HttpDataResourceEntity.ResourceKey">
 <summary>
 获取资源标识
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpDataResourceEntity.ResourceMode">
 <summary>
 获取资源模式
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Web.HttpResourceData">
 <summary>
 资源数据
 </summary>
</member>
<member name="M:Smobiler.Core.Web.HttpResourceData.#ctor(System.Byte[],Smobiler.Core.Web.HttpResourceDataInfo)">
 <summary>
 创建 <see cref="T:Smobiler.Core.Web.HttpResourceData"/> 实例
 </summary>
 <param name="data">数据</param>
 <param name="info">资源信息</param>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceData.Data">
 <summary>
 获取和设置资源数据
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceData.Info">
 <summary>
 获取和设置资源信息
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Web.HttpResourceDataInfo">
 <summary>
 资源信息
 </summary>
</member>
<member name="M:Smobiler.Core.Web.HttpResourceDataInfo.#ctor(System.Int64,System.DateTime,System.String)">
 <summary>
 创建 <see cref="T:Smobiler.Core.Web.HttpResourceDataInfo"/> 实例
 </summary>
 <param name="size">资源大小</param>
 <param name="lastModifyDate">资源最后一次修改时间</param>
 <param name="token">资源标识</param>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceDataInfo.Size">
 <summary>
 获取和设置资源大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceDataInfo.LastModifyDate">
 <summary>
 获取和设置资源最后一次修改时间
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpResourceDataInfo.Token">
 <summary>
 获取和设置资源标识
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Web.IHttpHandler">
 <summary>
 HTTP请求接口
 </summary>
</member>
<member name="M:Smobiler.Core.Web.IHttpHandler.ProcessRequest(System.Net.HttpListenerContext,Smobiler.Core.Web.HttpHandlerData)">
 <summary>
 请求处理
 </summary>
 <param name="context">请求响应对象</param>
 <param name="handlerdata">数据</param>
</member>
<member name="T:Smobiler.Core.Web.HttpServiceException">
 <summary>
 HttpServiceException
 </summary>
</member>
<member name="T:Smobiler.Core.Web.HttpServiceResponse">
 <summary>
 HttpServiceResponse
 </summary>
</member>
<member name="P:Smobiler.Core.Web.HttpServiceResponse.code">
 <summary>
 获取和设置code
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpServiceResponse.message">
 <summary>
 获取和设置message
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.Web.HttpServiceResponse.data">
 <summary>
 获取和设置data
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Web.HttpServiceSession">
 <summary>
 HttpServiceSession
 </summary>
</member>
<member name="P:Smobiler.Core.HttpServer.HTTPAccessKey">
 <summary>
 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.HttpServer.HTTPAccessKeyAuth(System.String)">
 <summary>
 
 </summary>
 <param name="key"></param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.TcpServer.ProcessSTMLProtocolExceptionSocketReceive(Smobiler.Core.Protocol.SETPSocketHandler)">
 <summary>
 用于在STML异常后的重新数据接收
 </summary>
 <param name="data"></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.ClipboardResultHandler">
 <summary>
 一个委托，它表示客户端粘贴板回调时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.ClipboardResultArgs"/></param>
</member>
<member name="T:Smobiler.Core.ClipboardResultArgs">
 <summary>
 为<see cref="T:Smobiler.Core.ClipboardResultHandler" />提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.ClipboardResultArgs.Data">
 <summary>
 获取粘贴板数据
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.CacheSizeResultHandler">
 <summary>
 一个委托，它表示获取客户端缓存大小后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.CacheSizeResultArgs"/></param>
</member>
<member name="T:Smobiler.Core.CacheSizeResultArgs">
 <summary>
 为<see cref="T:Smobiler.Core.CacheSizeResultHandler" />提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.CacheSizeResultArgs.Size">
 <summary>
 获取客户端缓存大小
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.UrlLikingEventHandler">
 <summary>
 一个委托，它表示浏览器唤醒时要调用的方法
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.UrlLikingEventArgs"/></param>
</member>
<member name="T:Smobiler.Core.UrlLikingEventArgs">
 <summary>
 为<see cref="T:Smobiler.Core.UrlLikingEventHandler" />提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.UrlLikingEventArgs.UrlParams">
 <summary>
 获取和设置UrlLiking参数
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.OrientationChangedEventHandler">
 <summary>
 一个委托，它表示手机横竖屏时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 e</param>
</member>
<member name="T:Smobiler.Core.OrientationChangedEventArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.OrientationChangedEventHandler"/> 提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.OrientationChangedEventArgs.Orientation">
 <summary>
 获取手机横竖屏状态
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.OrientationEventStatus">
 <summary>
 手机横竖屏状态
 </summary>
</member>
<member name="F:Smobiler.Core.OrientationEventStatus.UnKnown">
 <summary>
 未知
 </summary>
</member>
<member name="F:Smobiler.Core.OrientationEventStatus.LandScape">
 <summary>
 横屏
 </summary>
</member>
<member name="F:Smobiler.Core.OrientationEventStatus.Portrait">
 <summary>
 竖屏
 </summary>
</member>
<member name="F:Smobiler.Core.OrientationEventStatus.PortraitUpSideDown">
 <summary>
 倒置
 </summary>
</member>
<member name="T:Smobiler.Core.ClientVariables">
 <summary>
 客户端信息
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.ClientVariables.mClient">
 <summary>
 客户端实体
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.ClientVariables.UrlLiking">
 <summary>
 在浏览器唤醒时触发
 </summary>
</member>
<member name="E:Smobiler.Core.ClientVariables.ForeGround">
 <summary>
 在客户端切换回前台时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.ClientVariables.BackGround">
 <summary>
 在客户端切换到后台时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.ClientVariables.OrientationChanged">
 <summary>
 在客户端横竖屏切换时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.SetClient(Smobiler.Core.MobileClient)">
 <summary>
 内部方法，用于设定当前的MobileClient
 </summary>
 <param name="client"></param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.Resource">
 <summary> 
 获取 <see cref="T:Smobiler.Core.RPC.ResourceManager"/> 实例
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.Pattern">
 <summary>
 获取 <see cref="T:Smobiler.Core.RPC.PatternManager"/> 实例
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.Share">
 <summary>
 获取 <see cref="T:Smobiler.Core.RPC.ShareManager"/> 实例
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.Push">
 <summary>
 获取 <see cref="T:Smobiler.Core.RPC.PushManager"/> 实例
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.Contacts">
 <summary>
 获取 <see cref="T:Smobiler.Core.RPC.ContactsManager"/> 实例
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.File">
 <summary>
 获取 <see cref="T:Smobiler.Core.RPC.FileManager"/> 实例
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.Bluetooth">
 <summary>
 获取 <see cref="T:Smobiler.Core.RPC.BluetoothManager"/> 实例
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.SQLite">
 <summary>
 获取 <see cref="T:Smobiler.Core.RPC.SQLiteManager"/> 实例
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.Timer">
 <summary>
 获取 <see cref="T:Smobiler.Core.RPC.TimerManager"/> 实例
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.Socket">
 <summary>
 获取 <see cref="T:Smobiler.Core.RPC.SocketManager"/> 实例
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.IPEndPoint">
 <summary>
 获取客户端网络端点
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.StartDate">
 <summary>
 获取客户端第一次连接时间
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.LastDate">
 <summary>
 获取客户端最后一次操作时间
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.DeviceOS">
 <summary>
 获取客户端操作系统类型
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.DeviceOSVersion">
 <summary>
 获取客户端操作系统版本号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.CoreVersion">
 <summary>
 获取客户端内核版本号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.Version">
 <summary>
 获取客户端版本号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.Device">
 <summary>
 获取客户端设备名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.DeviceID">
 <summary>
 获取设备编号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.SessionID">
 <summary>
 获取客户端会话编号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.UserSessionID">
 <summary>
 获取和设置用户会话编号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.Item(System.String)">
 <summary>
 获取和设置指定键名的值
 </summary>
 <param name="name"></param>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.Item(System.Int32)">
 <summary>
 获取和设置指定索引的值
 </summary>
 <param name="index"></param>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.Session">
 <summary>
 获取客户端全局数据
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.ClientTrace">
 <summary>
 获取和设置一个值，该值表示是否启用客户端日志记录
 </summary>
 <value>true代表记录客户端日志，否则为false</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.ClientDevTrace">
 <summary>
 获取和设置一个值，该值表示在设置DeveloperTrace = DeveloperTraceMode.Single时，当前Client是否启用开发日志记录
 </summary>
 <value>true代表记录客户端开发日志，否则为false</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.EnableStackView">
 <summary>
 获取和设置一个值，该值表示是否启用客户端界面栈。
 </summary>
 <value>默认为True</value>
 <returns></returns>
 <remarks>启用界面栈可以在客户端执行界面返回操作时，有更快的速度和更好的体验，但是在某些性能比较差的设备上，可以关闭界面栈</remarks>
</member>
<member name="P:Smobiler.Core.ClientVariables.ScreenSize">
 <summary>
 获取设备屏幕分辨率
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.ClientFramework">
 <summary>
 获取客户端平台
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.ScreenDensity">
 <summary>
 获取设备屏幕密度
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.HostAddress">
 <summary>
 获取服务端地址
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.HostUrl">
 <summary>
 获取服务端Url（仅限web连接）
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.WebUrl">
 <summary>
 获取服务端完整Url地址（仅限web连接）
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.WebUserAgent">
 <summary>
 获取Web客户端的UserAgent
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.HostHttpPort">
 <summary>
 获取服务端Http端口
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.HostTcpPort">
 <summary>
 获取服务端TCP端口
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.AppName">
 <summary>
 获取应用名称
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.PackageName">
 <summary>
 获取应用包名
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.ExtraInfo">
 <summary>
 获取扩展信息
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.Language">
 <summary>
 获取客户端语言
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.ClientVariables.ClientSource">
 <summary>
 获取客户端来源
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.ClientVariables.ClearSession">
 <summary>
 清除所有会话数据
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.Exit(System.Boolean)">
 <summary>
 关闭客户端
 </summary>
 <param name="withDialog">一个值，该值表示是否显示一个“是否关闭客户端”的选择框</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.ExitAndQuit(System.String)">
 <summary>
 关闭客户端并终止服务端会话
 </summary>
 <param name="msg">消息通知</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.ReStart">
 <summary>
 销毁当前界面和数据，重新开始客户端会话
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.SetWebTitle(System.String)">
 <summary>
 设置Web标题
 </summary>
 <param name="title">标题</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetActiveForm">
 <summary>
 获取当前显示的窗体
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetCurrentClient">
 <summary>
 获取当前调用的客户端的信息
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetCurrentClient(System.String)">
 <summary>
 获取指定客户端会话编号的客户端的信息
 </summary>
 <param name="sessionid"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetCurrentClientSession">
 <summary>
 获取当前调用的客户端的全局数据
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetCurrentClientSession(System.String)">
 <summary>
 获取指定客户端会话编号的客户端的全局数据
 </summary>
 <param name="sessionid"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetCurrentClientSessionID">
 <summary>
 获取当前调用的客户端的会话编号
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetCurrentUserSessionID">
 <summary>
 获取当前调用的客户端的用户会话编号
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetCurrentUserSessionID(System.String)">
 <summary>
 获取指定客户端会话编号的客户端用户会话编号
 </summary>
 <param name="sessionid"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.SendSMS(System.String,System.String[])">
 <summary>
 发送短信
 </summary>
 <param name="message">短信内容</param>
 <param name="phoneNumbers">短信号码</param>
 <remarks>允许不指定短信号码，也可以指定一个或多个短信号码，当不指定短信号码时，那么需要在发送短信界面由操作者输入短信号码</remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.SendEmail(System.String,System.String,System.String[])">
 <summary>
 发送邮件
 </summary>
 <param name="title">邮件抬头</param>
 <param name="content">邮件内容</param>
 <param name="emailAddresses">邮件地址</param>
 <remarks>允许不指定邮件地址，也可以指定一个或多个邮件地址，当不指定邮件地址时，那么需要在发送邮件界面由操作者输入邮件地址</remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.TelCall(System.String)">
 <summary>
 打开拨号界面或通讯录
 </summary>
 <param name="tel">电话号码，如果为空，那么直接调用通讯录</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.PlayAudio(System.String,Smobiler.Core.Controls.ResourceMode)">
 <summary>
 播放音频
 </summary>
 <param name="resourceid">资源编号</param>
 <param name="resourcemode">资源类型</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.PlayAudio(System.String,Smobiler.Core.ResultHandler,Smobiler.Core.Controls.ResourceMode)">
 <summary>
 播放音频
 </summary>
 <param name="resourceid">资源编号</param>
 <param name="handler">播放完成后回调</param>
 <param name="resourcemode">资源类型</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.PlayAudio(System.String,System.String,Smobiler.Core.Controls.ResourceMode)">
 <summary>
 播放音频
 </summary>
 <param name="resourceid">资源编号</param>
 <param name="resourcepath">资源路径</param>
 <param name="resourcemode">资源类型</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.PlayAudio(System.String,System.String,Smobiler.Core.ResultHandler,Smobiler.Core.Controls.ResourceMode)">
 <summary>
 播放音频
 </summary>
 <param name="resourceid">资源编号</param>
 <param name="resourcepath">资源路径</param>
 <param name="handler">播放完成后回调</param>
 <param name="resourcemode">资源类型</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.StopAudio">
 <summary>
 停止播放音频
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.Vibrate(System.Int32)">
 <summary>
 震动
 </summary>
 <param name="duration">持续时间（毫秒）</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.PlaySystemSound(Smobiler.Core.Protocol.SystemSoundType,System.Int32)">
 <summary>
 播放系统提示音
 </summary>
 <param name="type">提示音类型</param>
 <param name="iosSoundId">ios提示音编号，ios有效，默认为0,当值大于1000时,调用ios提示音,参数列表查看http://iphonedevwiki.net/index.php/AudioServices</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.ClearCache(Smobiler.Core.ResultHandler)">
 <summary>
 清除缓存
 </summary>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetCacheSize(Smobiler.Core.CacheSizeResultHandler)">
 <summary>
 获取缓存大小
 </summary>
 <param name="handler">缓存大小回调</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetClipboard(Smobiler.Core.ClipboardResultHandler)">
 <summary>
 获取客户端粘贴板内容
 </summary>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.SetClipboard(System.String,Smobiler.Core.ResultHandler)">
 <summary>
 设置客户端粘贴板内容
 </summary>
 <param name="data">粘贴板内容</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.ShowPermission">
 <summary>
 显示权限界面
 </summary>
</member>
<member name="M:Smobiler.Core.ClientVariables.ShowOfflineResources">
 <summary>
 显示主线资源界面
 </summary>
</member>
<member name="M:Smobiler.Core.ClientVariables.ShowNetworkDiagnosis">
 <summary>
 显示网络诊断界面
 </summary>
</member>
<member name="M:Smobiler.Core.ClientVariables.ShowAbout">
 <summary>
 显示关于页
 </summary>
</member>
<member name="M:Smobiler.Core.ClientVariables.OpenNotificationSetting">
 <summary>
 跳转通知设置界面功能
 </summary>
</member>
<member name="M:Smobiler.Core.ClientVariables.IsNotificationEnabled(Smobiler.Core.ResultHandler{System.Boolean})">
 <summary>
 获取当前应用是否允许通知
 </summary>
</member>
<member name="M:Smobiler.Core.ClientVariables.RedirectUrl(System.String,System.Boolean)">
 <summary>
 跳转指定URL的网页
 </summary>
 <param name="url">网页地址</param>
 <param name="newTab">在Web模式下是否打开新的Tab标签</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetNetWorkType(Smobiler.Core.NetWorkCallBackHandler,System.Int32)">
 <summary>
 获取网络类型
 </summary>
 <param name="handler">回调</param>
 <param name="timeout">超时时间，默认为0，为0时代表永不超时，大于0时，到达指定的超时时间后会自动触发handler，单位为秒</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.GetStatusbarHeight(Smobiler.Core.StatusbarCallBackHandler,System.Int32)">
 <summary>
 获取状态栏高度
 </summary>
 <param name="handler">回调</param>
 <param name="timeout">超时时间，默认为0，为0时代表永不超时，大于0时，到达指定的超时时间后会自动触发handler，单位为秒</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ClientVariables.HeartBeatEnable(Smobiler.Core.ResultHandler,Smobiler.Core.ResultHandler)">
 <summary>
 开启心跳检测
 </summary>
 <param name="handler">回调</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.HeartBeatEnable(System.Int32,Smobiler.Core.ResultHandler,Smobiler.Core.ResultHandler)">
 <summary>
 开启心跳检测
 </summary>
 <param name="interval">心跳间隔（毫秒）</param>
 <param name="handler">回调</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.HeartBeatEnable(System.Int32,System.Int32,Smobiler.Core.ResultHandler,Smobiler.Core.ResultHandler)">
 <summary>
 开启心跳检测
 </summary>
 <param name="interval">心跳间隔（毫秒）</param>
 <param name="failCounter">心跳超时检测次数</param>
 <param name="handler">回调</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.HeartBeatEnable(System.Int32,System.Int32,System.String,Smobiler.Core.ResultHandler,Smobiler.Core.ResultHandler)">
 <summary>
 开启心跳检测
 </summary>
 <param name="interval">心跳间隔（毫秒）</param>
 <param name="failCounter">心跳超时检测次数</param>
 <param name="failMsg">心跳超时消息</param>
 <param name="handler">回调</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.HeartBeatEnableInternal(System.Int32,System.Int32,System.String,Smobiler.Core.ResultHandler,Smobiler.Core.ResultHandler)">
 <summary>
 开启心跳检测
 </summary>
 <param name="interval">心跳间隔（毫秒）</param>
 <param name="failCounter">心跳超时检测次数</param>
 <param name="failMsg">心跳超时消息</param>
 <param name="handler">回调</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.HeartBeatDisable(Smobiler.Core.ResultHandler)">
 <summary>
 关闭心跳检测
 </summary>
 <param name="handler">回调</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.RenderFlush">
 <summary>
 在异步更新UI时，需要调用此方法刷新客户端界面。
 </summary>
</member>
<member name="M:Smobiler.Core.ClientVariables.SaveImageToAlbum(System.String,System.String)">
 <summary>
 保存资源图片到相册
 </summary>
 <param name="resourceId">资源名称</param>
 <param name="resourcePath">资源路径</param>
</member>
<member name="M:Smobiler.Core.ClientVariables.SaveImageToAlbum(System.String)">
 <summary>
 保存图片到相册
 </summary>
 <param name="url">资源地址</param>
</member>
<member name="T:Smobiler.Core.RPC.ApiManager">
 <summary>
 接口
 </summary>
</member>
<member name="M:Smobiler.Core.RPC.ApiManager.GetGps(Smobiler.Core.Controls.GpsCallBackHandler,System.Int32)">
 <summary>
 获取GPS数据
 </summary>
 <param name="handler">回调实例</param>
 <param name="timeOut">超时时间[毫秒]</param>
</member>
<member name="M:Smobiler.Core.RPC.ApiManager.GetGpsAmap(Smobiler.Core.Controls.GpsCallBackHandler,System.Boolean,System.String,System.Int32)">
 <summary>
 通过高德接口获取GPS数据
 </summary>
 <param name="handler">回调实例</param>
 <param name="requestLocation">是否请求位置描述</param>
 <param name="amapKey">高德WEBKEY</param>
 <param name="timeOut">超时时间[毫秒]</param>
</member>
<member name="M:Smobiler.Core.RPC.ApiManager.GetGpsAmap(Smobiler.Core.Controls.GpsCallBackHandler,Smobiler.Core.Controls.GPSSource,System.Boolean,System.String,System.Int32)">
 <summary>
 通过高德接口获取GPS数据
 </summary>
 <param name="handler">回调实例</param>
 <param name="source">GPS来源</param>
 <param name="requestLocation">是否请求位置描述</param>
 <param name="amapKey">高德WEBKEY</param>
 <param name="timeOut">超时时间[毫秒]</param>
</member>
<member name="T:Smobiler.Core.RPC.BluetoothManager">
 <summary>
 蓝牙管理
 </summary>
</member>
<member name="M:Smobiler.Core.RPC.BluetoothManager.Show">
 <summary>
 显示蓝牙设置界面
 </summary>
</member>
<member name="M:Smobiler.Core.RPC.BluetoothManager.IsOpen(Smobiler.Core.RPC.BluetoothManagerIsOpenHandler)">
 <summary>
 获取蓝牙是否打开
 </summary>
 <param name="handler">结果回调</param>
</member>
<member name="T:Smobiler.Core.RPC.BluetoothManagerIsOpenHandler">
 <summary>
 一个委托，它表示在获取蓝牙是否打开后需要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 BluetoothManagerIsOpenArgs</param>
</member>
<member name="T:Smobiler.Core.RPC.BluetoothManagerIsOpenArgs">
 <summary>
 为 BluetoothManagerIsOpenHandler 提供数据
 </summary>
</member>
<member name="M:Smobiler.Core.RPC.BluetoothManagerIsOpenArgs.#ctor(System.Boolean)">
 <summary>
 构造函数
 </summary>
 <param name="isOpen">蓝牙是否打开</param>
</member>
<member name="P:Smobiler.Core.RPC.BluetoothManagerIsOpenArgs.IsOpen">
 <summary>
 获取一个值，该值指示蓝牙是否打开
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.ContactsManager">
 <summary>
 通讯录类
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.ContactsManager.Show">
 <summary>
 显示通讯录
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.ContactsManager.Add(System.String,System.String,System.String)">
 <summary>
 添加联系人到通讯录
 </summary>
 <param name="name">名称</param>
 <param name="phoneNumber">电话号码</param>
 <param name="emailAddress">邮箱地址</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.ContactsManager.GetContactEnties(Smobiler.Core.RPC.ContactEntityHandler)">
 <summary>
 获取通讯录
 </summary>
 <param name="handler">在获取通讯录后调用的委托</param>
 <remarks>在每一次获取通讯录时，在客户端会提示请求许可</remarks>
</member>
<member name="T:Smobiler.Core.RPC.ContactEntityHandler">
 <summary>
 一个委托，它表示在通讯录获取结果后调用的方法
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 PatternCreatedEventArgs</param>
</member>
<member name="T:Smobiler.Core.RPC.ContactEntityArgs">
 <summary>
 为 ContactEntityHandler 提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.ContactEntityArgs.Value">
 <summary>
 获取通讯录实体
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.ContactEntity">
 <summary>
 通讯录实体
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.ContactEntity.emailAddresses">
 <summary>
 邮箱地址
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.ContactEntity.postalAddresses">
 <summary>
 通讯地址
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.ContactEntity.jobTitle">
 <summary>
 职称
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.ContactEntity.recordID">
 <summary>
 记录编号
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.ContactEntity.middleName">
 <summary>
 中间名
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.ContactEntity.company">
 <summary>
 公司名
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.ContactEntity.familyName">
 <summary>
 姓
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.ContactEntity.givenName">
 <summary>
 名
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.ContactEntity.phoneNumbers">
 <summary>
 电话号码
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.FileManager">
 <summary>
 文件管理类
 </summary>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.Download(System.String,Smobiler.Core.RPC.FileOperationHandler,System.Boolean,System.Boolean)">
 <summary>
 下载文件
 </summary>
 <param name="url">文件url</param>
 <param name="handler">下载结果回调</param>
 <param name="isOpen">是否在下载完成后打开文件</param>
 <param name="progressDialog">是否显示进度弹窗</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.Download(System.String,System.String,Smobiler.Core.RPC.FileOperationHandler,System.Boolean,System.Boolean)">
 <summary>
 下载文件
 </summary>
 <param name="resourceId">资源名称</param>
 <param name="resourcePath">资源路径</param>
 <param name="handler">下载结果回调</param>
 <param name="isOpen">是否在下载完成后打开文件</param>
 <param name="progressDialog">是否显示进度弹窗</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.Download(System.String,System.String,System.String,Smobiler.Core.RPC.FileOperationHandler,System.Boolean,System.Boolean)">
 <summary>
 下载文件
 </summary>
 <param name="resourceId">资源名称</param>
 <param name="resourcePath">资源路径</param>
 <param name="displayResourceName">资源显示名称</param>
 <param name="handler">下载结果回调</param>
 <param name="isOpen">是否在下载完成后打开文件</param>
 <param name="progressDialog">是否显示进度弹窗</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.Open(System.String,Smobiler.Core.RPC.FileOperationHandler)">
 <summary>
 打开文件
 </summary>
 <param name="url">文件url</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.Open(System.String,System.String,Smobiler.Core.RPC.FileOperationHandler)">
 <summary>
 打开文件
 </summary>
 <param name="resourceId">资源名称</param>
 <param name="resourcePath">资源路径</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.OpenPath(System.String,Smobiler.Core.RPC.FileOperationHandler)">
 <summary>
 打开客户端文件
 </summary>
 <param name="clientPath">客户端文件路径</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.Exists(System.String,Smobiler.Core.RPC.FileExistsHandler)">
 <summary>
 文件是否存在
 </summary>
 <param name="url">文件url</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.Exists(System.String,System.String,Smobiler.Core.RPC.FileExistsHandler)">
 <summary>
 文件是否存在
 </summary>
 <param name="resourceId">资源名称</param>
 <param name="resourcePath">资源路径</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.List(Smobiler.Core.RPC.FileListHandler)">
 <summary>
 获取文件列表
 </summary>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.Delete(System.String,Smobiler.Core.RPC.FileOperationHandler)">
 <summary>
 删除文件
 </summary>
 <param name="url">文件url</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.Delete(System.String,System.String,Smobiler.Core.RPC.FileOperationHandler)">
 <summary>
 删除文件
 </summary>
 <param name="resourceId">资源名称</param>
 <param name="resourcePath">资源路径</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.Upload(Smobiler.Core.RPC.FileUploadHandler)">
 <summary>
 上传文件
 </summary>
 <param name="handler">委托回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.Upload(System.String,Smobiler.Core.RPC.FileUploadHandler)">
 <summary>
 上传指定文件
 </summary>
 <param name="filePath">客户端文件路径</param>
 <param name="handler">委托回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.UploadPath(Smobiler.Core.Controls.ClientResourceCallBackHandler)">
 <summary>
 获取客户端文件路径
 </summary>
 <param name="handler">委托回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.UploadPath(System.String,Smobiler.Core.Controls.ClientResourceCallBackHandler)">
 <summary>
 获取客户端文件路径
 </summary>
 <param name="initialDirectory">起始路径</param>
 <param name="handler">委托回调</param>
</member>
<member name="M:Smobiler.Core.RPC.FileManager.GetUrlRPCParameter(System.String,System.Delegate,Smobiler.Core.Controls.ResourceMode,System.Nullable{System.Boolean})">
 <summary>
 获取基于url的RPC参数
 </summary>
 <param name="url">文件url</param>
 <param name="handler">委托回调</param>
 <param name="rmode">资源类型</param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.FileOperationHandler">
 <summary>
 一个委托，它表示在文件操作后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 FileOperationArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.FileOperationArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.RPC.FileOperationHandler" /> 提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.FileOperationArgs.Path">
 <summary>
 获取和设置文件路径
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.FileExistsHandler">
 <summary>
 一个委托，它表示在获取文件是否存在后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 FileExistsArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.FileExistsArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.RPC.FileExistsHandler" /> 提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.FileExistsArgs.Exists">
 <summary>
 获取一个值，该值指示客户端文件是否存在。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.FileListHandler">
 <summary>
 一个委托，它表示在获取文件清单后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.RPC.FileListArgs" /></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.FileListArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.RPC.FileListHandler" /> 提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.FileListArgs.Lists">
 <summary>
 获取文件列表。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.FileListArgs.Count">
 <summary>
 获取文件数量。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.FileListArgs.FileListData">
 <summary>
 资源数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.FileListArgs.FileListData.Name">
 <summary>
 资源名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.FileListArgs.FileListData.Date">
 <summary>
 资源创建时间
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.FileUploadHandler">
 <summary>
 一个委托，它表示在文件上传后要调用的方法。 
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.Controls.BinaryResultArgs" /></param>
</member>
<member name="T:Smobiler.Core.RPC.PatternManager">
 <summary>
 手势图案解锁类
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.PatternManager.Password">
 <summary>
 获取和设置手势图案密码，在本地验证和Mirror验证时使用
 </summary>
 <value></value>
 <returns></returns>
 <remarks>当在Mirror验证时，需要同时设置窗体中的EnableMirrorPattern为True</remarks>
</member>
<member name="P:Smobiler.Core.RPC.PatternManager.LocalVerifyMaxTimes">
 <summary>
 获取和设置本地手势图案验证最大验证次数
 </summary>
 <value></value>
 <returns></returns>
 <remarks>验证次数超过最大验证次数后，连接会被重置，最小值为1，小于1时，会被设置为1</remarks>
</member>
<member name="M:Smobiler.Core.RPC.PatternManager.Create(Smobiler.Core.RPC.PatternCreatedEventHandler)">
 <summary>
 创建手势图案
 </summary>
 <param name="handler">PatternCreatedEventHandler 实例</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.PatternManager.VerifyLocal(Smobiler.Core.RPC.PatternLocalVerifiedEventHandler)">
 <summary>
 在本地执行验证
 </summary>
 <remarks>
 必须设置Password内容，仅在验证成功后返回并触发handler
 超过LocalVerifyMaxTimes时，连接会被重置并不会触发handler
 </remarks>
</member>
<member name="M:Smobiler.Core.RPC.PatternManager.VerifyServer(Smobiler.Core.RPC.PatternServerVerifiedEventHandler)">
 <summary>
 将手势解锁图案数据返回，并在服务器端验证
 </summary>
 <remarks>客户端将手势解锁图案返回时，会关闭手势解锁图案</remarks>
</member>
<member name="T:Smobiler.Core.RPC.PatternCreatedEventHandler">
 <summary>
 一个委托，它表示在客户端绘制手势图案后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 PatternCreatedEventArgs</param>
</member>
<member name="T:Smobiler.Core.RPC.PatternLocalVerifiedEventHandler">
 <summary>
 一个委托，它表示在客户端返回本地手势图案解锁结果后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 PatternLocalVerifiedEventArgs</param>
</member>
<member name="T:Smobiler.Core.RPC.PatternServerVerifiedEventHandler">
 <summary>
 一个委托，它表示在客户端返回绘制的手势图案后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 PatternServerVerifiedEventArgs</param>
</member>
<member name="T:Smobiler.Core.RPC.PatternCreatedEventArgs">
 <summary>
 为PatternCreatedEventHandler提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.PatternCreatedEventArgs.Password">
 <summary>
 获取客户端绘制的手势图案数据
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.PatternLocalVerifiedEventArgs">
 <summary>
 为PatternLocalVerifiedEventHandler提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.PatternServerVerifiedEventArgs">
 <summary>
 为PatternServerVerifiedEventHandler提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.PatternServerVerifiedEventArgs.Password">
 <summary>
 获取客户端绘制的手势图案数据
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.PushManager">
 <summary>
 推送类
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.PushManager.Alias">
 <summary>
 获取别名
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.PushManager.SetAlias(System.String,Smobiler.Core.RPC.SetAliasResultHandler,System.Int32)">
 <summary>
 设置别名
 </summary>
 <param name="alias">别名</param>
 <param name="handler">ResultHandler 实例</param>
 <param name="timeout">超时时间（毫秒）</param>
 <remarks>
 在同一个应用中，别名是唯一的，不能有重复。假设客户端1的别名为A，如果再设置客户端2的别名为A，则客户端1的别名会失效。
 设置别名为空字符串，可以取消别名。
 别名取值范围为：英文（大小写）、数字、下划线_，长度不超过 128 个字符。
 需要注意的是，如果没有主动取消别名（或在另外一个客户端上设置相关的别名），那么即使在客户端关闭后，那么还会收到此别名推送的内容。
 设置别名需要向推送服务器发送别名信息，此过程需要一定的时间（具体和网络有关），有可能设置失败，所以请在委托PushAliasSetEventHandler中判断是否设置成功。
 </remarks>
</member>
<member name="M:Smobiler.Core.RPC.PushManager.DeleteAlias(Smobiler.Core.RPC.SetAliasResultHandler)">
 <summary>
 删除设备别名
 </summary>
 <param name="handler">结果回调</param>
 <remarks>删除当前设备上设置的别名</remarks>
</member>
<member name="M:Smobiler.Core.RPC.PushManager.QueryAlias(Smobiler.Core.RPC.QueryAliasResultHandler)">
 <summary>
 查询设备别名
 </summary>
 <param name="handler"></param>
</member>
<member name="M:Smobiler.Core.RPC.PushManager.PluginSubscribe(Smobiler.Core.ResultHandler)">
 <summary>
 推送插件重新订阅推送
 </summary>
 <param name="handler">结果回调</param>
 <remarks>用于在打包内网推送插件后，无法收到推送内容时，可使用此方法重新订阅推送，在handler中获取订阅的结果，如果遇到异常时，即可获取异常信息</remarks>
</member>
<member name="T:Smobiler.Core.RPC.SetAliasResultHandler">
 <summary>
 一个委托，它表示基于组件API接口调用结束时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.RPC.SetAliasResultArgs"/></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.SetAliasResultArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.RPC.SetAliasResultHandler"/> 提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.SetAliasResultArgs.RegisterID">
 <summary>
 获取推送注册编号
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.QueryAliasResultHandler">
 <summary>
 一个委托，它表示基于组件API接口调用结束时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.RPC.QueryAliasResultArgs"/></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.QueryAliasResultArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.RPC.QueryAliasResultHandler"/> 提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.QueryAliasResultArgs.Alias">
 <summary>
 获取别名列表
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.ResourceManager">
 <summary>
 资源类
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.ResourceManager.Get(Smobiler.Core.RPC.ClientResourceFilter,Smobiler.Core.RPC.GetClientResourceHandler,System.Int32)">
 <summary>
 获取缓存
 </summary>
 <param name="resourceFilter">缓存过滤器</param>
 <param name="handler">回调</param>
 <param name="timeout">超时时间（毫秒）</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.ResourceManager.Load(System.String,Smobiler.Core.RPC.LoadClientResourceHandler)">
 <summary>
 向客户端载入资源
 </summary>
 <param name="filePath">资源包文件路径</param>
 <param name="handler">资源结果回调</param>
 <remarks>使用功能Packing Resources功能打包资源</remarks>
</member>
<member name="M:Smobiler.Core.RPC.ResourceManager.Remove(Smobiler.Core.RPC.ClientResourceFilter,Smobiler.Core.RPC.RemoveClientResourceHandler)">
 <summary>
 根据条件删除资源
 </summary>
 <param name="resourceFilter">资源过滤器</param>
 <param name="handler">资源结果回调</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.ResourceManager.Remove(System.String[],System.String,Smobiler.Core.RPC.RemoveClientResourceHandler)">
 <summary>
 根据列表删除资源
 </summary>
 <param name="resources">资源名称集合</param>
 <param name="resourcePath">资源路径</param>
 <param name="handler">资源结果回调</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.ResourceManager.ProcessAPICallBack(System.Object,Smobiler.Core.RPC.RPCResultArgs)">
 <summary>
 缓存处理
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.ClientResourceFilter">
 <summary>
 资源过滤器
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.ClientResourceFilter.#ctor(System.String,System.String)">
 <summary>
 构造函数
 </summary>
 <param name="idFilter">资源过滤名称</param>
 <param name="pathFilter">资源过滤路径</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.ClientResourceFilter.#ctor(System.String,System.String,System.DateTime,System.DateTime)">
 <summary>
 构造函数
 </summary>
 <param name="idFilter">资源过滤名称</param>
 <param name="pathFilter">资源过滤路径</param>
 <param name="startDate">资源过滤开始时间</param>
 <param name="endDate">资源过滤结束时间</param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.ClientResourceFilter.IDFilter">
 <summary>
 获取和设置资源过滤名称
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.ClientResourceFilter.StartDate">
 <summary>
 获取和设置资源过滤开始时间
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.ClientResourceFilter.EndDate">
 <summary>
 获取和设置资源过滤结束时间
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.ClientResourceFilter.PathFilter">
 <summary>
 获取和设置资源过滤路径
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.GetClientResourceHandler">
 <summary>
 一个委托，它表示在获取客户端资源后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 ClientResourceArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.RemoveClientResourceHandler">
 <summary>
 一个委托，它表示在删除客户端资源后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e"></param>
 <remarks>包含事件数据的 ClientResourceArgs</remarks>
</member>
<member name="T:Smobiler.Core.RPC.LoadClientResourceHandler">
 <summary>
 一个委托，它表示在载入客户端资源后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 ClientResourceArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.ClientResourceLoadArgs">
 <summary>
 为 LoadClientResourceHandler 提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.ClientResourceRemoveArgs">
 <summary>
 为RemoveClientResourceHandler提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.ClientResourceRemoveArgs.Count">
 <summary>
 删除的资源数量
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.ClientResourceArgs">
 <summary>
 为GetClientResourceHandler提供数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.ClientResourceArgs.Resouces">
 <summary>
 获取资源列表
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.ClientResourceArgs.Count">
 <summary>
 获取资源数量
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.ClientResourceArgs.ResourceData">
 <summary>
 资源数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.ClientResourceArgs.ResourceData.ResourceID">
 <summary>
 资源名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.ClientResourceArgs.ResourceData.ResourceSize">
 <summary>
 资源大小
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.ClientResourceArgs.ResourceData.ResourceDate">
 <summary>
 资源创建时间
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.RPCManager">
 <summary>
 RPCManager
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.ShareManager">
 <summary>
 分享类
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.ShareManager.SendText(System.String,Smobiler.Core.RPC.ShareManager.SharePlatform)">
 <summary>
 分享文本
 </summary>
 <param name="text">分享文本</param>
 <param name="platform">分享平台</param>
 <remarks>IOS中微信本身提示不支持该类型</remarks>
</member>
<member name="M:Smobiler.Core.RPC.ShareManager.SendURL(System.String,Smobiler.Core.RPC.ShareManager.SharePlatform)">
 <summary>
 分享链接地址
 </summary>
 <param name="url">分享链接</param>
 <param name="platform">分享平台</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.ShareManager.SendFile(System.String)">
 <summary>
 分享文件
 </summary>
 <param name="url">分享文件url</param>
</member>
<member name="M:Smobiler.Core.RPC.ShareManager.SendFile(System.String,System.String)">
 <summary>
 分享文件
 </summary>
 <param name="resourceId">资源名称</param>
 <param name="resourcePath">资源路径</param>
</member>
<member name="T:Smobiler.Core.RPC.ShareManager.SharePlatform">
 <summary>
 分享平台
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.RPC.ShareManager.SharePlatform.System">
 <summary>
 系统
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.SocketManager">
 <summary>
 客户端Socket
 </summary>
</member>
<member name="M:Smobiler.Core.RPC.SocketManager.Create(System.String,System.Int32)">
 <summary>
 创建MobileSocket对象
 </summary>
 <param name="address">地址</param>
 <param name="port">端口号</param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.MobileSocket">
 <summary>
 客户端Socket
 </summary>
</member>
<member name="E:Smobiler.Core.RPC.MobileSocket.DataReceived">
 <summary>
 在获取到数据时发生。
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.MobileSocket.Address">
 <summary>
 获取Socket连接地址
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.MobileSocket.Port">
 <summary>
 获取Socket连接端口
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.MobileSocket.ID">
 <summary>
 获取Socket编号（不公开）
 </summary>
 <returns></returns>
 <remarks>在每次Socket连接后都会分配唯一识别号，支持同一地址多个Socket连接</remarks>
</member>
<member name="M:Smobiler.Core.RPC.MobileSocket.Connect(Smobiler.Core.RPC.MobileSocketEventHandler)">
 <summary>
 连接
 </summary>
 <param name="connectHandler">连接回调</param>
</member>
<member name="M:Smobiler.Core.RPC.MobileSocket.Close(Smobiler.Core.RPC.MobileSocketEventHandler)">
 <summary>
 关闭连接
 </summary>
 <param name="closeHandler">关闭回调</param>
</member>
<member name="M:Smobiler.Core.RPC.MobileSocket.Send(System.Byte[],Smobiler.Core.RPC.MobileSocketEventHandler)">
 <summary>
 发送数据
 </summary>
 <param name="data">数据</param>
 <param name="sendHandler">发送回调</param>
</member>
<member name="M:Smobiler.Core.RPC.MobileSocket.IsOpen(Smobiler.Core.RPC.MobileSocketIsOpenEventHandler)">
 <summary>
 是否连接打开
 </summary>
 <param name="isopenHandler">打开回调</param>
</member>
<member name="T:Smobiler.Core.RPC.MobileSocketEventHandler">
 <summary>
 一个委托，它表示在Socket调用后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.RPC.MobileSocketEventArgs"/></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.MobileSocketEventArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.RPC.MobileSocketEventHandler"/> 提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.MobileSocketEventArgs.ID">
 <summary>
 获取连接编号
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.MobileSocketIsOpenEventHandler">
 <summary>
 一个委托，它表示在获取Socket是否打开后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.RPC.MobileSocketIsOpenEventArgs"/></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.MobileSocketIsOpenEventArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.RPC.MobileSocketIsOpenEventHandler"/> 提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.MobileSocketIsOpenEventArgs.IsOpen">
 <summary>
 获取一个值，该值指示客户端Socket是否连接打开。
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.MobileSocketDataReceiveEventHandler">
 <summary>
 一个委托，它表示在获取Socket接收到数据后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.RPC.MobileSocketDataReceiveEventArgs"/></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.MobileSocketDataReceiveEventArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.RPC.MobileSocketDataReceiveEventHandler"/> 提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.MobileSocketDataReceiveEventArgs.Data">
 <summary>
 获取接收到的数据
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.SQLiteManager">
 <summary>
 客户端SQLite数据库
 </summary>
</member>
<member name="M:Smobiler.Core.RPC.SQLiteManager.OpenOrCreate(Smobiler.Core.RPC.SQLiteDataBase,Smobiler.Core.RPC.SQLiteManagerHandler)">
 <summary>
 打开或创建数据库
 </summary>
 <remarks>打开数据库,如果不存在,则创建并打开</remarks>
 <param name="database">数据库实例</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.SQLiteManager.Close(Smobiler.Core.RPC.SQLiteDataBase,Smobiler.Core.RPC.SQLiteManagerHandler)">
 <summary>
 关闭数据库
 </summary>
 <param name="database">数据库实例</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.SQLiteManager.Delete(Smobiler.Core.RPC.SQLiteDataBase,Smobiler.Core.RPC.SQLiteManagerHandler)">
 <summary>
 删除数据库
 </summary>
 <param name="database">数据库实例</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.SQLiteManager.Read(System.String,Smobiler.Core.RPC.SQLiteManagerReadHandler)">
 <summary>
 执行数据库读取
 </summary>
 <param name="sqlCommand">查询语句</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.SQLiteManager.Execute(System.String,Smobiler.Core.RPC.SQLiteManagerHandler)">
 <summary>
 执行数据库指令
 </summary>
 <param name="sqlCommand">执行语句</param>
 <param name="handler">结果回调</param>
</member>
<member name="M:Smobiler.Core.RPC.SQLiteManager.Execute(System.String[],Smobiler.Core.RPC.SQLiteManagerHandler)">
 <summary>
 执行多条数据库指令
 </summary>
 <param name="sqlCommands">数据库指令集合</param>
 <param name="handler">结果回调</param>
</member>
<member name="T:Smobiler.Core.RPC.SQLiteManagerHandler">
 <summary>
 一个委托，它表示数据库操作后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.RPC.SQLiteManagerArgs"/></param>
</member>
<member name="T:Smobiler.Core.RPC.SQLiteManagerReadHandler">
 <summary>
 一个委托，它表示读取数据库数据后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.RPC.SQLiteManagerReadArgs"/></param>
</member>
<member name="T:Smobiler.Core.RPC.SQLiteManagerExecuteHandler">
 <summary>
 一个委托，它表示执行数据库指令后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 <see cref="T:Smobiler.Core.RPC.SQLiteManagerExecuteArgs"/></param>
</member>
<member name="T:Smobiler.Core.RPC.SQLiteManagerArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.RPC.SQLiteManagerHandler"/> 提供数据
 </summary>
</member>
<member name="T:Smobiler.Core.RPC.SQLiteManagerReadArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.RPC.SQLiteManagerReadHandler"/> 提供数据
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.SQLiteManagerReadArgs.Data">
 <summary>
 获取查询结果表
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.SQLiteManagerExecuteArgs">
 <summary>
 为 <see cref="T:Smobiler.Core.RPC.SQLiteManagerExecuteHandler"/> 提供数据
 </summary>
</member>
<member name="T:Smobiler.Core.RPC.SQLiteDataBase">
 <summary>
 数据库实例
 </summary>
</member>
<member name="M:Smobiler.Core.RPC.SQLiteDataBase.#ctor(System.String)">
 <summary>
 初始化SQLiteDataBase实例
 </summary>
 <param name="name">数据库名称</param>
</member>
<member name="M:Smobiler.Core.RPC.SQLiteDataBase.#ctor(System.String,System.String,System.Int32)">
 <summary>
 初始化SQLiteDataBase实例
 </summary>
 <param name="name">数据库名称</param>
 <param name="version">数据库版本</param>
 <param name="size">数据库大小</param>
</member>
<member name="P:Smobiler.Core.RPC.SQLiteDataBase.Name">
 <summary>
 获取和设置数据库名称
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.SQLiteDataBase.Version">
 <summary>
 获取和设置数据库版本
 </summary>
 <returns></returns>
 <remarks>默认1.0</remarks>
</member>
<member name="P:Smobiler.Core.RPC.SQLiteDataBase.Size">
 <summary>
 获取和设置数据库大小，单位字节
 </summary>
 <returns></returns>
 <remarks>设置为0不限制</remarks>
</member>
<member name="T:Smobiler.Core.RPC.TimerManager">
 <summary>
 客户端全局计时器
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.TimerManager.Enabled">
 <summary>
 获取一个值，该值指示计时器是否正在运行
 </summary>
 <value>如果计时器当前处于启用状态，则为 true；否则为 false。默认值为 false。</value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.RPC.TimerManager.Start(Smobiler.Core.ResultHandler)">
 <summary>
 启动计时器
 </summary>
 <param name="tickHandler">到达时间间隔后需要调用的方法</param>
</member>
<member name="M:Smobiler.Core.RPC.TimerManager.Start(System.Int32,Smobiler.Core.ResultHandler)">
 <summary>
 启动计时器
 </summary>
 <param name="interval">时间间隔</param>
 <param name="tickHandler">到达时间间隔后需要调用的方法</param>
</member>
<member name="M:Smobiler.Core.RPC.TimerManager.Stop">
 <summary>
 停止计时器
 </summary>
</member>
<member name="T:Smobiler.Core.RPC.RPCProtocolHandleArgs">
 <summary>
 API数据
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.RPCProtocolHandleArgs.IsError">
 <summary>
 获取一个值，该值指示API是否返回错误
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.RPCProtocolHandleArgs.ErrorCode">
 <summary>
 获取API返回错误标识，0代表没有返回错误
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.RPC.RPCProtocolHandleArgs.ErrorInfo">
 <summary>
 获取API返回错误信息
 </summary>
 <value></value>
 <returns></returns>
 <remarks>有可能IsError为true，但是ErrorInfo为空</remarks>
</member>
<member name="P:Smobiler.Core.RPC.RPCProtocolHandleArgs.Args">
 <summary>
 获取API附加数据
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.RPCParameter">
 <summary>
 RPC调用参数
 </summary>
</member>
<member name="F:Smobiler.Core.RPC.RPCParameter.Empty">
 <summary>
 空的调用参数
 </summary>
</member>
<member name="M:Smobiler.Core.RPC.RPCParameter.#ctor(System.Object)">
 <summary>
 构造方法
 </summary>
 <param name="params">参数</param>
</member>
<member name="M:Smobiler.Core.RPC.RPCParameter.#ctor(System.Object,System.Int32)">
 <summary>
 构造方法
 </summary>
 <param name="params">参数</param>
 <param name="timeOut">超时时间</param>
</member>
<member name="M:Smobiler.Core.RPC.RPCParameter.#ctor(System.Object,System.Int32,System.Boolean)">
 <summary>
 构造方法
 </summary>
 <param name="params">参数</param>
 <param name="timeOut">超时时间</param>
 <param name="mirrorSupport">Mirror支持</param>
</member>
<member name="M:Smobiler.Core.RPC.RPCParameter.#ctor(System.Object,System.Int32,System.Boolean,System.Boolean)">
 <summary>
 构造方法
 </summary>
 <param name="params">参数</param>
 <param name="timeOut">超时时间</param>
 <param name="mirrorSupport">Mirror支持</param>
 <param name="asyncAwait">同步等待</param>
</member>
<member name="M:Smobiler.Core.RPC.RPCParameter.#ctor(System.Object,System.Int32,System.Boolean,System.Boolean,System.Object,System.Object)">
 <summary>
 构造方法
 </summary>
 <param name="params">参数</param>
 <param name="timeOut">超时时间</param>
 <param name="mirrorSupport">Mirror支持</param>
 <param name="asyncAwait">同步等待</param>
 <param name="args">调用变量</param>
 <param name="tag">附加参数</param>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.MirrorSupport">
 <summary>
 获取和设置一个值，该值指示是否在Mirror恢复时，重新发送RPC方法的调用
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.AsyncAwait">
 <summary>
 获取和设置一个值，该值指示是否在调用RPC方法时，客户端直到返回RPC调用时才结束Loading
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.Tag">
 <summary>
 获取和设置附加数据
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.Args">
 <summary>
 获取和设置RPC调用变量
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.TimeOut">
 <summary>
 获取和设置RPC调用超时时间
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.Params">
 <summary>
 获取和设置RPC调用参数
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.ID">
 <summary>
 获取和设置RPC的ID
 </summary>
 <remarks>在某些业务场景下，需要指定RPC的编号</remarks>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.Handler">
 <summary>
 获取和设置RPC委托
 </summary>
 <returns></returns>
</member>
<member name="F:Smobiler.Core.RPC.RPCParameter.nativeRenderID">
 <summary>
 由于发送Native的参数不同，这个主要用来发送Native的一些参数
 </summary>
</member>
<member name="F:Smobiler.Core.RPC.RPCParameter.nativeRenderListID">
 <summary>
 由于在ListView中的时候，需要发送nativeRenderListID
 </summary>
</member>
<member name="F:Smobiler.Core.RPC.RPCParameter.nativeRPCType">
 <summary>
 这个用来处理官方自带的RPC类型，比如DrawerForm的侧边的打开和关闭
 </summary>
</member>
<member name="F:Smobiler.Core.RPC.RPCParameter.nativeRPCID">
 <summary>
 这个用来特殊处理一些RPC，这些RPC的ID是RenderID，比如在Signature控件上传时
 </summary>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.Priority">
 <summary>
 发送优化级
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.BeforSTML">
 <summary>
 在STML前发送
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.HandlerSender">
 <summary>
 获取和设置RPC委托发送者
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCParameter.HandlerResultParameter">
 <summary>
 获取和设置RPC委托
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.RPC.RPCResultHandler">
 <summary>
 一个委托，它表示基于组件API接口调用结束时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 RPCResultArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.RPC.RPCResultArgs">
 <summary>
 为RPCResultHandler提供数据（不可继承）
 </summary>
 <remarks>仅用于RPC结果回调，由于包含RPC所有的参数，不建议开放给用户，建议可使用Controls.ResultArgs作为公共的回调参数</remarks>
</member>
<member name="P:Smobiler.Core.RPC.RPCResultArgs.SessionID">
 <summary>
 获取RPC调用编号
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCResultArgs.keepAlive">
 <summary>
 获取和设置一个该，该值指示是否保持当前RPC调用在调用结束后，存活
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCResultArgs.rpcParams">
 <summary>
 获取调用RPC参数
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCResultArgs.rpcMethod">
 <summary>
 获取调用RPC方法
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.RPC.RPCResultArgs.result">
 <summary>
 获取RPC调用结果
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.MobileClient">
 <summary>
 客户端
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient._DeviceOS">
 <summary>
 当前客户端操作系统
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient._DeviceOSVersion">
 <summary>
 当前客户端操作系统版本
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient._coreVersion">
 <summary>
 当前客户端版本
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient._ClientDevTrace">
 <summary>
 是否记录客户端开发日志
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient._ClientTrace">
 <summary>
 是否记录客户端操作日志
 </summary>
</member>
<member name="F:Smobiler.Core.MobileClient.Info">
 <summary>
 当前客户端信息
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient.FormStack">
 <summary>
 MobileForm堆栈
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient.LastDate">
 <summary>
 最后一次连接时间
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient.SessionEndDate">
 <summary>
 当前Session的结束时间
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient.StartDate">
 <summary>
 第一次连接时间
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient._sessionID">
 <summary>
 客户端ID
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient._status">
 <summary>
 当前客户状态
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.#ctor(System.String,Smobiler.Core.ClientSource)">
 <summary>
 构造函数
 </summary>
 <param name="id"></param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.Resource">
 <summary> 
 获取 ResourceManager 对象
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.Pattern">
 <summary>
 获取 PatternManager 对象
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.Share">
 <summary>
 获取 ShareManager 对象
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.SessionID">
 <summary>
 客户端标识
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.UserSessionID">
 <summary>
 用于存储在用户登陆时的登陆SessionID
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.SetContetxtView(Smobiler.Core.Controls.MobileUserControl)">
 <summary>
 用于上下文的菜单显示，原因是由于，一个客户端只会缓存一个ContextView
 由于ContextView实际上并不存在于Form中，这里需要强制引用到这个位置，主要是因为可以点击的控件是弱引用的，如果不在这里保存，可能会导致被释放的问题
 </summary>
</member>
<member name="P:Smobiler.Core.MobileClient.ActiveForm">
 <summary>
 当前激活界面
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient._session">
 <summary>
 缓存
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.SessionInternal">
 <summary>
 内部缓存，用于缓存一些需要缓存的内容
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileClient.DeviceOS">
 <summary>
 客户端设备操作系统
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.DeviceOSVersion">
 <summary>
 客户端设备操作系统版本号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.CoreVersion">
 <summary>
 客户端程序版本号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.VersionProtocol">
 <summary>
 根据版本号生成的协议版本特性
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.Version">
 <summary>
 客户端版本号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.ScreenSize">
 <summary>
 客户端屏幕大小
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileClient.ScreenDentisySize">
 <summary>
 客户端屏幕大小除以密度
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileClient.ScreenDensity">
 <summary>
 客户端屏幕密度
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileClient.ClientFramework">
 <summary>
 客户端框架类型
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileClient.Device">
 <summary>
 客户端设备名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.PackageName">
 <summary>
 获取和设置包名
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileClient.AppName">
 <summary>
 获取和设置应用名称
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileClient.ClientDevTrace">
 <summary>
 在Trace模式为Single时，设置或获取当前Client是否启用日志
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileClient.ClientTrace">
 <summary>
 用于单独记录当前是否需要ClientTrace
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileClient.EnableStackView">
 <summary>
 可单独设置堆栈状态
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileClient.StackViewStatus">
 <summary>
 获取堆栈状态（是否支持堆栈）
 </summary>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileClient.Status">
 <summary>
 当前服务器状态
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.OnDataProcess(Smobiler.Core.Protocol.STTPEntity)">
 <summary>
 客户端数据处理
 </summary>
 <param name="item"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.GetNetWorkType(Smobiler.Core.NetWorkCallBackHandler,System.Int32)">
 <summary>
 获取网络类型
 </summary>
 <param name="handler">回调</param>
 <param name="timeout">超时时间，默认为0，为0时代表永不超时，大于0时，到达指定的超时时间后会自动触发handler，单位为秒</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.GetStatusbarHeight(Smobiler.Core.StatusbarCallBackHandler,System.Int32)">
 <summary>
 获取状态栏高度
 </summary>
 <param name="handler">回调</param>
 <param name="timeout">超时时间，默认为0，为0时代表永不超时，大于0时，到达指定的超时时间后会自动触发handler，单位为秒</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.OnRefresh(Smobiler.Core.Protocol.STTPRequest,Smobiler.Core.Protocol.SETPHandler)">
 <summary>
 当前客户端重新显示
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.OnStart(System.String)">
 <summary>
 当前客户端开始处理
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.OnStop(System.String,System.Boolean,System.String)">
 <summary>
 由于需要中止线程，所以不可以在线程内调用，必须由外部或非当前线程调用
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.Dump(System.String,System.Exception,System.Boolean)">
 <summary>
 异常
 </summary>
 <param name="title"></param>
 <param name="ex"></param>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileClient.encoding">
 <summary>
 当前字符编码
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.Render(Smobiler.Core.Protocol.STMLRenderEntity)">
 <summary>
 重要，Render这里存在主要的问题
 1. 如果是正常的客户端交互，那么这里没问题，因为客户端交互结束后，最终由MobileEngine调用Send方法
 2. 如果客户端交互已经结束，那么这里的发送就会存在问题，比如多线程时，那么只需要在多线程时需要添加一个方法即可
 </summary>
 <param name="entity"></param>
</member>
<member name="F:Smobiler.Core.MobileClient.RPCCacheList">
 <summary>
 RPCCacheList用于缓存一些要发送的RPC，目前主要用于在窗体Close时的调用
 </summary>
</member>
<member name="M:Smobiler.Core.MobileClient.RemoveAPI(System.String)">
 <summary>
 用于删除指定ID的ApiObject
 </summary>
 <param name="id"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.CheckSessionTimeOut">
 <summary>
 检查超时时间
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.SendSMS(System.String,System.String[])">
 <summary>
 发送短信
 </summary>
 <param name="message">短信内容</param>
 <param name="phoneNumbers">短信号码</param>
 <remarks>允许不指定短信号码，也可以指定一个或多个短信号码，当不指定短信号码时，那么需要在发送短信界面由操作者输入短信号码</remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.SendEmail(System.String,System.String,System.String[])">
 <summary>
 发送邮件
 </summary>
 <param name="title">邮件抬头</param>
 <param name="content">邮件内容</param>
 <param name="emailAddresses">邮件地址</param>
 <remarks>允许不指定邮件地址，也可以指定一个或多个邮件地址，当不指定邮件地址时，那么需要在发送邮件界面由操作者输入邮件地址</remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.TelCall(System.String)">
 <summary>
 打开拨号界面或通讯录
 </summary>
 <param name="tel">电话号码，如果为空，那么直接调用通讯录</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.TakeScreenShot">
 <summary>
 获取截屏数据
 </summary>
</member>
<member name="M:Smobiler.Core.MobileClient.ShowPermission">
 <summary>
 显示权限界面
 </summary>
</member>
<member name="M:Smobiler.Core.MobileClient.ShowOfflineResources">
 <summary>
 显示主线资源界面
 </summary>
</member>
<member name="M:Smobiler.Core.MobileClient.ShowNetworkDiagnosis">
 <summary>
 显示网络诊断界面
 </summary>
</member>
<member name="M:Smobiler.Core.MobileClient.ShowAbout">
 <summary>
 显示关于页
 </summary>
</member>
<member name="M:Smobiler.Core.MobileClient.OpenNotificationSetting">
 <summary>
 跳转通知设置界面功能
 </summary>
</member>
<member name="M:Smobiler.Core.MobileClient.IsNotificationEnabled(Smobiler.Core.ResultHandler{System.Boolean})">
 <summary>
 获取通知打开与否状态
 </summary>
</member>
<member name="M:Smobiler.Core.MobileClient.Toast(System.String,Smobiler.Core.Controls.ToastLength)">
 <summary>
 显示Toast
 </summary>
 <param name="message">消息文本</param>
 <param name="length">信息的存续期间，默认为短期间</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.PlayAudio(System.String,System.String,Smobiler.Core.Controls.ResourceMode,Smobiler.Core.ResultHandler)">
 <summary>
 播放音频
 </summary>
 <param name="resourceid">资源编号</param>
 <param name="resourcepath">资源路径</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClient.Vibrate(System.Int32)">
 <summary>
 震动
 </summary>
 <param name="duration">持续时间（毫秒）</param>
</member>
<member name="M:Smobiler.Core.MobileClient.PlaySystemSound(Smobiler.Core.Protocol.SystemSoundType,System.Int32)">
 <summary>
 播放系统提示音
 </summary>
 <param name="type">提示音类型</param>
 <param name="iosSoundId">ios提示音编号，ios有效，默认为0,当值大于1000时,调用ios提示音,参数列表查看http://iphonedevwiki.net/index.php/AudioServices</param>
</member>
<member name="M:Smobiler.Core.MobileClient.RedirectUrl(System.String,System.Boolean)">
 <summary>
 跳转指定URL的网页
 </summary>
 <param name="url">网页地址</param>
 <param name="newTab">在Web模式下是否打开新的Tab标签</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileClientCollection.GetClientStatus(System.String)">
 <summary>
 获取客户端状态
 </summary>
 <param name="id"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.MobileSessionState">
 <summary>
 客户端键值集合
 </summary>
</member>
<member name="P:Smobiler.Core.MobileSessionState.Item(System.String)">
 <summary>
 获取和设置指定键名的值
 </summary>
 <param name="name"></param>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileSessionState.Item(System.Int32)">
 <summary>
 获取和设置指定索引的值
 </summary>
 <param name="index"></param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileSessionState.Add(System.String,System.Object)">
 <summary>
 添加指定的键和值到实例中
 </summary>
 <param name="name">键名</param>
 <param name="value">键值</param>
</member>
<member name="M:Smobiler.Core.MobileSessionState.Remove(System.String)">
 <summary>
 移除指定键名的项
 </summary>
 <param name="name"></param>
</member>
<member name="M:Smobiler.Core.MobileSessionState.RemoveAt(System.Int32)">
 <summary>
 移除指定索引的项
 </summary>
 <param name="index"></param>
</member>
<member name="M:Smobiler.Core.MobileSessionState.Clear">
 <summary>
 移除所有项
 </summary>
</member>
<member name="M:Smobiler.Core.MobileSessionState.ContainsKey(System.String)">
 <summary>
 是否包含指定名称的项
 </summary>
 <param name="name"></param>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Plugin.MobilePluginAPI">
 <summary>
 MobilePluginAPI
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Plugin.MobilePluginAPI.CallPlugin(System.String,Smobiler.Core.Plugin.MobilePluginAPIArgs,System.Action{System.Object,System.Object})">
 <summary>
 CallPlugin
 </summary>
 <param name="sessionid">sessionid</param>
 <param name="args">args</param>
 <param name="ahandler">ahandler</param>
</member>
<member name="M:Smobiler.Core.Plugin.MobilePluginAPI.CallPlugin(System.String,Smobiler.Core.Plugin.MobilePluginAPIArgs,System.Action{System.Object,System.Object},System.Func{System.Object,System.Object,System.Object})">
 <summary>
 CallPlugin
 </summary>
 <param name="sessionid">sessionid</param>
 <param name="args">args</param>
 <param name="ahandler">ahandler</param>
 <param name="fhandler">fhandler</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Plugin.MobilePluginAPIArgs">
 <summary>
 MobilePluginAPIArgs
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Plugin.MobilePluginAPIArgs.#ctor(System.Object,System.Object,System.Boolean)">
 <summary>
 构造函数
 </summary>
 <param name="data">data</param>
 <param name="tag">tag</param>
 <param name="persist">persist</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Plugin.MobilePluginAPIArgs.#ctor(System.Object,System.Object,System.Boolean,System.Boolean)">
 <summary>
 构造函数
 </summary>
 <param name="data">data</param>
 <param name="tag">tag</param>
 <param name="persist">persist</param>
 <param name="native">native</param>
</member>
<member name="P:Smobiler.Core.Plugin.MobilePluginAPIArgs.Tag">
 <summary>
 Tag
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Plugin.MobilePluginAPIArgs.Data">
 <summary>
 Data
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Plugin.MobilePluginAPIArgs.Persist">
 <summary>
 Persist
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Plugin.MobilePluginAPIArgs.Native">
 <summary>
 Native
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.Plugin.MobilePluginAPIResult">
 <summary>
 MobilePluginAPIResult
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Plugin.MobilePluginAPIResult.Status">
 <summary>
 Status
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Plugin.MobilePluginAPIResult.Error">
 <summary>
 Error
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Plugin.MobilePluginAPIResult.Data">
 <summary>
 Data
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Plugin.MobilePluginAPIResult.Args">
 <summary>
 Args
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Protocol.SystemSoundType">
 <summary>
 系统声音类型
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.SystemSoundType.Notification">
 <summary>
 通知音
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.SystemSoundType.Alarm">
 <summary>
 闹钟音
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.SystemSoundType.Phone">
 <summary>
 来电音
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.SystemSoundType.Stop">
 <summary>
 关闭提示音 android有效(ios提示音很短,此参数无效)
 </summary>
</member>
<member name="T:Smobiler.Core.Protocol.ProtocolRenderHandler">
 <summary>
 一个Client只会保存一份ProtocolRenderHandler
 一个STTPRequest会重新创建Client的ProtocolRenderHandler
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.ProtocolRenderAction.INITIALSTACK">
 <summary>
 基于栈的初始化
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.ProtocolRenderAction.INITIAL">
 <summary>
 窗体初始状态
 初始状态会添加到ui协议中
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.ProtocolRenderAction.INITIALDRAWER">
 <summary>
 侧边栏控件
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.ProtocolRenderAction.ADD">
 <summary>
 创建
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ProtocolRenderAction.UPDATE">
 <summary>
 更新
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ProtocolRenderAction.STML">
 <summary>
 更新STML属性
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.ProtocolRenderAction.REMOVE">
 <summary>
 删除
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ProtocolRenderAction.RPC">
 <summary>
 RPC调用
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.ProtocolRenderAction.DirectSend">
 <summary>
 直接发送
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Protocol.STMLChartDataSourceRenerEntity.DelInternal(System.Collections.Generic.Dictionary{System.String,System.Object}@,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
 <summary>
 删除只会有两种情况，一种是删除DataSet，一种是删除YVals
 </summary>
 <param name="baseDict"></param>
 <param name="delDict"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.STMLListViewDataSourceRenderEntity.dataBlob">
 <summary>
 目前在ListView的结构中，del,clean,update都会最终进行序列化，类型根据type来
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.STMLListViewEntity.dataSource">
 <summary>
 在序列化时，dataSource返回为nothing，并不会进行序列化，但是还是会参与序列化过程。只是为了触发RenderDataSource操作。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.RPCProtocolErrorCode.ParseError">
 <summary>
 解析错误
 </summary>
 <remarks>错误的JSON格式.</remarks>
</member>
<member name="F:Smobiler.Core.Protocol.RPCProtocolErrorCode.IllegalRequest">
 <summary>
 非法请求
 </summary>
 <remarks>收到的JSON对象不是一个正常的请求对象.</remarks>
</member>
<member name="F:Smobiler.Core.Protocol.RPCProtocolErrorCode.UnkonwLocalMethod">
 <summary>
 未知的本地方法
 </summary>
 <remarks>请求的方法在本地不存在或未登记.</remarks>
</member>
<member name="F:Smobiler.Core.Protocol.RPCProtocolErrorCode.IllegalParams">
 <summary>
 非法参数
 </summary>
 <remarks>请求方法的参数错误.</remarks>
</member>
<member name="F:Smobiler.Core.Protocol.RPCProtocolErrorCode.InternalError">
 <summary>
 内部错误
 </summary>
 <remarks>内部错误.</remarks>
</member>
<member name="M:Smobiler.Core.Protocol.NullPropertiesConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
 <summary>
 由于目前需要触发的这一类型由SupportedTypes来确定，所以对于外部类型的属性为null时，这里并没有提供转换，需要外部类型自行处理
 </summary>
 <param name="obj"></param>
 <param name="serializer"></param>
 <returns></returns>
</member>
<member name="F:Smobiler.Core.Protocol.SETPHandler.mBuffer">
 <summary>
 Socket缓存,使用1KB
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.SETPHandler.mSym">
 <summary>
 AES
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.SETPHandler.mEncoder">
 <summary>
 数据编码
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.SETPHandler.RSAPrivateKey">
 <summary>
 RSA私钥
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.SETPHandler.RSAPublicKey">
 <summary>
 RSA公钥
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.SETPHandler.RSAPublicPemKeys">
 <summary>
 RSA公钥PEM
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.SETPHandler.mCLientRandomNumberBytes">
 <summary>
 客户端握手随机数
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.SETPHandler.mClientConfirmNumberBytes">
 <summary>
 客户端确认随机数
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.SETPHandler.mServerRandomNumberBytes">
 <summary>
 服务器端确认随机数
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.SETPHandler.StmlProtocolSessionDict">
 <summary>
 客户端Session字典
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.SETPHandler.IPEndPoint">
 <summary>
 获取远程终结点
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.SETPHandler.Encoding">
 <summary>
 编码
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.SETPHandler.Buffer">
 <summary>
 缓存
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.SETPHandler.SessionID">
 <summary>
 客户端在连接后的会话编号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.SETPHandler.AesKey">
 <summary>
 和客户端的AESKEY   128位
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.SETPHandler.ClientProtocolVersionMajor">
 <summary>
 客户端协议主版本号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.SETPHandler.ClientProtocolVersionMinor">
 <summary>
 客户端协议副版本号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.SETPHandler.ServerProtocolVersionMajor">
 <summary>
 服务器端协议主版本号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.SETPHandler.ServerProtocolVersionMinor">
 <summary>
 服务器端协议副版本号
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Protocol.SETPHandler.InitialRSA">
 <summary>
 初始化RSA
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.SETPHandler.mStmlBuffer">
 <summary>
 缓存的协议字节
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Protocol.SETPHandler.ProcessStmlReceive(System.Int32)">
 <summary>
 新协议的处理
 </summary>
 <param name="nBytesRec"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Protocol.SETPHandler.CreateStmlEntry(System.Int32)">
 <summary>
 创建STML协议实体
 </summary>
 <param name="nBytesRec"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Protocol.SETPHandler.CreateStmlProtocolHandshakeServerConfirm">
 <summary>
 创建ServerConfirm协议头
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Protocol.SETPHandler.DisconnectInternal">
 <summary>
 内部连接断开
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Protocol.SETPHandler.SendInternal(System.Object,Smobiler.Core.ProtocalCode,Smobiler.Core.ProtocalConentType)">
 <summary>
 基础数据发送
 </summary>
 <param name="data"></param>
 <param name="status"></param>
 <param name="contenttype"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Protocol.SETPHandler.SendException">
 <summary>
 发送异常
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Protocol.SETPHandler.SendStmlProtocolException(Smobiler.Core.Protocol.SETPProtocolExceptionLevel,Smobiler.Core.Protocol.SETPProtocolExceptionCode)">
 <summary>
 发送异常
 </summary>
 <param name="level"></param>
 <param name="code"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.Protocol.SETPHandler.SendStmlProtocol(System.Byte,System.Byte[])">
 <summary>
 按最新的StmlProtocol协议发送
 </summary>
 <param name="data"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Protocol.ConnectorEntry">
 <summary>
 协议实体
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.ConnectorEntry.ContentType">
 <summary>
 协议实体类型
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.ConnectorEntry.MessageType">
 <summary>
 协议实体消息类型
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.ConnectorEntry.ContentLength">
 <summary>
 协议实体数据长度
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.ConnectorEntry.RawContent">
 <summary>
 原始数据
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Protocol.ConnectorEntryContentType">
 <summary>
 协议实体类型
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ConnectorEntryContentType.Alert">
 <summary>
 警报
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ConnectorEntryContentType.Handshake">
 <summary>
 握手
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ConnectorEntryContentType.ApplicationData">
 <summary>
 实体数据
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ConnectorEntryContentType.Heartbeat">
 <summary>
 心跳
 </summary>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.Protocol.ConnectorEntryMessageType">
 <summary>
 协议实体消息类型
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ConnectorEntryMessageType.ClientHello">
 <summary>
 客户端第一次握手
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ConnectorEntryMessageType.ServerHello">
 <summary>
 服务器第一次握手返回
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ConnectorEntryMessageType.ClientConfirm">
 <summary>
 客户端握手确认
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ConnectorEntryMessageType.ServerConfirm">
 <summary>
 服务器端握手确认
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.ClientSessionClass.SessionID">
 <summary>
 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.ClientSessionClass.AESKey">
 <summary>
 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.ClientSessionClass.AESIV">
 <summary>
 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ClientSessionClass.mCreateDate">
 <summary>
 创建时间
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.Protocol.ClientSessionClass.ClientSessionTimeout">
 <summary>
 有效Session时长（3600秒）
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.ClientSessionClass.ServiceKey">
 <summary>
 缓存ServiceKey
 </summary>
 <returns></returns>
</member>
<member name="F:Smobiler.Core.Protocol.SETPSocketHandler.mSok">
 <summary>
 Socket实体
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.SETPSocketHandler.Socket">
 <summary>
 Socket
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.Protocol.STTPEntity.ContentType">
 <summary>
 STML/版本号 传输的消息正文为STML文本。
 RPC/版本号 传输的消息正文为RPC文本。
 RAW 传输的消息正文为二进制数据。
 </summary>
 <remarks>报头域 消息正文的类型</remarks> 
 <returns></returns>
</member>
<member name="F:Smobiler.Core.Protocol.STTPResponseCode.OK">
 <summary>
 客户端请求成功。
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.STTPResponseCode.BadRequest">
 <summary>
 客户端请求有语法错误，不能被服务器所理解。
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.STTPResponseCode.Unauthorized">
 <summary>
 请求未经授权。
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.STTPResponseCode.Forbidden">
 <summary>
 服务器收到请求，但是拒绝提供服务。
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.STTPResponseCode.NotFound">
 <summary>
 请求资源不存在。
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.STTPResponseCode.InternalServerError">
 <summary>
 服务器发生不可预期的错误。
 </summary>
</member>
<member name="F:Smobiler.Core.Protocol.STTPResponseCode.ServerUnavailable">
 <summary>
 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。
 </summary>
</member>
<member name="T:Smobiler.Core.ManagedThreading.MobileManagedThreadBase">
 <summary>
 托管线程基类
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ManagedThreading.MobileManagedThreadBase.ManagedObject">
 <summary>
 托管对象
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ManagedThreading.MobileManagedThreadBase.Name">
 <summary>
 托管对象名称
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.ManagedThreading.MobileManagedThreadBase.SessionStoped">
 <summary>
 在用户重新连接、用户会话过期、代码中未捕获的异常触发Dump、通过其他方式停止会话等情况时发生
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.ManagedThreading.MobileManagedThreadBase.FormClosed">
 <summary>
 在窗体关闭后发生
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.ManagedThreading.MobileManagedThreadBase.FormActivated">
 <summary>
 当使用代码激活或用户激活窗体时发生
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.ManagedThreading.MobileManagedThreadBase.FormDeactivate">
 <summary>
 当窗体失去焦点成为不活动窗体时发生
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ManagedThreading.MobileManagedThreadBase.SetThreadSession(System.String)">
 <summary>
 设置线程会话编号
 </summary>
 <param name="sessionid">会话编号</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ManagedThreading.MobileManagedThreadBase.GetThreadSessionID">
 <summary>
 获取线程会话编号
 </summary>
 <returns></returns>
</member>
<member name="T:Smobiler.Core.ManagedThreading.MobileManagedThread">
 <summary>
 托管Threading.Thread
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ManagedThreading.MobileManagedThread.#ctor(System.Threading.Thread,System.String)">
 <summary>
 构造函数
 </summary>
 <param name="managedObject">托管线程</param>
 <param name="name">名称</param>
</member>
<member name="M:Smobiler.Core.ManagedThreading.MobileManagedThread.#ctor(System.Threading.Thread,System.String,System.String)">
 <summary>
 构造函数
 </summary>
 <param name="managedObject">托管线程</param>
 <param name="name">名称</param>
 <param name="sessionid">会话编号</param>
</member>
<member name="M:Smobiler.Core.ManagedThreading.MobileManagedThread.#ctor(System.Threading.Thread,System.String,System.String,System.String)">
 <summary>
 构造函数
 </summary>
 <param name="managedObject">托管线程</param>
 <param name="name">名称</param>
 <param name="sessionid">会话编号</param>
 <param name="sessionform">窗体</param>
</member>
<member name="P:Smobiler.Core.ManagedThreading.MobileManagedThread.ManagedThread">
 <summary>
 获取Threading.Thread
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ManagedThreading.MobileManagedThread.ThreadStop">
 <summary>
 如果发现在应该停止的时候，比如FormClose时或Client退出时，还没有Close的，会强制被关闭
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ManagedThreading.MobileManagedThread.SetUnManagedThread(System.Threading.Thread,System.String)">
 <summary>
 设置线程为会话模式
 </summary>
 <param name="td">线程</param>
 <param name="sessionid">会话编号</param>
</member>
<member name="T:Smobiler.Core.ManagedThreading.MobileManagedThreadingTimer">
 <summary>
 托管ThreadingTimer
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.ManagedThreading.MobileManagedThreadingTimer.#ctor(System.Threading.Timer,System.String)">
 <summary>
 构造函数
 </summary>
 <param name="managedObject">托管时间</param>
 <param name="name">托管名称</param>
</member>
<member name="M:Smobiler.Core.ManagedThreading.MobileManagedThreadingTimer.#ctor(System.Threading.Timer,System.String,System.String)">
 <summary>
 构造函数
 </summary>
 <param name="managedObject">托管时间</param>
 <param name="name">托管名称</param>
 <param name="sessionid">会话编号</param>
</member>
<member name="M:Smobiler.Core.ManagedThreading.MobileManagedThreadingTimer.#ctor(System.Threading.Timer,System.String,System.String,System.String)">
 <summary>
 构造函数
 </summary>
 <param name="managedObject">托管时间</param>
 <param name="name">托管名称</param>
 <param name="sessionid">会话编号</param>
 <param name="sessionform">会话窗体</param>
</member>
<member name="P:Smobiler.Core.ManagedThreading.MobileManagedThreadingTimer.ManagedTimer">
 <summary>
 获取Threading.Timer
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.ManagedThreading.MobileManagedTimer">
 <summary>
 托管Timers.Timer
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ManagedThreading.MobileManagedTimer.ManagedTimer">
 <summary>
 获取Timers.Timer
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.MobileEngine.ProcessEventHandler">
 <summary>
 解析委托
 </summary>
 <param name="entity"></param>
 <param name="connector"></param>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileEngine.Stml_404">
 <summary>
 用于错误后的返回数据
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileEngine.ProtocolSessionIDAesDict">
 <summary>
 当前与客户端在通讯协议中保存的基于通讯SessionID的AESkey
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileEngine.HTTPAccessKey">
 <summary>
 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileEngine.HTTPAccessKeyAuth(System.String)">
 <summary>
 
 </summary>
 <param name="key"></param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileEngine.Process(System.Collections.Generic.List{Smobiler.Core.Protocol.ConnectorEntry},Smobiler.Core.Protocol.SETPHandler)">
 <summary>
 Process是在一个网络条件下处理的，所以这里不需要考虑多个Client的情况
 因为一个Socket肯定只会对应一个客户端
 </summary>
 <param name="centity"></param>
 <param name="connector"></param>
</member>
<member name="M:Smobiler.Core.ValueConverter.ConvertToXMLString(System.String)">
 <summary>
 对XML转义，目前直接在ConvertToString中使用System.Web.HttpUtility.HtmlEncode
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.CcbRsaHelper.FromPem(System.String)">
 <summary>Imports PEM formatted key or certificate into crypto provider</summary>
 <param name="data">Content of PEM-formatted object.</param>
 <returns>Crypto provider, defined by given argument.</returns>
</member>
<member name="M:Smobiler.Core.CcbRsaHelper.FromPem(System.String,System.String)">
 <summary>Imports PEM formatted key or certificate into crypto provider</summary>
 <param name="data">Content of PEM-formatted object.</param>
 <param name="passKey">Passkey for PEM-formatted object.</param>
 <returns>Crypto provider, defined by given argument.</returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.RSAKey(System.String@,System.String@)">
 <summary>
 RSA产生密钥
 </summary>
 <param name="xmlKeys">私钥</param>
 <param name="xmlPublicKey">公钥</param>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.RSAEncrypt(System.String,System.String)">
 <summary>
 RSA的加密函数
 </summary>
 <param name="xmlPublicKey">公钥</param>
 <param name="encryptString">待加密的字符串</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.RSAEncrypt(System.String,System.Byte[])">
 <summary>
 RSA的加密函数 
 </summary>
 <param name="xmlPublicKey">公钥</param>
 <param name="EncryptString">待加密的字节数组</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.RSADecrypt(System.String,System.String)">
 <summary>
 RSA的解密函数
 </summary>
 <param name="xmlPrivateKey">私钥</param>
 <param name="decryptString">待解密的字符串</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.RSADecrypt(System.String,System.Byte[])">
 <summary>
 RSA的解密函数 
 </summary>
 <param name="xmlPrivateKey">私钥</param>
 <param name="DecryptString">待解密的字节数组</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.RSADecryptByte(System.String,System.Byte[])">
 <summary>
 RSA的解密函数 
 </summary>
 <param name="xmlPrivateKey">私钥</param>
 <param name="DecryptString">待解密的字节数组</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.GetHash(System.String,System.Byte[]@)">
 <summary>
 获取Hash描述表
 </summary>
 <param name="strSource">待签名的字符串</param>
 <param name="HashData">Hash描述</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.GetHash(System.String,System.String@)">
 <summary>
 获取Hash描述表
 </summary>
 <param name="strSource">待签名的字符串</param>
 <param name="strHashData">Hash描述</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.GetHash(System.IO.FileStream,System.Byte[]@)">
 <summary>
 获取Hash描述表
 </summary>
 <param name="objFile">待签名的文件</param>
 <param name="HashData">Hash描述</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.GetHash(System.IO.FileStream,System.String@)">
 <summary>
 获取Hash描述表
 </summary>
 <param name="objFile">待签名的文件</param>
 <param name="strHashData">Hash描述</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.SignatureFormatter(System.String,System.Byte[],System.Byte[]@)">
 <summary>
 RSA签名
 </summary>
 <param name="strKeyPrivate">私钥</param>
 <param name="HashbyteSignature">待签名Hash描述</param>
 <param name="EncryptedSignatureData">签名后的结果</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.SignatureFormatter(System.String,System.Byte[],System.String@)">
 <summary>
 RSA签名
 </summary>
 <param name="strKeyPrivate">私钥</param>
 <param name="HashbyteSignature">待签名Hash描述</param>
 <param name="strEncryptedSignatureData">签名后的结果</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.SignatureFormatter(System.String,System.String,System.Byte[]@)">
 <summary>
 RSA签名
 </summary>
 <param name="strKeyPrivate">私钥</param>
 <param name="strHashbyteSignature">待签名Hash描述</param>
 <param name="EncryptedSignatureData">签名后的结果</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.SignatureFormatter(System.String,System.String,System.String@)">
 <summary>
 RSA签名
 </summary>
 <param name="strKeyPrivate">私钥</param>
 <param name="strHashbyteSignature">待签名Hash描述</param>
 <param name="strEncryptedSignatureData">签名后的结果</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.SignatureDeformatter(System.String,System.Byte[],System.Byte[])">
 <summary>
 RSA签名验证
 </summary>
 <param name="strKeyPublic">公钥</param>
 <param name="HashbyteDeformatter">Hash描述</param>
 <param name="DeformatterData">签名后的结果</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.SignatureDeformatter(System.String,System.String,System.Byte[])">
 <summary>
 RSA签名验证
 </summary>
 <param name="strKeyPublic">公钥</param>
 <param name="strHashbyteDeformatter">Hash描述</param>
 <param name="DeformatterData">签名后的结果</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.SignatureDeformatter(System.String,System.Byte[],System.String)">
 <summary>
 RSA签名验证
 </summary>
 <param name="strKeyPublic">公钥</param>
 <param name="HashbyteDeformatter">Hash描述</param>
 <param name="strDeformatterData">签名后的结果</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.SignatureDeformatter(System.String,System.String,System.String)">
 <summary>
 RSA签名验证
 </summary>
 <param name="strKeyPublic">公钥</param>
 <param name="strHashbyteDeformatter">Hash描述</param>
 <param name="strDeformatterData">签名后的结果</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.CreateBitString(Smobiler.Core.MobileRSACryption.AsnType)">
 <summary>
 An ordered sequence of zero, one or more bits. Returns
 the AsnType representing an ASN.1 encoded bit string.
 If value is null, an empty (0 length) bit string is
 returned.
 </summary>
 <param name="value">An AsnType object to be encoded.</param>
 <returns>Returns the AsnType representing an ASN.1
 encoded bit string.</returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.CreateBitString(System.Byte[],System.UInt32)">
 <summary>
 <para>An ordered sequence of zero, one or more bits. Returns
 the AsnType representing an ASN.1 encoded bit string.</para>
 <para>unusedBits is applied to the end of the bit string,
 not the start of the bit string. unusedBits must be less than 8
 (the size of an octet). Refer to ITU X.680, Section 32.</para>
 <para>If octets is null or length is 0, an empty (0 length)
 bit string is returned.</para>
 </summary>
 <param name="octets">A MSB (big endian) byte[] representing the
 bit string to be encoded.</param>
 <param name="unusedBits">The number of unused trailing binary
 digits in the bit string to be encoded.</param>
 <returns>Returns the AsnType representing an ASN.1
 encoded bit string.</returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.CreateIntegerPos(System.Byte[])">
 <summary>
 <para>Returns the AsnType representing a positive ASN.1 encoded
 integer. If the high bit of most significant byte is set,
 the method prepends a 0x00 to octets before assigning the
 value to ensure the resulting integer is interpreted as
 positive in the application.</para>
 <para>If octets is null or zero length, the method returns an
 AsnType equivalent to CreateInteger(byte[]{0})..</para>
 </summary>
 <param name="value">A MSB (big endian) byte[] representing the
 integer to be encoded.</param>
 <returns>Returns the AsnType representing an ASN.1
 encoded positive integer.</returns>
 <example>
 ASN.1 encoded 0:
 <code>CreateIntegerPos(null)</code>
 <code>CreateIntegerPos(new byte[]{0x00})</code>
 <code>CreateIntegerPos(new byte[]{0x00, 0x00})</code>
 </example>
 <example>
 ASN.1 encoded 1:
 <code>CreateInteger(new byte[]{0x01})</code>
 </example>
 <seealso cref="M:Smobiler.Core.MobileRSACryption.CreateInteger(System.Byte[])"/>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.CreateNull">
 <summary>
 Returns the AsnType representing an ASN.1 encoded null.
 </summary>
 <returns>Returns the AsnType representing an ASN.1
 encoded null.</returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.CreateSequence(Smobiler.Core.MobileRSACryption.AsnType[])">
 <summary>
 <para>An ordered collection of one or more types.
 Returns the AsnType representing an ASN.1 encoded sequence.</para>
 <para>If the AsnType is null, an
 empty sequence (length 0) is returned.</para>
 </summary>
 <param name="values">An array of AsnType consisting of
 the values in the collection to be encoded.</param>
 <returns>Returns the AsnType representing an ASN.1
 encoded Set.</returns>
</member>
<member name="M:Smobiler.Core.MobileRSACryption.CreateOid(System.String)">
 <summary>
 Returns the AsnType representing an ASN.1 encoded OID.
 If conversion fails, the result is a partial conversion
 up to the point of failure. If the oid string is null or
 not well formed, an empty byte[] is returned.
 </summary>
 <param name="value">The string representing the object
 identifier to be encoded.</param>
 <returns>Returns the AsnType representing an ASN.1
 encoded object identifier.</returns>
 <example>The following assigns the encoded AsnType
 for a RSA key to oid:
 <code>AsnType oid = CreateOid("1.2.840.113549.1.1.1")</code>
 </example>
</member>
<member name="M:Smobiler.Core.MobileSymmetric.GetLegalKey">
 <summary>
 KEY为32位
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileSymmetric.GetLegalIV">
 <summary>
 IV为16位
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.MobileGlobal">
 <summary>
 全局类
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileGlobal._clients">
 <summary>
 当前客户端连接集合
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileGlobal.HttpServerPort">
 <summary>
 HTTP端口
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileGlobal.TcpServerPort">
 <summary>
 TCP端口
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileGlobal.DeveloperTrace">
 <summary>
 客户端日志输出模式
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileGlobal.SessionTimeOut">
 <summary>
 缓存超时时间
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileGlobal.NetworkTimeOut">
 <summary>
 网络超时时间
 </summary>
</member>
<member name="F:Smobiler.Core.MobileGlobal.StartFormType">
 <summary>
 开始窗体
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileGlobal.EncodingMode">
 <summary>
 字符编码
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileGlobal.TracePrint">
 <summary>
 开发时的调试输出
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileGlobal.ClientTrace">
 <summary>
 客户端日志输出
 </summary>
</member>
<member name="F:Smobiler.Core.MobileGlobal.EnableStackView">
 <summary>
 客户端堆栈
 </summary>
</member>
<member name="F:Smobiler.Core.MobileGlobal.mMirrorPatternMaxVerifyTimes">
 <summary>
 手势密码最大重试次数
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileGlobal.IsSysLog">
 <summary>
 系统日志
 </summary>
</member>
<member name="F:Smobiler.Core.MobileGlobal.PurgingTimer">
 <summary>
 净化线程时间
 </summary>
</member>
<member name="F:Smobiler.Core.MobileGlobal.PerformTimeSpan">
 <summary>
 性能监控时间
 </summary>
</member>
<member name="F:Smobiler.Core.MobileGlobal.SecurityMode">
 <summary>
 安装模式
 </summary>
</member>
<member name="F:Smobiler.Core.MobileGlobal.WhiteList">
 <summary>
 白名单
 </summary>
</member>
<member name="F:Smobiler.Core.MobileGlobal.BlackList">
 <summary>
 黑名单
 </summary>
</member>
<member name="P:Smobiler.Core.MobileGlobal.Clients">
 <summary>
 当前客户端字典
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileGlobal.RelativeScreen">
 <summary>
 获取是否使用相对屏幕密度
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileGlobal.MirrorPatternMaxVerifyTimes">
 <summary>
 获取窗体在Mirror模式时，最大图案解锁验证次数
 </summary>
 <value>默认为3，最小为1</value>
 <returns></returns>
 <remarks>超过最大次数时，会重置当前客户端会话</remarks>
</member>
<member name="M:Smobiler.Core.MobileGlobal.CopyDataFrom(Smobiler.Core.Setting)">
 <summary>
 从设置中初始化服务器设置
 </summary>
 <param name="setting"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileGlobal.CreateEncoding">
 <summary>
 创建根据配置的字符编码
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileGlobal.GetRandomInt32Byte">
 <summary>
 获取4位随机数
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileLoger.LogAesEncryptKey">
 <summary>
 当前LOG加密AESKEY
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileLoger.LogAesEncryptKeyList">
 <summary>
 当前LOG加密AESKEY与SessionID存在的列表，因为需要在当前SessionID对应的日志的头部添加AESKEY
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileLoger.LogServerTrace(System.String,System.String)">
 <summary>
 记录Server的公开日志
 </summary>
 <param name="prefix"></param>
 <param name="txt"></param>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileLoger.IsLogClientPublicTrace(System.Boolean)">
 <summary>
 用于判断是否输出
 </summary>
 <param name="clientTrace"></param>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileLoger.IsLogClientPublicAndDevTrace(System.Boolean,System.Boolean)">
 <summary>
 用于判断是否输出
 </summary>
 <param name="clientDevTrace"></param>
 <returns></returns>
</member>
<member name="P:Smobiler.Core.MobileLoger.IsLogClientDevTrace(System.Boolean)">
 <summary>
 是否加密输出
 </summary>
 <param name="clientDevTrace"></param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileLoger.LogClientPublicTrace(System.String,System.String,System.String,System.Boolean)">
 <summary>
 记录公开日志
 </summary>
 <param name="id"></param>
 <param name="Prefix"></param>
 <param name="txt"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileLoger.LogClientPublicAndDevTrace(System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 记录公开及开发日志
 </summary>
 <param name="id"></param>
 <param name="Prefix"></param>
 <param name="txt"></param>
 <param name="clientTrace"></param>
 <param name="clientDevTrace"></param>
</member>
<member name="M:Smobiler.Core.MobileLoger.LogClientDevTrace(System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 记录当前Client的日志
 </summary>
 <param name="id"></param>
 <param name="Prefix"></param>
 <param name="txt"></param>
 <param name="singleLine">这里是记录的内容是单选还是多行的</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileLoger.LogDumpTrace(System.String,System.String)">
 <summary>
 记录内部异常日志
 </summary>
 <param name="Prefix"></param>
 <param name="txt"></param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileLoger.LogSecurityTrace(System.String,System.String)">
 <summary>
 记录安全信息
 </summary>
 <param name="prefix"></param>
 <param name="txt"></param>
</member>
<member name="M:Smobiler.Core.MobileLoger.HandleLogSecurityTrace(System.String,System.String,System.String,System.Boolean)">
 <summary>
 异步记录日志
 </summary>
 <param name="id"></param>
 <param name="Prefix"></param>
 <param name="txt"></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.MobileResourceManager">
 <summary>
 资源管理类
 </summary>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.mResourceRootPath">
 <summary>
 资源根路径
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.mDefaultImagePath">
 <summary>
 默认的图片路径
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.mDefaultAudioPath">
 <summary>
 默认的声音路径
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.mDefaultDocumentPath">
 <summary>
 默认的文件路径
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.mDefaultUploadPath">
 <summary>
 默认上传路径
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.mDefaultMediaPath">
 <summary>
 默认媒体路径
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.mDefaultWebPath">
 <summary>
 默认WEB路径
 </summary>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultImageResourceName">
 <summary>
 默认图片资源名称
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultImageDirectoryName">
 <summary>
 默认图片资源路径
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultAudioResourceName">
 <summary>
 默认音频资源名称
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultAudioDirectoryName">
 <summary>
 默认音频资源路径
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultDocumentResourceName">
 <summary>
 默认文档资源名称
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultDocumentDirectoryName">
 <summary>
 默认文档资源路径
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultUploadResourceName">
 <summary>
 默认上传资源名称
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultUploadDirectoryName">
 <summary>
 默认上传资源路径
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultMediaResourceName">
 <summary>
 默认上传资源名称
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultMediaDirectoryName">
 <summary>
 默认上传资源路径
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultWebResourceName">
 <summary>
 默认Web资源名称
 </summary>
</member>
<member name="F:Smobiler.Core.MobileResourceManager.DefaultWebDirectoryName">
 <summary>
 默认Web资源路径
 </summary>
</member>
<member name="P:Smobiler.Core.MobileResourceManager.ResourceRootPath">
 <summary>
 获取和设置资源根路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileResourceManager.DefaultImagePath">
 <summary>
 获取默认图像路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileResourceManager.DefaultAudioPath">
 <summary>
 获取默认文档路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileResourceManager.DefaultDocumentPath">
 <summary>
 获取默认文档路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileResourceManager.DefaultUploadPath">
 <summary>
 获取默认上传路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileResourceManager.DefaultMediaPath">
 <summary>
 获取默认媒体路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileResourceManager.DefaultWebPath">
 <summary>
 获取默认Web资源路径
 </summary>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileResourceManager.GetResourceFullPath(System.String,System.String)">
 <summary>
 根据资源名称和资源路径获取完整资源路径
 </summary>
 <param name="resourceid">资源编号</param>
 <param name="resourcepath">资源路径</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileResourceManager.GetResourceFullPath(System.String,System.String,System.String)">
 <summary>
 根据资源名称和资源路径获取完整资源路径
 </summary>
 <param name="resourceid">资源编号</param>
 <param name="resourcepath">资源路径</param>
 <param name="rootpath">根路径</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileResourceManager.GetFullPath(System.String)">
 <summary>
 根据资源设置中的资源名称获取资源完整路径
 </summary>
 <param name="resourcepath">资源路径</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileResourceManager.GetFullPath(System.String,Smobiler.Core.Controls.ResourceType)">
 <summary>
 根据资源类型获取完整资源路径
 </summary>
 <param name="resourcepath">资源路径</param>
 <param name="rtype">资源类型</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileResourceManager.GetFullPath(System.String,System.String)">
 <summary>
 根据根路径和资源路径，获取完整路径
 </summary>
 <param name="rootPath">根路径</param>
 <param name="resourcePath">资源路径</param>
 <returns>完整路径</returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileResourceManager.GetResourceURL(System.String,System.String,System.String)">
 <summary>
 获取资源URL
 </summary>
 <param name="sessionid">会话编号</param>
 <param name="resourceid">资源编号</param>
 <param name="resourcepath">资源路径</param>
 <returns>资源URL</returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileResourceManager.GetResourceURL(System.String,System.String,System.String,Smobiler.Core.Controls.ResourceMode)">
 <summary>
 获取资源URL
 </summary>
 <param name="sessionid">会话编号</param>
 <param name="resourceid">资源编号</param>
 <param name="resourcepath">资源路径</param>
 <param name="resourcemode">资源类型</param>
 <returns>资源URL</returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileResourceManager.GetResourceURL(System.String,System.String)">
 <summary>
 获取资源URL
 </summary>
 <param name="sessionid">会话编号</param>
 <param name="url">资源路径</param>
 <returns></returns>
</member>
<member name="M:Smobiler.Core.MobileResourceManager.RegisterHttpResource(System.String,Smobiler.Core.Web.HttpResourceEntity)">
 <summary>
 注册HttpResource
 </summary>
 <param name="sessionId">会话编号</param>
 <param name="resourceEntity"><see cref="T:Smobiler.Core.Web.HttpResourceEntity"/></param>
 <returns>返回注册资源的URL地址</returns>
</member>
<member name="M:Smobiler.Core.MobileResourceManager.GetResourceData(System.String,System.String,Smobiler.Core.Web.HttpHandlerData,System.DateTime@)">
 <summary>
 获取资源数据
 </summary>
 <param name="resourceid"></param>
 <param name="resourcepath"></param>
 <param name="handlerdata"></param>
 <param name="modifydate"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileResourceManager.InitialResources(System.String)">
 <summary>
 初始化默认资源
 </summary>
 <param name="defaultImagePath"></param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.MobileServer">
 <summary>
 Smobiler服务
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileServer._httpServer">
 <summary>
 HTTP服务
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.MobileServer._tcpServer">
 <summary>
 TCP服务
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.MobileServer.SessionStart">
 <summary>
 在添加会话时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.MobileServer.SessionStop">
 <summary>
 在删除会话时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.MobileServer.SessionConnect">
 <summary>
 在会话连接时发生。
 </summary>
 <remarks></remarks>
</member>
<member name="E:Smobiler.Core.MobileServer.ClientPushOpened">
 <summary>
 在客户端点击打开推送内容后。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileServer.StartUpForm">
 <summary>
 获取或设置启动Form类型。
 </summary>
 <value></value>
 <remarks>
 Server.StartUpForm = GetType(MobileForm1)
 </remarks>
</member>
<member name="F:Smobiler.Core.MobileServer._setting">
 <summary>
 获取服务设置
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.MobileServer.ServerID">
 <summary>
 获取服务标识
 </summary>
 <value></value>
 <returns></returns>
 <remarks>此标识是和服务器硬件相关，所以请勿在关键系统业务中使用此属性所提供的值</remarks>
</member>
<member name="M:Smobiler.Core.MobileServer.InitSetting">
 <summary>
 初始化服务
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileServer.RegisterServiceKey(System.String,System.String,System.String)">
 <summary>
 注册服务密钥
 </summary>
 <param name="keyData">密钥数据</param>
 <param name="dataKey">密钥安全</param>
 <param name="dataIV">密钥安全</param>
</member>
<member name="M:Smobiler.Core.MobileServer.RegisterServiceKeyV2(System.String,System.String)">
 <summary>
 注册服务密钥
 </summary>
</member>
<member name="M:Smobiler.Core.MobileServer.StartServer">
 <summary>
 开始服务
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileServer.StopServer">
 <summary>
 停止服务
 </summary>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileServer.RegisterExtendHandler(Smobiler.Core.Web.ExtendHandlerType,System.Type)">
 <summary>
 注册扩展
 </summary>
 <param name="extendType">扩展类型，每一种扩展类型仅允许注册一次</param>
 <param name="handlerType">扩展类，必须实现接口ISmobilerExtendHandler</param>
 <remarks></remarks>
</member>
<member name="M:Smobiler.Core.MobileServer.IsRunAsAdmin">
 <summary>
 判断是否管理员身份运行
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.SmobilerSessionEventHandler">
 <summary>
 一个委托，它表示在Session处理时要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 SmobilerSessionEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.SmobilerSessionEventArgs">
 <summary>
 为SmobilerSession事件提供数据。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.SmobilerSessionEventArgs.Client">
 <summary>
 获取事件的Client
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.ClientPushOpenedEventHandler">
 <summary>
 一个委托，它表示在客户端点击打开推送内容后要调用的方法。
 </summary>
 <param name="sender">事件源</param>
 <param name="e">包含事件数据的 ClientPushOpenedEventArgs</param>
 <remarks></remarks>
</member>
<member name="T:Smobiler.Core.ClientPushOpenedEventArgs">
 <summary>
 为 ClientPushOpened 事件提供数据。
 </summary>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientPushOpenedEventArgs.Form">
 <summary>
 获取当前显示的窗体
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Smobiler.Core.ClientPushOpenedEventArgs.Params">
 <summary>
 获取推送自定义参数
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.SR.CatAction">
 <summary>
 与可用操作相关的属性
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.SR.CatAppearance">
 <summary>
 与实体的外观相关的属性
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.SR.CatBehavior">
 <summary>
 与实体的行为相关的属性
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.SR.CatData">
 <summary>
 与数据和数据源管理相关的属性
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.SR.CatDragDrop">
 <summary>
 与拖放操作相关的属性
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.SR.CatFocus">
 <summary>
 与焦点相关的属性
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.SR.CatKey">
 <summary>
 与键盘相关的属性
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.SR.CatLayout">
 <summary>
 与布局相关的属性
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.SR.CatMouse">
 <summary>
 与鼠标相关的属性
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.SR.CatPropertyChanged">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="F:Smobiler.Core.SR.CatWindowStyle">
 <summary>
 与顶级窗体的窗口样式相关的属性
 </summary>
 <remarks></remarks>
</member>
</members>
</doc>
